{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Sparkline base API Class declarations.\n */\n\n\nimport { Property, ChildProperty, Complex } from '@syncfusion/ej2-base';\n/**\n * Configures the borders in the Sparkline.\n */\n\nvar SparklineBorder =\n/** @class */\nfunction (_super) {\n  __extends(SparklineBorder, _super);\n\n  function SparklineBorder() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('')], SparklineBorder.prototype, \"color\", void 0);\n\n  __decorate([Property(0)], SparklineBorder.prototype, \"width\", void 0);\n\n  return SparklineBorder;\n}(ChildProperty);\n\nexport { SparklineBorder };\n/**\n * Configures the fonts in sparklines.\n */\n\nvar SparklineFont =\n/** @class */\nfunction (_super) {\n  __extends(SparklineFont, _super);\n\n  function SparklineFont() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(null)], SparklineFont.prototype, \"size\", void 0);\n\n  __decorate([Property(null)], SparklineFont.prototype, \"color\", void 0);\n\n  __decorate([Property('Roboto, Segoe UI, Noto, Sans-serif')], SparklineFont.prototype, \"fontFamily\", void 0);\n\n  __decorate([Property(null)], SparklineFont.prototype, \"fontWeight\", void 0);\n\n  __decorate([Property(null)], SparklineFont.prototype, \"fontStyle\", void 0);\n\n  __decorate([Property(1)], SparklineFont.prototype, \"opacity\", void 0);\n\n  return SparklineFont;\n}(ChildProperty);\n\nexport { SparklineFont };\n/**\n * To configure the tracker line settings.\n */\n\nvar TrackLineSettings =\n/** @class */\nfunction (_super) {\n  __extends(TrackLineSettings, _super);\n\n  function TrackLineSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(false)], TrackLineSettings.prototype, \"visible\", void 0);\n\n  __decorate([Property(null)], TrackLineSettings.prototype, \"color\", void 0);\n\n  __decorate([Property(1)], TrackLineSettings.prototype, \"width\", void 0);\n\n  return TrackLineSettings;\n}(ChildProperty);\n\nexport { TrackLineSettings };\n/**\n * To configure the tooltip settings for sparkline.\n */\n\nvar SparklineTooltipSettings =\n/** @class */\nfunction (_super) {\n  __extends(SparklineTooltipSettings, _super);\n\n  function SparklineTooltipSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(false)], SparklineTooltipSettings.prototype, \"visible\", void 0);\n\n  __decorate([Property('')], SparklineTooltipSettings.prototype, \"fill\", void 0);\n\n  __decorate([Property('')], SparklineTooltipSettings.prototype, \"template\", void 0);\n\n  __decorate([Property('')], SparklineTooltipSettings.prototype, \"format\", void 0);\n\n  __decorate([Complex({\n    color: '#cccccc',\n    width: 0.5\n  }, SparklineBorder)], SparklineTooltipSettings.prototype, \"border\", void 0);\n\n  __decorate([Complex({\n    size: '13px',\n    fontWeight: 'Normal',\n    fontStyle: 'Normal',\n    fontFamily: 'Roboto, Segoe UI, Noto, Sans-serif'\n  }, SparklineFont)], SparklineTooltipSettings.prototype, \"textStyle\", void 0);\n\n  __decorate([Complex({}, TrackLineSettings)], SparklineTooltipSettings.prototype, \"trackLineSettings\", void 0);\n\n  return SparklineTooltipSettings;\n}(ChildProperty);\n\nexport { SparklineTooltipSettings };\n/**\n * To configure the sparkline container area customization\n */\n\nvar ContainerArea =\n/** @class */\nfunction (_super) {\n  __extends(ContainerArea, _super);\n\n  function ContainerArea() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('transparent')], ContainerArea.prototype, \"background\", void 0);\n\n  __decorate([Complex({}, SparklineBorder)], ContainerArea.prototype, \"border\", void 0);\n\n  return ContainerArea;\n}(ChildProperty);\n\nexport { ContainerArea };\n/**\n * To configure axis line settings\n */\n\nvar LineSettings =\n/** @class */\nfunction (_super) {\n  __extends(LineSettings, _super);\n\n  function LineSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(false)], LineSettings.prototype, \"visible\", void 0);\n\n  __decorate([Property(null)], LineSettings.prototype, \"color\", void 0);\n\n  __decorate([Property('')], LineSettings.prototype, \"dashArray\", void 0);\n\n  __decorate([Property(1)], LineSettings.prototype, \"width\", void 0);\n\n  __decorate([Property(1)], LineSettings.prototype, \"opacity\", void 0);\n\n  return LineSettings;\n}(ChildProperty);\n\nexport { LineSettings };\n/**\n * To configure the sparkline rangeband\n */\n\nvar RangeBandSettings =\n/** @class */\nfunction (_super) {\n  __extends(RangeBandSettings, _super);\n\n  function RangeBandSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(null)], RangeBandSettings.prototype, \"startRange\", void 0);\n\n  __decorate([Property(null)], RangeBandSettings.prototype, \"endRange\", void 0);\n\n  __decorate([Property(null)], RangeBandSettings.prototype, \"color\", void 0);\n\n  __decorate([Property(1)], RangeBandSettings.prototype, \"opacity\", void 0);\n\n  return RangeBandSettings;\n}(ChildProperty);\n\nexport { RangeBandSettings };\n/**\n * To configure the sparkline axis\n */\n\nvar AxisSettings =\n/** @class */\nfunction (_super) {\n  __extends(AxisSettings, _super);\n\n  function AxisSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(null)], AxisSettings.prototype, \"minX\", void 0);\n\n  __decorate([Property(null)], AxisSettings.prototype, \"maxX\", void 0);\n\n  __decorate([Property(null)], AxisSettings.prototype, \"minY\", void 0);\n\n  __decorate([Property(null)], AxisSettings.prototype, \"maxY\", void 0);\n\n  __decorate([Property(0)], AxisSettings.prototype, \"value\", void 0);\n\n  __decorate([Complex({}, LineSettings)], AxisSettings.prototype, \"lineSettings\", void 0);\n\n  return AxisSettings;\n}(ChildProperty);\n\nexport { AxisSettings };\n/**\n * To configure the sparkline padding.\n */\n\nvar Padding =\n/** @class */\nfunction (_super) {\n  __extends(Padding, _super);\n\n  function Padding() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(5)], Padding.prototype, \"left\", void 0);\n\n  __decorate([Property(5)], Padding.prototype, \"right\", void 0);\n\n  __decorate([Property(5)], Padding.prototype, \"bottom\", void 0);\n\n  __decorate([Property(5)], Padding.prototype, \"top\", void 0);\n\n  return Padding;\n}(ChildProperty);\n\nexport { Padding };\n/**\n * To configure the sparkline marker options.\n */\n\nvar SparklineMarkerSettings =\n/** @class */\nfunction (_super) {\n  __extends(SparklineMarkerSettings, _super);\n\n  function SparklineMarkerSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property([])], SparklineMarkerSettings.prototype, \"visible\", void 0);\n\n  __decorate([Property(1)], SparklineMarkerSettings.prototype, \"opacity\", void 0);\n\n  __decorate([Property(5)], SparklineMarkerSettings.prototype, \"size\", void 0);\n\n  __decorate([Property('#00bdae')], SparklineMarkerSettings.prototype, \"fill\", void 0);\n\n  __decorate([Complex({\n    width: 1\n  }, SparklineBorder)], SparklineMarkerSettings.prototype, \"border\", void 0);\n\n  return SparklineMarkerSettings;\n}(ChildProperty);\n\nexport { SparklineMarkerSettings };\n/**\n * To configure the datalabel offset\n */\n\nvar LabelOffset =\n/** @class */\nfunction (_super) {\n  __extends(LabelOffset, _super);\n\n  function LabelOffset() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(0)], LabelOffset.prototype, \"x\", void 0);\n\n  __decorate([Property(0)], LabelOffset.prototype, \"y\", void 0);\n\n  return LabelOffset;\n}(ChildProperty);\n\nexport { LabelOffset };\n/**\n * To configure the sparkline dataLabel options.\n */\n\nvar SparklineDataLabelSettings =\n/** @class */\nfunction (_super) {\n  __extends(SparklineDataLabelSettings, _super);\n\n  function SparklineDataLabelSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property([])], SparklineDataLabelSettings.prototype, \"visible\", void 0);\n\n  __decorate([Property(1)], SparklineDataLabelSettings.prototype, \"opacity\", void 0);\n\n  __decorate([Property('transparent')], SparklineDataLabelSettings.prototype, \"fill\", void 0);\n\n  __decorate([Property('')], SparklineDataLabelSettings.prototype, \"format\", void 0);\n\n  __decorate([Complex({\n    color: 'transparent',\n    width: 0\n  }, SparklineBorder)], SparklineDataLabelSettings.prototype, \"border\", void 0);\n\n  __decorate([Complex({\n    size: '14px',\n    fontWeight: 'Medium',\n    fontStyle: 'Medium',\n    fontFamily: 'Roboto, Segoe UI, Noto, Sans-serif'\n  }, SparklineFont)], SparklineDataLabelSettings.prototype, \"textStyle\", void 0);\n\n  __decorate([Complex({}, LabelOffset)], SparklineDataLabelSettings.prototype, \"offset\", void 0);\n\n  __decorate([Property('None')], SparklineDataLabelSettings.prototype, \"edgeLabelMode\", void 0);\n\n  return SparklineDataLabelSettings;\n}(ChildProperty);\n\nexport { SparklineDataLabelSettings };","map":null,"metadata":{},"sourceType":"module"}