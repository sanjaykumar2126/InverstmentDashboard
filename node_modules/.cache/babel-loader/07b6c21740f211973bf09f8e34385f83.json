{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { withInRange, pathAnimation, getElement } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { ColumnBase } from './column-base';\n/**\n * `CandleSeries` module is used to render the candle series.\n */\n\nvar CandleSeries =\n/** @class */\nfunction (_super) {\n  __extends(CandleSeries, _super);\n\n  function CandleSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render Candle series.\n   * @return {void}\n   * @private\n   */\n\n\n  CandleSeries.prototype.render = function (series) {\n    var sideBySideInfo = this.getSideBySideInfo(series);\n    var argsData;\n    var borderWidth = Math.max(series.border.width, 1);\n\n    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n      var point = _a[_i];\n      var direction = '';\n      var centerRegion = void 0;\n      var tickRegion = void 0;\n      var midPoint = void 0;\n      midPoint = (sideBySideInfo.start + sideBySideInfo.end) / 2; //initializing after zooming and also normal initialization\n\n      point.regions = [];\n      point.symbolLocations = [];\n\n      if (point.visible && withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {\n        //region to cover the top and bottom ticks\n        tickRegion = this.getRectangle(point.xValue + sideBySideInfo.median, Math.max(point.high, point.low), point.xValue + sideBySideInfo.median, Math.min(point.high, point.low), series);\n\n        if (!series.chart.requireInvertedAxis) {\n          tickRegion.x -= borderWidth / 2;\n          tickRegion.width = borderWidth;\n        } else {\n          tickRegion.y -= borderWidth / 2;\n          tickRegion.height = borderWidth;\n        } //get middleRect\n\n\n        centerRegion = this.getRectangle(point.xValue + sideBySideInfo.start, Math.max(point.open, point.close), point.xValue + sideBySideInfo.end, Math.min(point.open, point.close), series);\n        direction = this.getPathString(tickRegion, centerRegion, series);\n        argsData = this.triggerPointRenderEvent(series, point);\n\n        if (!argsData.cancel) {\n          this.drawCandle(series, point, centerRegion, argsData, direction);\n          this.updateSymbolLocation(point, tickRegion, series);\n          this.updateSymbolLocation(point, centerRegion, series);\n        }\n      }\n    }\n  };\n  /**\n   * Trigger point rendering event\n   */\n\n\n  CandleSeries.prototype.triggerPointRenderEvent = function (series, point) {\n    var fill;\n    fill = this.getCandleColor(point, series);\n    var border = {\n      color: series.border.color,\n      width: Math.max(series.border.width, 1)\n    };\n    return this.triggerEvent(series, point, fill, border);\n  };\n  /**\n   * Find the color of the candle\n   * @param series\n   * @private\n   */\n\n\n  CandleSeries.prototype.getCandleColor = function (point, series) {\n    var currentPoint = point;\n    var previousPoint = series.points[point.index - 1];\n\n    if (series.enableSolidCandles === false) {\n      if (!previousPoint) {\n        return series.bearFillColor;\n      } else {\n        return previousPoint.close > point.close ? series.bullFillColor : series.bearFillColor;\n      }\n    } else {\n      return point.open > point.close ? series.bullFillColor : series.bearFillColor;\n    }\n  };\n  /**\n   * Finds the path of the candle shape\n   * @param Series\n   * @private\n   */\n\n\n  CandleSeries.prototype.getPathString = function (topRect, midRect, series) {\n    var direction = '';\n    var width = series.chart.requireInvertedAxis ? topRect.height : topRect.width;\n    var center = series.chart.requireInvertedAxis ? topRect.y + topRect.height / 2 : topRect.x + topRect.width / 2; //tick 1 segment\n\n    direction += !series.chart.requireInvertedAxis ? 'M' + ' ' + center + ' ' + topRect.y + ' ' + 'L' + ' ' + center + ' ' + midRect.y : 'M' + ' ' + topRect.x + ' ' + center + ' ' + 'L' + ' ' + midRect.x + ' ' + center;\n    direction = direction.concat(' M' + ' ' + midRect.x + ' ' + midRect.y + ' ' + 'L' + ' ' + (midRect.x + midRect.width) + ' ' + midRect.y + ' ' + 'L' + ' ' + (midRect.x + midRect.width) + ' ' + (midRect.y + midRect.height) + ' ' + 'L' + ' ' + midRect.x + ' ' + (midRect.y + midRect.height) + ' ' + 'Z');\n    direction += !series.chart.requireInvertedAxis ? ' M' + ' ' + center + ' ' + (midRect.y + midRect.height) + ' ' + 'L' + ' ' + center + ' ' + (topRect.y + topRect.height) : ' M' + ' ' + (midRect.x + midRect.width) + ' ' + center + ' ' + 'L' + ' ' + (topRect.x + topRect.width) + ' ' + center;\n    return direction;\n  };\n  /**\n   * Draws the candle shape\n   * @param series\n   * @private\n   */\n\n\n  CandleSeries.prototype.drawCandle = function (series, point, rect, argsData, direction) {\n    var check = series.chart.requireInvertedAxis ? rect.height : rect.width;\n\n    if (check <= 0) {\n      return null;\n    }\n\n    var fill = !series.enableSolidCandles ? point.open > point.close ? argsData.fill : 'transparent' : argsData.fill;\n    argsData.border.color = argsData.fill;\n    var options = new PathOption(series.chart.element.id + '_Series_' + series.index + '_Point_' + point.index, fill, argsData.border.width, argsData.border.color, series.opacity, series.dashArray, direction);\n    var element = getElement(options.id);\n    var previousDirection = element ? element.getAttribute('d') : null;\n    var candleElement = series.chart.renderer.drawPath(options, new Int32Array([series.clipRect.x, series.clipRect.y]));\n    candleElement.setAttribute('aria-label', point.x.toString() + ':' + point.high.toString() + ':' + point.low.toString() + ':' + point.close.toString() + ':' + point.open.toString());\n\n    if (!series.chart.enableCanvas) {\n      series.seriesElement.appendChild(candleElement);\n    }\n\n    pathAnimation(element, direction, series.chart.redraw, previousDirection);\n  };\n  /**\n   * Animates the series.\n   * @param  {Series} series - Defines the series to animate.\n   * @return {void}\n   */\n\n\n  CandleSeries.prototype.doAnimation = function (series) {\n    this.animate(series);\n  };\n  /**\n   * Get module name.\n   */\n\n\n  CandleSeries.prototype.getModuleName = function () {\n    return 'CandleSeries';\n    /**\n     * return the module name\n     */\n  };\n  /**\n   * To destroy the candle series.\n   * @return {void}\n   * @private\n   */\n\n\n  CandleSeries.prototype.destroy = function (chart) {\n    /**\n     * Destroys the candle series.\n     */\n  };\n\n  return CandleSeries;\n}(ColumnBase);\n\nexport { CandleSeries };","map":null,"metadata":{},"sourceType":"module"}