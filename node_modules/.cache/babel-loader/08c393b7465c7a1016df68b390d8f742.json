{"ast":null,"code":"import { ChartElement } from '../../core';\nimport { setDefaultOptions } from '../../common';\nimport { forEach, forEachReverse } from './utils';\n\nvar RadarClusterLayout = function (ChartElement) {\n  function RadarClusterLayout(options) {\n    ChartElement.call(this, options);\n    this.forEach = options.rtl ? forEachReverse : forEach;\n  }\n\n  if (ChartElement) RadarClusterLayout.__proto__ = ChartElement;\n  RadarClusterLayout.prototype = Object.create(ChartElement && ChartElement.prototype);\n  RadarClusterLayout.prototype.constructor = RadarClusterLayout;\n\n  RadarClusterLayout.prototype.reflow = function reflow(sector) {\n    var ref = this;\n    var options = ref.options;\n    var children = ref.children;\n    var gap = options.gap;\n    var spacing = options.spacing;\n    var count = children.length;\n    var slots = count + gap + spacing * (count - 1);\n    var slotAngle = sector.angle / slots;\n    var angle = sector.startAngle + slotAngle * (gap / 2);\n    this.forEach(children, function (child) {\n      var slotSector = sector.clone();\n      slotSector.startAngle = angle;\n      slotSector.angle = slotAngle;\n\n      if (child.sector) {\n        slotSector.radius = child.sector.radius;\n      }\n\n      child.reflow(slotSector);\n      child.sector = slotSector;\n      angle += slotAngle + slotAngle * spacing;\n    });\n  };\n\n  return RadarClusterLayout;\n}(ChartElement);\n\nsetDefaultOptions(RadarClusterLayout, {\n  gap: 1,\n  spacing: 0\n});\nexport default RadarClusterLayout;","map":null,"metadata":{},"sourceType":"module"}