{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `AccumulationDistributionIndicator` module is used to render accumulation distribution indicator.\n */\n\nvar AccumulationDistributionIndicator =\n/** @class */\nfunction (_super) {\n  __extends(AccumulationDistributionIndicator, _super);\n\n  function AccumulationDistributionIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Defines the predictions using accumulation distribution approach\n   * @private\n   */\n\n\n  AccumulationDistributionIndicator.prototype.initDataSource = function (indicator, chart) {\n    var sourceSeries = indicator.sourceSeries;\n    var adPoints = [];\n    var validData = indicator.points;\n\n    if (validData.length > 0 && validData.length > indicator.period) {\n      adPoints = this.calculateADPoints(indicator, validData);\n    }\n\n    this.setSeriesRange(adPoints, indicator);\n  };\n  /**\n   *  Calculates the Accumulation Distribution values\n   * @private\n   */\n\n\n  AccumulationDistributionIndicator.prototype.calculateADPoints = function (indicator, validData) {\n    var temp = [];\n    var sum = 0;\n    var i = 0;\n    var value = 0;\n    var high = 0;\n    var low = 0;\n    var close = 0;\n    var signalSeries = indicator.targetSeries[0];\n\n    for (i = 0; i < validData.length; i++) {\n      high = Number(validData[i].high);\n      low = Number(validData[i].low);\n      close = Number(validData[i].close);\n      /**\n       * Money Flow Multiplier = [(Close -  Low) - (High - Close)] /(High - Low)\n       * Money Flow Volume = Money Flow Multiplier x Volume for the Period\n       * ADL = Previous ADL + Current Period's Money Flow Volume\n       */\n\n      value = (close - low - (high - close)) / (high - low);\n      /**\n       * Sum is to calculate the Y values of the Accumulation distribution indicator\n       */\n\n      sum = sum + value * Number(validData[i].volume);\n      /**\n       * To calculate the x and y values for the Accumulation distribution indicator\n       */\n\n      temp[i] = this.getDataPoint(validData[i].x, sum, validData[i], signalSeries, temp.length);\n    }\n\n    return temp;\n  };\n  /**\n   * To destroy the Accumulation Distribution Technical Indicator.\n   * @return {void}\n   * @private\n   */\n\n\n  AccumulationDistributionIndicator.prototype.destroy = function (chart) {\n    /**\n     * Destroys the Accumulation Distribution Technical indicator\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  AccumulationDistributionIndicator.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the Indicator\n     */\n    return 'AccumulationDistributionIndicator';\n  };\n\n  return AccumulationDistributionIndicator;\n}(TechnicalAnalysis);\n\nexport { AccumulationDistributionIndicator };","map":null,"metadata":{},"sourceType":"module"}