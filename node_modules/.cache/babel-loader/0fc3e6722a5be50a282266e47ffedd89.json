{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport { ChartElement, Box, rectToBox } from '../../core';\n\nvar LegendLayout = function (ChartElement) {\n  function LegendLayout(options, chartService) {\n    ChartElement.call(this, options);\n    this.chartService = chartService;\n  }\n\n  if (ChartElement) LegendLayout.__proto__ = ChartElement;\n  LegendLayout.prototype = Object.create(ChartElement && ChartElement.prototype);\n  LegendLayout.prototype.constructor = LegendLayout;\n\n  LegendLayout.prototype.render = function render() {\n    var ref = this;\n    var children = ref.children;\n    var options = ref.options;\n    var vertical = options.vertical;\n    this.visual = new draw.Layout(null, {\n      spacing: vertical ? 0 : options.spacing,\n      lineSpacing: vertical ? options.spacing : 0,\n      orientation: vertical ? \"vertical\" : \"horizontal\",\n      reverse: options.rtl,\n      alignItems: vertical ? \"start\" : \"center\"\n    });\n\n    for (var idx = 0; idx < children.length; idx++) {\n      var legendItem = children[idx];\n      legendItem.reflow(new Box());\n      legendItem.renderVisual();\n    }\n  };\n\n  LegendLayout.prototype.reflow = function reflow(box) {\n    this.visual.rect(box.toRect());\n    this.visual.reflow();\n    var bbox = this.visual.clippedBBox();\n\n    if (bbox) {\n      this.box = rectToBox(bbox);\n    } else {\n      this.box = new Box();\n    }\n  };\n\n  LegendLayout.prototype.renderVisual = function renderVisual() {\n    this.addVisual();\n  };\n\n  LegendLayout.prototype.createVisual = function createVisual() {};\n\n  return LegendLayout;\n}(ChartElement);\n\nexport default LegendLayout;","map":null,"metadata":{},"sourceType":"module"}