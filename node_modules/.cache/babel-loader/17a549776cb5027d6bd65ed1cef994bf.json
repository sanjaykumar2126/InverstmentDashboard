{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { ChildProperty, Property, Complex, Collection } from '@syncfusion/ej2-base';\nimport { MarkerSettings, Trendline } from '../../chart/series/chart-series';\nimport { MajorGridLines, MajorTickLines, MinorTickLines, MinorGridLines, CrosshairTooltip, AxisLine } from '../../chart/axis/axis';\nimport { CornerRadius } from '../../common/model/base';\nimport { Theme } from '../../common/model/theme';\n\nvar StockChartFont =\n/** @class */\nfunction (_super) {\n  __extends(StockChartFont, _super);\n\n  function StockChartFont() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('')], StockChartFont.prototype, \"color\", void 0);\n\n  __decorate([Property('16px')], StockChartFont.prototype, \"size\", void 0);\n\n  __decorate([Property('Segoe UI')], StockChartFont.prototype, \"fontFamily\", void 0);\n\n  __decorate([Property('Normal')], StockChartFont.prototype, \"fontStyle\", void 0);\n\n  __decorate([Property('Normal')], StockChartFont.prototype, \"fontWeight\", void 0);\n\n  __decorate([Property(1)], StockChartFont.prototype, \"opacity\", void 0);\n\n  __decorate([Property('Trim')], StockChartFont.prototype, \"textOverflow\", void 0);\n\n  __decorate([Property('Center')], StockChartFont.prototype, \"textAlignment\", void 0);\n\n  return StockChartFont;\n}(ChildProperty);\n\nexport { StockChartFont };\n/**\n * Border\n */\n\nvar StockChartBorder =\n/** @class */\nfunction (_super) {\n  __extends(StockChartBorder, _super);\n\n  function StockChartBorder() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('')], StockChartBorder.prototype, \"color\", void 0);\n\n  __decorate([Property(1)], StockChartBorder.prototype, \"width\", void 0);\n\n  return StockChartBorder;\n}(ChildProperty);\n\nexport { StockChartBorder };\n/**\n * Configures the chart area.\n */\n\nvar StockChartArea =\n/** @class */\nfunction (_super) {\n  __extends(StockChartArea, _super);\n\n  function StockChartArea() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Complex({}, StockChartBorder)], StockChartArea.prototype, \"border\", void 0);\n\n  __decorate([Property('transparent')], StockChartArea.prototype, \"background\", void 0);\n\n  __decorate([Property(1)], StockChartArea.prototype, \"opacity\", void 0);\n\n  return StockChartArea;\n}(ChildProperty);\n\nexport { StockChartArea };\n/**\n * Configures the chart margins.\n */\n\nvar StockMargin =\n/** @class */\nfunction (_super) {\n  __extends(StockMargin, _super);\n\n  function StockMargin() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(10)], StockMargin.prototype, \"left\", void 0);\n\n  __decorate([Property(10)], StockMargin.prototype, \"right\", void 0);\n\n  __decorate([Property(10)], StockMargin.prototype, \"top\", void 0);\n\n  __decorate([Property(10)], StockMargin.prototype, \"bottom\", void 0);\n\n  return StockMargin;\n}(ChildProperty);\n\nexport { StockMargin };\n/**\n * StockChart strip line settings\n */\n\nvar StockChartStripLineSettings =\n/** @class */\nfunction (_super) {\n  __extends(StockChartStripLineSettings, _super);\n\n  function StockChartStripLineSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(false)], StockChartStripLineSettings.prototype, \"startFromAxis\", void 0);\n\n  __decorate([Property(true)], StockChartStripLineSettings.prototype, \"visible\", void 0);\n\n  __decorate([Property(null)], StockChartStripLineSettings.prototype, \"start\", void 0);\n\n  __decorate([Property('#808080')], StockChartStripLineSettings.prototype, \"color\", void 0);\n\n  __decorate([Property(null)], StockChartStripLineSettings.prototype, \"end\", void 0);\n\n  __decorate([Property(null)], StockChartStripLineSettings.prototype, \"size\", void 0);\n\n  __decorate([Property('Auto')], StockChartStripLineSettings.prototype, \"sizeType\", void 0);\n\n  __decorate([Property(null)], StockChartStripLineSettings.prototype, \"dashArray\", void 0);\n\n  __decorate([Property(false)], StockChartStripLineSettings.prototype, \"isRepeat\", void 0);\n\n  __decorate([Property(null)], StockChartStripLineSettings.prototype, \"repeatEvery\", void 0);\n\n  __decorate([Property(false)], StockChartStripLineSettings.prototype, \"isSegmented\", void 0);\n\n  __decorate([Property(null)], StockChartStripLineSettings.prototype, \"repeatUntil\", void 0);\n\n  __decorate([Property(null)], StockChartStripLineSettings.prototype, \"segmentStart\", void 0);\n\n  __decorate([Property(null)], StockChartStripLineSettings.prototype, \"segmentAxisName\", void 0);\n\n  __decorate([Property(null)], StockChartStripLineSettings.prototype, \"segmentEnd\", void 0);\n\n  __decorate([Property(1)], StockChartStripLineSettings.prototype, \"opacity\", void 0);\n\n  __decorate([Property('')], StockChartStripLineSettings.prototype, \"text\", void 0);\n\n  __decorate([Complex({\n    color: 'transparent',\n    width: 1\n  }, StockChartBorder)], StockChartStripLineSettings.prototype, \"border\", void 0);\n\n  __decorate([Property(null)], StockChartStripLineSettings.prototype, \"rotation\", void 0);\n\n  __decorate([Property('Behind')], StockChartStripLineSettings.prototype, \"zIndex\", void 0);\n\n  __decorate([Property('Middle')], StockChartStripLineSettings.prototype, \"horizontalAlignment\", void 0);\n\n  __decorate([Property('Middle')], StockChartStripLineSettings.prototype, \"verticalAlignment\", void 0);\n\n  __decorate([Complex(Theme.stripLineLabelFont, StockChartFont)], StockChartStripLineSettings.prototype, \"textStyle\", void 0);\n\n  return StockChartStripLineSettings;\n}(ChildProperty);\n\nexport { StockChartStripLineSettings };\n\nvar Animation =\n/** @class */\nfunction (_super) {\n  __extends(Animation, _super);\n\n  function Animation() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(0)], Animation.prototype, \"delay\", void 0);\n\n  __decorate([Property(false)], Animation.prototype, \"enable\", void 0);\n\n  __decorate([Property(1000)], Animation.prototype, \"duration\", void 0);\n\n  return Animation;\n}(ChildProperty);\n\nvar StockEmptyPointSettings =\n/** @class */\nfunction (_super) {\n  __extends(StockEmptyPointSettings, _super);\n\n  function StockEmptyPointSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(null)], StockEmptyPointSettings.prototype, \"fill\", void 0);\n\n  __decorate([Property('Gap')], StockEmptyPointSettings.prototype, \"mode\", void 0);\n\n  __decorate([Complex({\n    color: 'transparent',\n    width: 0\n  }, StockChartBorder)], StockEmptyPointSettings.prototype, \"border\", void 0);\n\n  return StockEmptyPointSettings;\n}(ChildProperty);\n\nexport { StockEmptyPointSettings };\n\nvar StockChartConnector =\n/** @class */\nfunction (_super) {\n  __extends(StockChartConnector, _super);\n\n  function StockChartConnector() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('Line')], StockChartConnector.prototype, \"type\", void 0);\n\n  __decorate([Property(null)], StockChartConnector.prototype, \"length\", void 0);\n\n  __decorate([Property(null)], StockChartConnector.prototype, \"color\", void 0);\n\n  __decorate([Property('')], StockChartConnector.prototype, \"dashArray\", void 0);\n\n  __decorate([Property(1)], StockChartConnector.prototype, \"width\", void 0);\n\n  return StockChartConnector;\n}(ChildProperty);\n\nexport { StockChartConnector };\n/**\n * Configures the Annotation for chart.\n */\n\nvar StockSeries =\n/** @class */\nfunction (_super) {\n  __extends(StockSeries, _super);\n\n  function StockSeries() {\n    /**\n     * The DataSource field that contains the x value.\n     * It is applicable for series and technical indicators\n     * @default ''\n     */\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** @private */\n\n\n    _this.localData = undefined;\n    return _this;\n  }\n\n  __decorate([Property('date')], StockSeries.prototype, \"xName\", void 0);\n\n  __decorate([Property('close')], StockSeries.prototype, \"yName\", void 0);\n\n  __decorate([Property('open')], StockSeries.prototype, \"open\", void 0);\n\n  __decorate([Property('close')], StockSeries.prototype, \"close\", void 0);\n\n  __decorate([Property('high')], StockSeries.prototype, \"high\", void 0);\n\n  __decorate([Property('low')], StockSeries.prototype, \"low\", void 0);\n\n  __decorate([Property('volume')], StockSeries.prototype, \"volume\", void 0);\n\n  __decorate([Property('')], StockSeries.prototype, \"pointColorMapping\", void 0);\n\n  __decorate([Complex(null, Animation)], StockSeries.prototype, \"animation\", void 0);\n\n  __decorate([Property(null)], StockSeries.prototype, \"xAxisName\", void 0);\n\n  __decorate([Property(null)], StockSeries.prototype, \"yAxisName\", void 0);\n\n  __decorate([Property(null)], StockSeries.prototype, \"fill\", void 0);\n\n  __decorate([Property('0')], StockSeries.prototype, \"dashArray\", void 0);\n\n  __decorate([Property(1)], StockSeries.prototype, \"width\", void 0);\n\n  __decorate([Property('')], StockSeries.prototype, \"name\", void 0);\n\n  __decorate([Property('')], StockSeries.prototype, \"dataSource\", void 0);\n\n  __decorate([Property()], StockSeries.prototype, \"query\", void 0);\n\n  __decorate([Property('#e74c3d')], StockSeries.prototype, \"bullFillColor\", void 0);\n\n  __decorate([Property('#2ecd71')], StockSeries.prototype, \"bearFillColor\", void 0);\n\n  __decorate([Property(false)], StockSeries.prototype, \"enableSolidCandles\", void 0);\n\n  __decorate([Property(true)], StockSeries.prototype, \"visible\", void 0);\n\n  __decorate([Complex({\n    color: 'transparent',\n    width: 0\n  }, StockChartBorder)], StockSeries.prototype, \"border\", void 0);\n\n  __decorate([Property(1)], StockSeries.prototype, \"opacity\", void 0);\n\n  __decorate([Property('Candle')], StockSeries.prototype, \"type\", void 0);\n\n  __decorate([Complex(null, MarkerSettings)], StockSeries.prototype, \"marker\", void 0);\n\n  __decorate([Collection([], Trendline)], StockSeries.prototype, \"trendlines\", void 0);\n\n  __decorate([Property(true)], StockSeries.prototype, \"enableTooltip\", void 0);\n\n  __decorate([Property('')], StockSeries.prototype, \"tooltipMappingName\", void 0);\n\n  __decorate([Property(null)], StockSeries.prototype, \"selectionStyle\", void 0);\n\n  __decorate([Property(0.5)], StockSeries.prototype, \"cardinalSplineTension\", void 0);\n\n  __decorate([Complex(null, CornerRadius)], StockSeries.prototype, \"cornerRadius\", void 0);\n\n  __decorate([Complex(null, StockEmptyPointSettings)], StockSeries.prototype, \"emptyPointSettings\", void 0);\n\n  __decorate([Property(null)], StockSeries.prototype, \"columnWidth\", void 0);\n\n  __decorate([Property(0)], StockSeries.prototype, \"columnSpacing\", void 0);\n\n  return StockSeries;\n}(ChildProperty);\n\nexport { StockSeries };\n\nvar StockChartIndicator =\n/** @class */\nfunction (_super) {\n  __extends(StockChartIndicator, _super);\n\n  function StockChartIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('Sma')], StockChartIndicator.prototype, \"type\", void 0);\n\n  __decorate([Property(14)], StockChartIndicator.prototype, \"period\", void 0);\n\n  __decorate([Property(3)], StockChartIndicator.prototype, \"dPeriod\", void 0);\n\n  __decorate([Property(14)], StockChartIndicator.prototype, \"kPeriod\", void 0);\n\n  __decorate([Property(80)], StockChartIndicator.prototype, \"overBought\", void 0);\n\n  __decorate([Property(20)], StockChartIndicator.prototype, \"overSold\", void 0);\n\n  __decorate([Property('Close')], StockChartIndicator.prototype, \"field\", void 0);\n\n  __decorate([Property(2)], StockChartIndicator.prototype, \"standardDeviation\", void 0);\n\n  __decorate([Property(12)], StockChartIndicator.prototype, \"slowPeriod\", void 0);\n\n  __decorate([Property(true)], StockChartIndicator.prototype, \"showZones\", void 0);\n\n  __decorate([Property(26)], StockChartIndicator.prototype, \"fastPeriod\", void 0);\n\n  __decorate([Complex({\n    color: '#ff9933',\n    width: 2\n  }, StockChartConnector)], StockChartIndicator.prototype, \"macdLine\", void 0);\n\n  __decorate([Property('Both')], StockChartIndicator.prototype, \"macdType\", void 0);\n\n  __decorate([Property('#e74c3d')], StockChartIndicator.prototype, \"macdNegativeColor\", void 0);\n\n  __decorate([Property('#2ecd71')], StockChartIndicator.prototype, \"macdPositiveColor\", void 0);\n\n  __decorate([Property('rgba(211,211,211,0.25)')], StockChartIndicator.prototype, \"bandColor\", void 0);\n\n  __decorate([Complex({\n    color: '#ffb735',\n    width: 1\n  }, StockChartConnector)], StockChartIndicator.prototype, \"upperLine\", void 0);\n\n  __decorate([Property('')], StockChartIndicator.prototype, \"seriesName\", void 0);\n\n  __decorate([Complex({\n    color: '#f2ec2f',\n    width: 1\n  }, StockChartConnector)], StockChartIndicator.prototype, \"periodLine\", void 0);\n\n  __decorate([Complex({\n    color: '#f2ec2f',\n    width: 1\n  }, StockChartConnector)], StockChartIndicator.prototype, \"lowerLine\", void 0);\n\n  __decorate([Property('')], StockChartIndicator.prototype, \"high\", void 0);\n\n  __decorate([Property('')], StockChartIndicator.prototype, \"open\", void 0);\n\n  __decorate([Property('')], StockChartIndicator.prototype, \"low\", void 0);\n\n  __decorate([Property('')], StockChartIndicator.prototype, \"xName\", void 0);\n\n  __decorate([Property('')], StockChartIndicator.prototype, \"close\", void 0);\n\n  __decorate([Property('')], StockChartIndicator.prototype, \"pointColorMapping\", void 0);\n\n  __decorate([Property('')], StockChartIndicator.prototype, \"volume\", void 0);\n\n  __decorate([Property(null)], StockChartIndicator.prototype, \"xAxisName\", void 0);\n\n  __decorate([Property(null)], StockChartIndicator.prototype, \"yAxisName\", void 0);\n\n  __decorate([Complex(null, Animation)], StockChartIndicator.prototype, \"animation\", void 0);\n\n  __decorate([Property(null)], StockChartIndicator.prototype, \"fill\", void 0);\n\n  __decorate([Property('0')], StockChartIndicator.prototype, \"dashArray\", void 0);\n\n  __decorate([Property(1)], StockChartIndicator.prototype, \"width\", void 0);\n\n  __decorate([Property()], StockChartIndicator.prototype, \"query\", void 0);\n\n  __decorate([Property('')], StockChartIndicator.prototype, \"dataSource\", void 0);\n\n  return StockChartIndicator;\n}(ChildProperty);\n\nexport { StockChartIndicator };\n\nvar StockChartAxis =\n/** @class */\nfunction (_super) {\n  __extends(StockChartAxis, _super);\n\n  function StockChartAxis() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Complex({}, CrosshairTooltip)], StockChartAxis.prototype, \"crosshairTooltip\", void 0);\n\n  __decorate([Complex(Theme.axisLabelFont, StockChartFont)], StockChartAxis.prototype, \"labelStyle\", void 0);\n\n  __decorate([Property('')], StockChartAxis.prototype, \"title\", void 0);\n\n  __decorate([Complex(Theme.axisTitleFont, StockChartFont)], StockChartAxis.prototype, \"titleStyle\", void 0);\n\n  __decorate([Property('')], StockChartAxis.prototype, \"labelFormat\", void 0);\n\n  __decorate([Property('DateTime')], StockChartAxis.prototype, \"skeletonType\", void 0);\n\n  __decorate([Property('')], StockChartAxis.prototype, \"skeleton\", void 0);\n\n  __decorate([Property(0)], StockChartAxis.prototype, \"plotOffset\", void 0);\n\n  __decorate([Property(10)], StockChartAxis.prototype, \"logBase\", void 0);\n\n  __decorate([Property(0)], StockChartAxis.prototype, \"rowIndex\", void 0);\n\n  __decorate([Property(1)], StockChartAxis.prototype, \"span\", void 0);\n\n  __decorate([Property(3)], StockChartAxis.prototype, \"maximumLabels\", void 0);\n\n  __decorate([Property(null)], StockChartAxis.prototype, \"desiredIntervals\", void 0);\n\n  __decorate([Property(1)], StockChartAxis.prototype, \"zoomFactor\", void 0);\n\n  __decorate([Property(0)], StockChartAxis.prototype, \"zoomPosition\", void 0);\n\n  __decorate([Property(false)], StockChartAxis.prototype, \"opposedPosition\", void 0);\n\n  __decorate([Property(true)], StockChartAxis.prototype, \"enableAutoIntervalOnZooming\", void 0);\n\n  __decorate([Property('Double')], StockChartAxis.prototype, \"valueType\", void 0);\n\n  __decorate([Property('Auto')], StockChartAxis.prototype, \"rangePadding\", void 0);\n\n  __decorate([Property('None')], StockChartAxis.prototype, \"edgeLabelPlacement\", void 0);\n\n  __decorate([Property('BetweenTicks')], StockChartAxis.prototype, \"labelPlacement\", void 0);\n\n  __decorate([Property('Auto')], StockChartAxis.prototype, \"intervalType\", void 0);\n\n  __decorate([Property('Outside')], StockChartAxis.prototype, \"tickPosition\", void 0);\n\n  __decorate([Property('')], StockChartAxis.prototype, \"name\", void 0);\n\n  __decorate([Property('Outside')], StockChartAxis.prototype, \"labelPosition\", void 0);\n\n  __decorate([Property(true)], StockChartAxis.prototype, \"visible\", void 0);\n\n  __decorate([Property(0)], StockChartAxis.prototype, \"labelRotation\", void 0);\n\n  __decorate([Property(0)], StockChartAxis.prototype, \"minorTicksPerInterval\", void 0);\n\n  __decorate([Property(null)], StockChartAxis.prototype, \"crossesAt\", void 0);\n\n  __decorate([Property(null)], StockChartAxis.prototype, \"crossesInAxis\", void 0);\n\n  __decorate([Property(true)], StockChartAxis.prototype, \"placeNextToAxisLine\", void 0);\n\n  __decorate([Property(null)], StockChartAxis.prototype, \"minimum\", void 0);\n\n  __decorate([Property(null)], StockChartAxis.prototype, \"interval\", void 0);\n\n  __decorate([Property(null)], StockChartAxis.prototype, \"maximum\", void 0);\n\n  __decorate([Property(34)], StockChartAxis.prototype, \"maximumLabelWidth\", void 0);\n\n  __decorate([Complex({}, MajorTickLines)], StockChartAxis.prototype, \"majorTickLines\", void 0);\n\n  __decorate([Property(false)], StockChartAxis.prototype, \"enableTrim\", void 0);\n\n  __decorate([Complex({}, MinorTickLines)], StockChartAxis.prototype, \"minorTickLines\", void 0);\n\n  __decorate([Complex({}, MinorGridLines)], StockChartAxis.prototype, \"minorGridLines\", void 0);\n\n  __decorate([Complex({}, MajorGridLines)], StockChartAxis.prototype, \"majorGridLines\", void 0);\n\n  __decorate([Complex({}, AxisLine)], StockChartAxis.prototype, \"lineStyle\", void 0);\n\n  __decorate([Property(false)], StockChartAxis.prototype, \"isInversed\", void 0);\n\n  __decorate([Property('Trim')], StockChartAxis.prototype, \"labelIntersectAction\", void 0);\n\n  __decorate([Property(100)], StockChartAxis.prototype, \"coefficient\", void 0);\n\n  __decorate([Property(0)], StockChartAxis.prototype, \"startAngle\", void 0);\n\n  __decorate([Property(2)], StockChartAxis.prototype, \"tabIndex\", void 0);\n\n  __decorate([Collection([], StockChartStripLineSettings)], StockChartAxis.prototype, \"stripLines\", void 0);\n\n  __decorate([Property(null)], StockChartAxis.prototype, \"description\", void 0);\n\n  return StockChartAxis;\n}(ChildProperty);\n\nexport { StockChartAxis };\n/**\n * StockChart row\n */\n\nvar StockChartRow =\n/** @class */\nfunction (_super) {\n  __extends(StockChartRow, _super);\n\n  function StockChartRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('100%')], StockChartRow.prototype, \"height\", void 0);\n\n  __decorate([Complex({}, StockChartBorder)], StockChartRow.prototype, \"border\", void 0);\n\n  return StockChartRow;\n}(ChildProperty);\n\nexport { StockChartRow };\n\nvar StockChartTrendline =\n/** @class */\nfunction (_super) {\n  __extends(StockChartTrendline, _super);\n\n  function StockChartTrendline() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(2)], StockChartTrendline.prototype, \"period\", void 0);\n\n  __decorate([Property('')], StockChartTrendline.prototype, \"name\", void 0);\n\n  __decorate([Property('Linear')], StockChartTrendline.prototype, \"type\", void 0);\n\n  __decorate([Property(2)], StockChartTrendline.prototype, \"polynomialOrder\", void 0);\n\n  __decorate([Property(0)], StockChartTrendline.prototype, \"forwardForecast\", void 0);\n\n  __decorate([Property(0)], StockChartTrendline.prototype, \"backwardForecast\", void 0);\n\n  __decorate([Complex({}, Animation)], StockChartTrendline.prototype, \"animation\", void 0);\n\n  __decorate([Property(true)], StockChartTrendline.prototype, \"enableTooltip\", void 0);\n\n  __decorate([Complex({}, MarkerSettings)], StockChartTrendline.prototype, \"marker\", void 0);\n\n  __decorate([Property(null)], StockChartTrendline.prototype, \"intercept\", void 0);\n\n  __decorate([Property('')], StockChartTrendline.prototype, \"fill\", void 0);\n\n  __decorate([Property('SeriesType')], StockChartTrendline.prototype, \"legendShape\", void 0);\n\n  __decorate([Property(1)], StockChartTrendline.prototype, \"width\", void 0);\n\n  return StockChartTrendline;\n}(ChildProperty);\n\nexport { StockChartTrendline };\n\nvar StockChartAnnotationSettings =\n/** @class */\nfunction (_super) {\n  __extends(StockChartAnnotationSettings, _super);\n\n  function StockChartAnnotationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('0')], StockChartAnnotationSettings.prototype, \"y\", void 0);\n\n  __decorate([Property('0')], StockChartAnnotationSettings.prototype, \"x\", void 0);\n\n  __decorate([Property(null)], StockChartAnnotationSettings.prototype, \"content\", void 0);\n\n  __decorate([Property('Chart')], StockChartAnnotationSettings.prototype, \"region\", void 0);\n\n  __decorate([Property('Center')], StockChartAnnotationSettings.prototype, \"horizontalAlignment\", void 0);\n\n  __decorate([Property('Pixel')], StockChartAnnotationSettings.prototype, \"coordinateUnits\", void 0);\n\n  __decorate([Property('Middle')], StockChartAnnotationSettings.prototype, \"verticalAlignment\", void 0);\n\n  __decorate([Property(null)], StockChartAnnotationSettings.prototype, \"yAxisName\", void 0);\n\n  __decorate([Property(null)], StockChartAnnotationSettings.prototype, \"description\", void 0);\n\n  __decorate([Property(null)], StockChartAnnotationSettings.prototype, \"xAxisName\", void 0);\n\n  return StockChartAnnotationSettings;\n}(ChildProperty);\n\nexport { StockChartAnnotationSettings };\n\nvar StockChartIndexes =\n/** @class */\nfunction (_super) {\n  __extends(StockChartIndexes, _super);\n\n  function StockChartIndexes() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(0)], StockChartIndexes.prototype, \"point\", void 0);\n\n  __decorate([Property(0)], StockChartIndexes.prototype, \"series\", void 0);\n\n  return StockChartIndexes;\n}(ChildProperty);\n\nexport { StockChartIndexes };\n/**\n * Configures the Stock events for stock chart.\n */\n\nvar StockEventsSettings =\n/** @class */\nfunction (_super) {\n  __extends(StockEventsSettings, _super);\n\n  function StockEventsSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('Circle')], StockEventsSettings.prototype, \"type\", void 0);\n\n  __decorate([Property('')], StockEventsSettings.prototype, \"text\", void 0);\n\n  __decorate([Property('')], StockEventsSettings.prototype, \"description\", void 0);\n\n  __decorate([Property()], StockEventsSettings.prototype, \"date\", void 0);\n\n  __decorate([Complex({\n    color: 'black',\n    width: 1\n  }, StockChartBorder)], StockEventsSettings.prototype, \"border\", void 0);\n\n  __decorate([Property('transparent')], StockEventsSettings.prototype, \"background\", void 0);\n\n  __decorate([Property(true)], StockEventsSettings.prototype, \"showOnSeries\", void 0);\n\n  __decorate([Property('close')], StockEventsSettings.prototype, \"placeAt\", void 0);\n\n  __decorate([Complex(Theme.stockEventFont, StockChartFont)], StockEventsSettings.prototype, \"textStyle\", void 0);\n\n  return StockEventsSettings;\n}(ChildProperty);\n\nexport { StockEventsSettings };","map":null,"metadata":{},"sourceType":"module"}