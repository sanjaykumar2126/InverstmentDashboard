{"ast":null,"code":"import PieChart from '../pie-chart/pie-chart';\nimport DonutSegment from './donut-segment';\nimport { INITIAL_ANIMATION_DURATION } from '../constants';\nimport { deepExtend, defined, setDefaultOptions, valueOrDefault } from '../../common';\nvar DONUT_SECTOR_ANIM_DELAY = 50;\n\nvar DonutChart = function (PieChart) {\n  function DonutChart() {\n    PieChart.apply(this, arguments);\n  }\n\n  if (PieChart) DonutChart.__proto__ = PieChart;\n  DonutChart.prototype = Object.create(PieChart && PieChart.prototype);\n  DonutChart.prototype.constructor = DonutChart;\n\n  DonutChart.prototype.addValue = function addValue(value, sector, fields) {\n    var segmentOptions = deepExtend({}, fields.series, {\n      index: fields.index\n    });\n    this.evalSegmentOptions(segmentOptions, value, fields);\n    this.createLegendItem(value, segmentOptions, fields);\n\n    if (!value || fields.visible === false) {\n      return;\n    }\n\n    var segment = new DonutSegment(value, sector, segmentOptions);\n    Object.assign(segment, fields);\n    this.append(segment);\n    this.points.push(segment);\n  };\n\n  DonutChart.prototype.reflow = function reflow(targetBox) {\n    var this$1 = this;\n    var options = this.options;\n    var box = targetBox.clone();\n    var space = 5;\n    var minWidth = Math.min(box.width(), box.height());\n    var halfMinWidth = minWidth / 2;\n    var defaultPadding = minWidth - minWidth * 0.85;\n    var series = options.series;\n    var seriesCount = series.length;\n    var padding = valueOrDefault(options.padding, defaultPadding);\n    padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;\n    var totalSize = halfMinWidth - padding;\n    var seriesWithoutSize = 0;\n    var holeSize;\n\n    for (var i = 0; i < seriesCount; i++) {\n      var currentSeries = series[i];\n\n      if (i === 0) {\n        if (defined(currentSeries.holeSize)) {\n          holeSize = currentSeries.holeSize;\n          totalSize -= currentSeries.holeSize;\n        }\n      }\n\n      if (defined(currentSeries.size)) {\n        totalSize -= currentSeries.size;\n      } else {\n        seriesWithoutSize++;\n      }\n\n      if (defined(currentSeries.margin) && i !== seriesCount - 1) {\n        totalSize -= currentSeries.margin;\n      }\n    }\n\n    if (!defined(holeSize)) {\n      var currentSize = (halfMinWidth - padding) / (seriesCount + 0.75);\n      holeSize = currentSize * 0.75;\n      totalSize -= holeSize;\n    }\n\n    var innerRadius = holeSize;\n    var margin = 0;\n    var size, radius;\n    this.seriesConfigs = [];\n\n    for (var i$1 = 0; i$1 < seriesCount; i$1++) {\n      var currentSeries$1 = series[i$1];\n      size = valueOrDefault(currentSeries$1.size, totalSize / seriesWithoutSize);\n      innerRadius += margin;\n      radius = innerRadius + size;\n      this$1.seriesConfigs.push({\n        innerRadius: innerRadius,\n        radius: radius\n      });\n      margin = currentSeries$1.margin || 0;\n      innerRadius = radius;\n    }\n\n    PieChart.prototype.reflow.call(this, targetBox);\n  };\n\n  DonutChart.prototype.animationDelay = function animationDelay(categoryIndex, seriesIndex, seriesCount) {\n    return categoryIndex * DONUT_SECTOR_ANIM_DELAY + INITIAL_ANIMATION_DURATION * (seriesIndex + 1) / (seriesCount + 1);\n  };\n\n  return DonutChart;\n}(PieChart);\n\nsetDefaultOptions(DonutChart, {\n  startAngle: 90,\n  connectors: {\n    width: 2,\n    color: \"#939393\",\n    padding: 8\n  }\n});\nexport default DonutChart;","map":null,"metadata":{},"sourceType":"module"}