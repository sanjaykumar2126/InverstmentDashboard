{"ast":null,"code":"import RadialScale from '../radial/radial-scale';\nimport { setDefaultOptions } from '../../common';\n\nvar ArcScale = function (RadialScale) {\n  function ArcScale() {\n    RadialScale.apply(this, arguments);\n  }\n\n  if (RadialScale) ArcScale.__proto__ = RadialScale;\n  ArcScale.prototype = Object.create(RadialScale && RadialScale.prototype);\n  ArcScale.prototype.constructor = ArcScale;\n\n  ArcScale.prototype.rangeSegments = function rangeSegments() {\n    var ref = this.options;\n    var min = ref.min;\n    var max = ref.max;\n    var rangePlaceholderColor = ref.rangePlaceholderColor;\n    var rangeLineCap = ref.rangeLineCap;\n    return [{\n      from: min,\n      to: max,\n      color: rangePlaceholderColor,\n      lineCap: rangeLineCap\n    }];\n  };\n\n  ArcScale.prototype.hasRanges = function hasRanges() {\n    return true;\n  };\n\n  ArcScale.prototype.placeholderRangeAngle = function placeholderRangeAngle(angle) {\n    var geometry = this.ranges.children[0].geometry();\n\n    if (this.options.reverse) {\n      geometry.setEndAngle(angle);\n    } else {\n      geometry.setStartAngle(angle);\n    }\n  };\n\n  ArcScale.prototype.addRange = function addRange(from, to, options) {\n    var reverse = this.options.reverse;\n    var startAngle = this.slotAngle(reverse ? to : from);\n    var endAngle = this.slotAngle(reverse ? from : to);\n    var range = this.createRange(startAngle, endAngle, this.getRangeRadius(), options);\n    this.ranges.append(range);\n    return range;\n  };\n\n  return ArcScale;\n}(RadialScale);\n\nsetDefaultOptions(ArcScale, {\n  min: 0,\n  max: 100,\n  majorTicks: {\n    visible: false\n  },\n  minorTicks: {\n    visible: false\n  },\n  labels: {\n    visible: false\n  },\n  startAngle: 0,\n  endAngle: 180,\n  rangeLineCap: 'round'\n});\nexport default ArcScale;","map":null,"metadata":{},"sourceType":"module"}