{"ast":null,"code":"import { createElement, isNullOrUndefined, Browser, remove } from '@syncfusion/ej2-base';\nimport { Toolbar } from '@syncfusion/ej2-navigations';\nimport { DateRangePicker } from '@syncfusion/ej2-calendars';\nimport { getElement } from '../../common/utils/helper';\nimport { Rect } from '@syncfusion/ej2-svg-base';\n/**\n * Period selector class\n */\n\nvar PeriodSelector =\n/** @class */\nfunction () {\n  //constructor for period selector\n  function PeriodSelector(control) {\n    this.control = {};\n    this.rootControl = control;\n  }\n  /**\n   * To set the control values\n   * @param control\n   */\n\n\n  PeriodSelector.prototype.setControlValues = function (control) {\n    if (control.getModuleName() === 'rangeNavigator') {\n      this.control.periods = this.rootControl.periodSelectorSettings.periods;\n      this.control.seriesXMax = control.chartSeries.xMax;\n      this.control.seriesXMin = control.chartSeries.xMin;\n      this.control.rangeSlider = control.rangeSlider;\n      this.control.rangeNavigatorControl = control;\n      this.control.endValue = control.endValue;\n      this.control.startValue = control.startValue;\n    } else {\n      this.control.periods = this.rootControl.periods;\n      this.control.endValue = this.control.seriesXMax = control.seriesXMax;\n      this.control.startValue = this.control.seriesXMin = control.seriesXMin;\n      this.control.rangeNavigatorControl = this.rootControl.rangeNavigator;\n\n      if (this.control.rangeNavigatorControl) {\n        this.control.rangeSlider = this.rootControl.rangeNavigator.rangeSlider;\n      }\n    }\n\n    this.control.element = control.element;\n    this.control.disableRangeSelector = control.disableRangeSelector;\n  };\n  /**\n   *  To initialize the period selector properties\n   */\n\n\n  PeriodSelector.prototype.appendSelector = function (options, x) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    this.renderSelectorElement(null, options, x);\n    this.renderSelector();\n  };\n  /**\n   * renderSelector div\n   * @param control\n   */\n\n\n  PeriodSelector.prototype.renderSelectorElement = function (control, options, x) {\n    //render border\n    this.periodSelectorSize = control ? this.periodSelectorSize : new Rect(x, this.rootControl.titleSize.height, options.width, options.height);\n    var thumbSize;\n    var element;\n\n    if (control) {\n      thumbSize = control.themeStyle.thumbWidth;\n      element = control.element;\n    } else {\n      thumbSize = options.thumbSize;\n      element = options.element;\n    }\n\n    if (getElement(element.id + '_Secondary_Element')) {\n      remove(getElement(element.id + '_Secondary_Element'));\n    }\n\n    this.periodSelectorDiv = createElement('div', {\n      id: element.id + '_Secondary_Element',\n      styles: 'width: ' + (this.periodSelectorSize.width - thumbSize) + 'px;height: ' + this.periodSelectorSize.height + 'px;top:' + this.periodSelectorSize.y + 'px;left:' + (this.periodSelectorSize.x + thumbSize / 2) + 'px; position: absolute'\n    });\n    element.appendChild(this.periodSelectorDiv);\n  };\n  /**\n   * renderSelector elements\n   */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  PeriodSelector.prototype.renderSelector = function () {\n    var _this = this;\n\n    this.setControlValues(this.rootControl);\n    var enableCustom = true;\n    var controlId = this.control.element.id;\n    var selectorElement = createElement('div', {\n      id: controlId + '_selector'\n    });\n    this.periodSelectorDiv.appendChild(selectorElement);\n    var buttons = this.control.periods;\n    var selector = this.updateCustomElement();\n    var buttonStyles = 'text-transform: none; text-overflow: unset';\n\n    for (var i = 0; i < buttons.length; i++) {\n      selector.push({\n        align: 'Left',\n        text: buttons[i].text\n      });\n    }\n\n    if (this.rootControl.getModuleName() === 'stockChart') {\n      enableCustom = this.rootControl.enableCustomRange;\n    }\n\n    var selctorArgs;\n\n    if (enableCustom) {\n      this.calendarId = controlId + '_calendar';\n      selector.push({\n        template: '<button id=' + this.calendarId + '></button>',\n        align: 'Right'\n      });\n      selctorArgs = {\n        selector: selector,\n        name: 'RangeSelector',\n        cancel: false,\n        enableCustomFormat: true,\n        content: 'Date Range'\n      };\n    }\n\n    if (this.rootControl.getModuleName() === 'stockChart') {\n      selector.push({\n        template: createElement('button', {\n          id: controlId + '_reset',\n          innerHTML: 'Reset',\n          styles: buttonStyles,\n          className: 'e-dropdown-btn e-btn'\n        }),\n        align: 'Right'\n      });\n\n      if (this.rootControl.exportType.indexOf('Print') > -1) {\n        selector.push({\n          template: createElement('button', {\n            id: controlId + '_print',\n            innerHTML: 'Print',\n            styles: buttonStyles,\n            className: 'e-dropdown-btn e-btn'\n          }),\n          align: 'Right'\n        });\n      }\n\n      if (this.rootControl.exportType.length) {\n        selector.push({\n          template: createElement('button', {\n            id: controlId + '_export',\n            innerHTML: 'Export',\n            styles: buttonStyles,\n            className: 'e-dropdown-btn e-btn'\n          }),\n          align: 'Right'\n        });\n      }\n    }\n\n    this.rootControl.trigger('selectorRender', selctorArgs);\n    this.toolbar = new Toolbar({\n      items: selctorArgs.selector,\n      height: this.periodSelectorSize.height,\n      clicked: function (args) {\n        _this.buttonClick(args, _this.control);\n      },\n      created: function () {\n        _this.nodes = _this.toolbar.element.querySelectorAll('.e-toolbar-left')[0];\n\n        if (isNullOrUndefined(_this.selectedIndex)) {\n          buttons.map(function (period, index) {\n            if (period.selected) {\n              _this.control.startValue = _this.changedRange(period.intervalType, _this.control.endValue, period.interval).getTime();\n              _this.selectedIndex = _this.nodes.childNodes.length - buttons.length + index;\n            }\n          });\n        }\n\n        _this.setSelectedStyle(_this.selectedIndex);\n      }\n    });\n    var isStringTemplate = 'isStringTemplate';\n    this.toolbar[isStringTemplate] = true;\n    this.toolbar.appendTo(selectorElement);\n    this.triggerChange = true;\n    this.datePicker = new DateRangePicker({\n      min: new Date(this.control.seriesXMin),\n      max: new Date(this.control.seriesXMax),\n      format: 'dd\\'\\/\\'MM\\'\\/\\'yyyy',\n      placeholder: 'Select a range',\n      showClearButton: false,\n      startDate: new Date(this.control.startValue),\n      endDate: new Date(this.control.endValue),\n      created: function (args) {\n        if (selctorArgs.enableCustomFormat) {\n          var datePickerElement = document.getElementsByClassName('e-date-range-wrapper')[0];\n          datePickerElement.style.display = 'none';\n          datePickerElement.insertAdjacentElement('afterend', createElement('div', {\n            id: 'customRange',\n            innerHTML: selctorArgs.content,\n            className: 'e-btn e-dropdown-btn',\n            styles: 'font-family: \"Segoe UI\"; font-size: 14px; font-weight: 500; text-transform: none '\n          }));\n          getElement('customRange').insertAdjacentElement('afterbegin', createElement('span', {\n            id: 'dateIcon',\n            className: 'e-input-group-icon e-range-icon e-btn-icon e-icons',\n            styles: 'font-size: 16px; min-height: 0px; margin: -3px 0 0 0; outline: none; min-width: 30px' // fix for date range icon alignment issue.\n\n          }));\n\n          document.getElementById('customRange').onclick = function () {\n            _this.datePicker.show(getElement('customRange'));\n          };\n        }\n      },\n      change: function (args) {\n        if (_this.triggerChange) {\n          if (_this.control.rangeSlider && args.event) {\n            _this.control.rangeSlider.performAnimation(args.startDate.getTime(), args.endDate.getTime(), _this.control.rangeNavigatorControl);\n          } else if (args.event) {\n            _this.rootControl.rangeChanged(args.startDate.getTime(), args.endDate.getTime());\n          }\n\n          _this.nodes = _this.toolbar.element.querySelectorAll('.e-toolbar-left')[0];\n\n          if (!_this.rootControl.resizeTo && _this.control.rangeSlider && _this.control.rangeSlider.isDrag) {\n            /**\n             * Issue: While disabling range navigator console error throws\n             * Fix:Check with rangeSlider present or not. Then checked with isDrag.\n             */\n            for (var i = 0, length_1 = _this.nodes.childNodes.length; i < length_1; i++) {\n              _this.nodes.childNodes[i].childNodes[0].classList.remove('e-active');\n\n              _this.nodes.childNodes[i].childNodes[0].classList.remove('e-active');\n            }\n          }\n        }\n      }\n    });\n    this.datePicker.appendTo('#' + this.calendarId);\n  };\n\n  PeriodSelector.prototype.updateCustomElement = function () {\n    var selector = [];\n    var controlId = this.rootControl.element.id;\n    var buttonStyles = 'text-transform: none; text-overflow: unset';\n\n    if (this.rootControl.getModuleName() === 'stockChart') {\n      if (this.rootControl.seriesType.length) {\n        selector.push({\n          template: createElement('button', {\n            id: controlId + '_seriesType',\n            innerHTML: 'Series',\n            styles: buttonStyles\n          }),\n          align: 'Left'\n        });\n      }\n\n      if (this.rootControl.indicatorType.length) {\n        selector.push({\n          template: createElement('button', {\n            id: controlId + '_indicatorType',\n            innerHTML: 'Indicators',\n            styles: buttonStyles\n          }),\n          align: 'Left'\n        });\n      }\n\n      if (this.rootControl.trendlineType.length) {\n        selector.push({\n          template: createElement('button', {\n            id: controlId + '_trendType',\n            innerHTML: 'Trendline',\n            styles: buttonStyles\n          }),\n          align: 'Left'\n        });\n      }\n    }\n\n    return selector;\n  };\n  /**\n   * To set and deselect the acrive style\n   * @param buttons\n   */\n\n\n  PeriodSelector.prototype.setSelectedStyle = function (selectedIndex) {\n    if (this.control.disableRangeSelector || this.rootControl.getModuleName() === 'stockChart') {\n      for (var i = 0, length_2 = this.nodes.childNodes.length; i < length_2; i++) {\n        this.nodes.childNodes[i].childNodes[0].classList.remove('e-active');\n        this.nodes.childNodes[i].childNodes[0].classList.remove('e-active');\n      }\n\n      this.nodes.childNodes[selectedIndex].childNodes[0].classList.add('e-flat');\n      this.nodes.childNodes[selectedIndex].childNodes[0].classList.add('e-active');\n    }\n  };\n  /**\n   * Button click handling\n   */\n\n\n  PeriodSelector.prototype.buttonClick = function (args, control) {\n    var _this = this;\n\n    var toolBarItems = this.toolbar.items;\n    var clickedEle = args.item;\n    var slider = this.control.rangeSlider;\n    var updatedStart;\n    var updatedEnd;\n    var buttons = this.control.periods;\n    var button = buttons.filter(function (btn) {\n      return btn.text === clickedEle.text;\n    });\n    buttons.map(function (period, index) {\n      if (period.text === args.item.text) {\n        _this.selectedIndex = _this.nodes.childNodes.length - buttons.length + index;\n      }\n    });\n\n    if (args.item.text !== '') {\n      this.setSelectedStyle(this.selectedIndex);\n    }\n\n    if (clickedEle.text.toLowerCase() === 'all') {\n      updatedStart = control.seriesXMin;\n      updatedEnd = control.seriesXMax;\n\n      if (slider) {\n        slider.performAnimation(updatedStart, updatedEnd, this.control.rangeNavigatorControl);\n      } else {\n        this.rootControl.rangeChanged(updatedStart, updatedEnd);\n      }\n    } else if (clickedEle.text.toLowerCase() === 'ytd') {\n      if (slider) {\n        updatedStart = new Date(new Date(slider.currentEnd).getFullYear().toString()).getTime();\n        updatedEnd = slider.currentEnd;\n        slider.performAnimation(updatedStart, updatedEnd, this.control.rangeNavigatorControl);\n      } else {\n        updatedStart = new Date(new Date(this.rootControl.currentEnd).getFullYear().toString()).getTime();\n        updatedEnd = this.rootControl.currentEnd;\n        this.rootControl.rangeChanged(updatedStart, updatedEnd);\n      }\n    } else if (clickedEle.text.toLowerCase() !== '') {\n      if (slider) {\n        updatedStart = this.changedRange(button[0].intervalType, slider.currentEnd, button[0].interval).getTime();\n        updatedEnd = slider.currentEnd;\n        slider.performAnimation(updatedStart, updatedEnd, this.control.rangeNavigatorControl);\n      } else {\n        updatedStart = this.changedRange(button[0].intervalType, this.rootControl.currentEnd, button[0].interval).getTime();\n        updatedEnd = this.rootControl.currentEnd;\n        this.rootControl.rangeChanged(updatedStart, updatedEnd);\n      }\n    }\n\n    if (this.rootControl.getModuleName() === 'stockChart') {\n      this.rootControl.zoomChange = false;\n    }\n\n    if (getElement(this.calendarId + '_popup') && !Browser.isDevice) {\n      var element = getElement(this.calendarId + '_popup');\n      element.querySelectorAll('.e-range-header')[0].style.display = 'none';\n    }\n  };\n  /**\n   *\n   * @param type updatedRange for selector\n   * @param end\n   * @param interval\n   */\n\n\n  PeriodSelector.prototype.changedRange = function (type, end, interval) {\n    var result = new Date(end);\n\n    switch (type) {\n      case 'Quarter':\n        result.setMonth(result.getMonth() - 3 * interval);\n        break;\n\n      case 'Months':\n        result.setMonth(result.getMonth() - interval);\n        break;\n\n      case 'Weeks':\n        result.setDate(result.getDate() - interval * 7);\n        break;\n\n      case 'Days':\n        result.setDate(result.getDate() - interval);\n        break;\n\n      case 'Hours':\n        result.setHours(result.getHours() - interval);\n        break;\n\n      case 'Minutes':\n        result.setMinutes(result.getMinutes() - interval);\n        break;\n\n      case 'Seconds':\n        result.setSeconds(result.getSeconds() - interval);\n        break;\n\n      default:\n        result.setFullYear(result.getFullYear() - interval);\n        break;\n    }\n\n    return result;\n  };\n\n  ;\n  /**\n   * Get module name\n   */\n\n  PeriodSelector.prototype.getModuleName = function () {\n    return 'PeriodSelector';\n  };\n  /**\n   * To destroy the period selector.\n   * @return {void}\n   * @private\n   */\n\n\n  PeriodSelector.prototype.destroy = function () {\n    /**\n     * destroy method\n     */\n  };\n\n  return PeriodSelector;\n}();\n\nexport { PeriodSelector };","map":null,"metadata":{},"sourceType":"module"}