{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `AtrIndicator` module is used to render ATR indicator.\n */\n\nvar AtrIndicator =\n/** @class */\nfunction (_super) {\n  __extends(AtrIndicator, _super);\n\n  function AtrIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Defines the predictions using Average True Range approach\n   * @private\n   */\n\n\n  AtrIndicator.prototype.initDataSource = function (indicator, chart) {\n    var validData = indicator.points;\n\n    if (validData.length > 0 && validData.length > indicator.period) {\n      this.calculateATRPoints(indicator, validData);\n    }\n  };\n  /**\n   *  To calculate Average True Range indicator points\n   * @private\n   */\n\n\n  AtrIndicator.prototype.calculateATRPoints = function (indicator, validData) {\n    var average = 0;\n    var highLow = 0;\n    var highClose = 0;\n    var lowClose = 0;\n    var trueRange = 0;\n    var points = [];\n    var temp = [];\n    var period = indicator.period;\n    var sum = 0;\n    var y = 'y';\n    var signalSeries = indicator.targetSeries[0];\n\n    for (var i = 0; i < validData.length; i++) {\n      /**\n       * Current High less the current Low\n       * Current High less the previous Close (absolute value)\n       * Current Low less the previous Close (absolute value)\n       */\n      highLow = Number(validData[i].high) - Number(validData[i].low);\n\n      if (i > 0) {\n        //\n        highClose = Math.abs(Number(validData[i].high) - Number(validData[i - 1].close));\n        lowClose = Math.abs(Number(validData[i].low) - Number(validData[i - 1].close));\n      }\n      /**\n       * To find the maximum of highLow, highClose, lowClose\n       */\n\n\n      trueRange = Math.max(highLow, highClose, lowClose);\n      sum = sum + trueRange;\n      /**\n       * Push the x and y values for the Average true range indicator\n       */\n\n      if (i >= period) {\n        average = (Number(temp[i - 1][y]) * (period - 1) + trueRange) / period;\n        points.push(this.getDataPoint(validData[i].x, average, validData[i], signalSeries, points.length));\n      } else {\n        average = sum / period;\n\n        if (i === period - 1) {\n          points.push(this.getDataPoint(validData[i].x, average, validData[i], signalSeries, points.length));\n        }\n      }\n\n      temp[i] = {\n        x: validData[i].x,\n        y: average\n      };\n    }\n\n    this.setSeriesRange(points, indicator);\n  };\n  /**\n   * To destroy the Average true range indicator.\n   * @return {void}\n   * @private\n   */\n\n\n  AtrIndicator.prototype.destroy = function (chart) {\n    /**\n     * Destroy the Average true range indicator\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  AtrIndicator.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the Indicator\n     */\n    return 'AtrIndicator';\n  };\n\n  return AtrIndicator;\n}(TechnicalAnalysis);\n\nexport { AtrIndicator };","map":null,"metadata":{},"sourceType":"module"}