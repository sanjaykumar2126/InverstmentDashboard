{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { LineBase } from '../series/line-base';\nimport { Series, Points } from '../series/chart-series';\nimport { RectOption, appendClipElement } from '../../common/utils/helper';\nimport { findClipRect } from '../../common/utils/helper';\nimport { Rect } from '@syncfusion/ej2-svg-base';\n/**\n * Technical Analysis module helps to predict the market trend\n */\n\nvar TechnicalAnalysis =\n/** @class */\nfunction (_super) {\n  __extends(TechnicalAnalysis, _super);\n\n  function TechnicalAnalysis() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Defines the collection of series, that are used to represent the given technical indicator\n   * @private\n   */\n\n\n  TechnicalAnalysis.prototype.initSeriesCollection = function (indicator, chart) {\n    indicator.targetSeries = [];\n    var signalLine = new Series(indicator, 'targetSeries', {}, true);\n    this.setSeriesProperties(signalLine, indicator, indicator.type, indicator.fill, indicator.width, chart);\n  };\n  /**\n   * Initializes the properties of the given series\n   * @private\n   */\n\n\n  TechnicalAnalysis.prototype.setSeriesProperties = function (series, indicator, name, fill, width, chart) {\n    series.name = name.length <= 4 ? name.toLocaleUpperCase() : name;\n    series.xName = 'x';\n    series.yName = 'y';\n    series.fill = fill || '#606eff';\n    series.dashArray = indicator.dashArray;\n    series.width = width;\n    series.xAxisName = indicator.xAxisName;\n    series.animation = indicator.animation;\n    series.yAxisName = indicator.yAxisName;\n    series.clipRectElement = indicator.clipRectElement;\n    series.points = [];\n    series.enableTooltip = true;\n    series.interior = series.fill;\n    series.category = 'Indicator';\n    series.index = indicator.index;\n    series.chart = chart;\n    series.xMin = Infinity;\n    series.xMax = -Infinity;\n    series.yMin = Infinity;\n    series.yMax = -Infinity;\n    series.xData = [];\n    series.yData = [];\n    series.marker.visible = false;\n    indicator.targetSeries.push(series);\n  };\n  /**\n   * Creates the elements of a technical indicator\n   * @private\n   */\n\n\n  TechnicalAnalysis.prototype.createIndicatorElements = function (chart, indicator, index) {\n    if (indicator.seriesName || indicator.dataSource) {\n      findClipRect(indicator.targetSeries[0]);\n    }\n\n    var clipRect = new Rect(0, 0, 0, 0);\n\n    if (indicator.seriesName || indicator.dataSource) {\n      clipRect = indicator.targetSeries[0].clipRect;\n    }\n\n    var options = new RectOption(chart.element.id + '_ChartIndicatorClipRect_' + index, 'transparent', {\n      width: 1,\n      color: 'Gray'\n    }, 1, {\n      x: 0,\n      y: 0,\n      width: clipRect.width,\n      height: clipRect.height\n    });\n    var clipRectElement = appendClipElement(chart.redraw, options, chart.renderer); //defines the clip rect element\n    //creates the group for an indicator\n\n    indicator.indicatorElement = chart.renderer.createGroup({\n      'id': chart.element.id + 'IndicatorGroup' + index,\n      'transform': 'translate(' + clipRect.x + ',' + clipRect.y + ')',\n      'clip-path': 'url(#' + chart.element.id + '_ChartIndicatorClipRect_' + index + ')'\n    });\n    indicator.indicatorElement.appendChild(clipRectElement); //Defines a group for each series in a technical indicator\n\n    for (var _i = 0, _a = indicator.targetSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      series.clipRectElement = clipRectElement;\n      var element = series.chart.renderer.createGroup({\n        'id': series.chart.element.id + '_Indicator_' + indicator.index + '_' + series.name + '_Group'\n      });\n      indicator.indicatorElement.appendChild(element);\n      series.seriesElement = element;\n    }\n\n    chart.indicatorElements.appendChild(indicator.indicatorElement);\n  };\n\n  TechnicalAnalysis.prototype.getDataPoint = function (x, y, sourcePoint, series, index, indicator) {\n    if (indicator === void 0) {\n      indicator = null;\n    }\n\n    var point = new Points();\n    point.x = x;\n    point.y = y;\n    point.xValue = sourcePoint.xValue;\n    point.color = series.fill;\n    point.index = index;\n    point.yValue = y;\n    point.visible = true;\n    series.xMin = Math.min(series.xMin, point.xValue);\n    series.yMin = Math.min(series.yMin, point.yValue);\n    series.xMax = Math.max(series.xMax, point.xValue);\n    series.yMax = Math.max(series.yMax, point.yValue);\n    series.xData.push(point.xValue);\n\n    if (indicator && indicator.type === 'Macd' && series.type === 'Column') {\n      if (point.y >= 0) {\n        point.color = indicator.macdPositiveColor;\n      } else {\n        point.color = indicator.macdNegativeColor;\n      }\n    }\n\n    return point;\n  };\n\n  TechnicalAnalysis.prototype.getRangePoint = function (x, high, low, sourcePoint, series, index, indicator) {\n    if (indicator === void 0) {\n      indicator = null;\n    }\n\n    var point = new Points();\n    point.x = x;\n    point.high = high;\n    point.low = low;\n    point.xValue = sourcePoint.xValue;\n    point.color = series.fill;\n    point.index = index;\n    point.visible = true;\n    series.xData.push(point.xValue);\n    return point;\n  };\n\n  TechnicalAnalysis.prototype.setSeriesRange = function (points, indicator, series) {\n    if (series === void 0) {\n      series = null;\n    }\n\n    if (!series) {\n      indicator.targetSeries[0].points = points;\n    } else {\n      series.points = points;\n    }\n  };\n\n  return TechnicalAnalysis;\n}(LineBase);\n\nexport { TechnicalAnalysis };","map":null,"metadata":{},"sourceType":"module"}