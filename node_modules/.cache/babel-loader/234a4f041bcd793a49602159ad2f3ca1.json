{"ast":null,"code":"import { geometry, drawing } from '@progress/kendo-drawing';\nimport { interpolateValue, setDefaultOptions } from '../../common';\nimport { ARROW_POINTER, LINEAR_SPEED, LINEAR } from '../constants';\n\nvar ArrowLinearPointerAnimation = function (superclass) {\n  function ArrowLinearPointerAnimation() {\n    superclass.apply(this, arguments);\n  }\n\n  if (superclass) ArrowLinearPointerAnimation.__proto__ = superclass;\n  ArrowLinearPointerAnimation.prototype = Object.create(superclass && superclass.prototype);\n  ArrowLinearPointerAnimation.prototype.constructor = ArrowLinearPointerAnimation;\n\n  ArrowLinearPointerAnimation.prototype.setup = function setup() {\n    var options = this.options;\n    var margin = options.margin;\n    var from = options.from;\n    var to = options.to;\n    var vertical = options.vertical;\n    var axis = vertical ? \"x1\" : \"y1\";\n\n    if (options.mirror === vertical) {\n      from[axis] -= margin;\n      to[axis] -= margin;\n    } else {\n      from[axis] += margin;\n      to[axis] += margin;\n    }\n\n    var fromScale = this.fromScale = new geometry.Point(from.x1, from.y1);\n    var toScale = this.toScale = new geometry.Point(to.x1, to.y1);\n\n    if (options.duration !== 0) {\n      options.duration = Math.max(fromScale.distanceTo(toScale) / options.duration * 1000, 1);\n    }\n  };\n\n  ArrowLinearPointerAnimation.prototype.step = function step(pos) {\n    var translateX = interpolateValue(this.fromScale.x, this.toScale.x, pos);\n    var translateY = interpolateValue(this.fromScale.y, this.toScale.y, pos);\n    this.element.transform(geometry.transform().translate(translateX, translateY));\n  };\n\n  return ArrowLinearPointerAnimation;\n}(drawing.Animation);\n\nsetDefaultOptions(ArrowLinearPointerAnimation, {\n  easing: LINEAR,\n  duration: LINEAR_SPEED\n});\ndrawing.AnimationFactory.current.register(ARROW_POINTER, ArrowLinearPointerAnimation);\nexport default ArrowLinearPointerAnimation;","map":null,"metadata":{},"sourceType":"module"}