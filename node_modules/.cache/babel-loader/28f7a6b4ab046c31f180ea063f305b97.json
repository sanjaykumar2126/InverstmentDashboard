{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * AccumulationChart legend\n */\n\n\nimport { extend, isNullOrUndefined, Animation } from '@syncfusion/ej2-base';\nimport { pointByIndex } from '../model/acc-base';\nimport { BaseLegend, LegendOptions } from '../../common/legend/legend';\nimport { Rect, measureText } from '@syncfusion/ej2-svg-base';\nimport { textTrim, getElement } from '../../common/utils/helper';\n/**\n * AccumulationLegend module used to render `Legend` for Accumulation chart.\n */\n\nvar AccumulationLegend =\n/** @class */\nfunction (_super) {\n  __extends(AccumulationLegend, _super);\n  /**\n   * Constructor for Accumulation Legend.\n   * @param chart\n   */\n\n\n  function AccumulationLegend(chart) {\n    var _this = _super.call(this, chart) || this;\n\n    _this.library = _this;\n    _this.titleRect = new Rect(0, chart.margin.top, 0, 0);\n    return _this;\n  }\n  /**\n   * Get the legend options.\n   * @return {void}\n   * @private\n   */\n\n\n  AccumulationLegend.prototype.getLegendOptions = function (chart, series) {\n    this.legendCollections = [];\n\n    for (var i = 0; i < 1; i++) {\n      var seriesType = series[i].type;\n\n      if (seriesType === 'Pie' || seriesType === 'Doughnut') {\n        seriesType = series[i].innerRadius !== '0' && series[i].innerRadius !== '0%' ? 'Doughnut' : 'Pie';\n      }\n\n      for (var _i = 0, _a = series[i].points; _i < _a.length; _i++) {\n        var point = _a[_i];\n\n        if (!isNullOrUndefined(point.x) && !isNullOrUndefined(point.y)) {\n          this.legendCollections.push(new LegendOptions(point.x.toString(), point.color, series[i].legendShape, point.visible, seriesType, null, null, point.index, series[i].index));\n        }\n      }\n    }\n  };\n  /**\n   * To find legend bounds for accumulation chart.\n   * @private\n   */\n\n\n  AccumulationLegend.prototype.getLegendBounds = function (availableSize, legendBounds, legend) {\n    var extraWidth = 0;\n    var extraHeight = 0;\n    var padding = legend.padding;\n\n    if (!this.isVertical) {\n      extraHeight = !legend.height ? availableSize.height / 100 * 5 : 0;\n    } else {\n      extraWidth = !legend.width ? availableSize.width / 100 * 5 : 0;\n    }\n\n    legendBounds.width += extraWidth;\n    legendBounds.height += extraHeight;\n    var shapePadding = legend.shapePadding;\n    var maximumWidth = 0;\n    var shapeWidth = legend.shapeWidth;\n    var rowWidth = 0;\n    var rowCount = 0;\n    var columnWidth = [];\n    var columnHeight = 0;\n    var legendWidth = 0;\n    this.maxItemHeight = Math.max(measureText('MeasureText', legend.textStyle).height, legend.shapeHeight);\n    var legendEventArgs;\n    var render = false;\n\n    for (var _i = 0, _a = this.legendCollections; _i < _a.length; _i++) {\n      var legendOption = _a[_i];\n      legendEventArgs = {\n        fill: legendOption.fill,\n        text: legendOption.text,\n        shape: legendOption.shape,\n        name: 'legendRender',\n        cancel: false\n      };\n      this.chart.trigger('legendRender', legendEventArgs);\n      legendOption.render = !legendEventArgs.cancel;\n      legendOption.text = legendEventArgs.text;\n      legendOption.fill = legendEventArgs.fill;\n      legendOption.shape = legendEventArgs.shape;\n      legendOption.textSize = measureText(legendOption.text, legend.textStyle);\n\n      if (legendOption.render && legendOption.text !== '') {\n        render = true;\n        legendWidth = shapeWidth + shapePadding + legendOption.textSize.width + padding;\n\n        if (this.isVertical) {\n          ++rowCount;\n          columnHeight = rowCount * (this.maxItemHeight + padding) + padding;\n\n          if (rowCount * (this.maxItemHeight + padding) + padding > legendBounds.height) {\n            columnHeight = Math.max(columnHeight, rowCount * (this.maxItemHeight + padding) + padding);\n            rowWidth = rowWidth + maximumWidth;\n            columnWidth.push(maximumWidth);\n            this.totalPages = Math.max(rowCount, this.totalPages || 1);\n            maximumWidth = 0;\n            rowCount = 1;\n          }\n\n          maximumWidth = Math.max(legendWidth, maximumWidth);\n        } else {\n          rowWidth = rowWidth + legendWidth;\n\n          if (legendBounds.width < padding + rowWidth) {\n            maximumWidth = Math.max(maximumWidth, rowWidth + padding - legendWidth);\n\n            if (rowCount === 0 && legendWidth !== rowWidth) {\n              rowCount = 1;\n            }\n\n            rowWidth = legendWidth;\n            rowCount++;\n            columnHeight = rowCount * (this.maxItemHeight + padding) + padding;\n          }\n        }\n      }\n    }\n\n    if (this.isVertical) {\n      rowWidth = rowWidth + maximumWidth;\n      this.isPaging = legendBounds.width < rowWidth + padding;\n      columnHeight = Math.max(columnHeight, (this.totalPages || 1) * (this.maxItemHeight + padding) + padding);\n      this.isPaging = this.isPaging && this.totalPages > 1;\n\n      if (columnWidth[columnWidth.length - 1] !== maximumWidth) {\n        columnWidth.push(maximumWidth);\n      }\n    } else {\n      this.isPaging = legendBounds.height < columnHeight;\n      this.totalPages = this.totalRowCount = rowCount;\n      columnHeight = Math.max(columnHeight, this.maxItemHeight + padding + padding);\n    }\n\n    this.maxColumns = 0; // initialization for max columns\n\n    var width = this.isVertical ? this.getMaxColumn(columnWidth, legendBounds.width, padding, rowWidth + padding) : Math.max(rowWidth + padding, maximumWidth);\n\n    if (render) {\n      // if any legends not skipped in event check\n      this.setBounds(width, columnHeight, legend, legendBounds);\n    } else {\n      this.setBounds(0, 0, legend, legendBounds);\n    }\n  };\n  /**\n   * To find maximum column size for legend\n   */\n\n\n  AccumulationLegend.prototype.getMaxColumn = function (columns, width, padding, rowWidth) {\n    var maxPageColumn = padding;\n    this.maxColumnWidth = Math.max.apply(null, columns);\n\n    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n      var column = columns_1[_i];\n      maxPageColumn += this.maxColumnWidth;\n      this.maxColumns++;\n\n      if (maxPageColumn + padding > width) {\n        maxPageColumn -= this.maxColumnWidth;\n        this.maxColumns--;\n        break;\n      }\n    }\n\n    this.isPaging = maxPageColumn < rowWidth && this.totalPages > 1;\n\n    if (maxPageColumn === padding) {\n      maxPageColumn = width;\n    }\n\n    this.maxColumns = Math.max(1, this.maxColumns);\n    this.maxWidth = maxPageColumn;\n    return maxPageColumn;\n  };\n  /**\n   * To find available width from legend x position.\n   */\n\n\n  AccumulationLegend.prototype.getAvailWidth = function (tx, width, legendX) {\n    if (this.isVertical) {\n      width = this.maxWidth;\n    }\n\n    return width - (this.legend.padding * 2 + this.legend.shapeWidth + this.legend.shapePadding);\n  };\n  /**\n   * To find legend rendering locations from legend options.\n   * @private\n   */\n\n\n  AccumulationLegend.prototype.getRenderPoint = function (legendOption, start, textPadding, prevLegend, rect, count, firstLegend) {\n    var padding = this.legend.padding;\n\n    if (this.isVertical) {\n      if (count === firstLegend || prevLegend.location.y + this.maxItemHeight * 1.5 + padding * 2 > rect.y + rect.height) {\n        legendOption.location.x = prevLegend.location.x + (count === firstLegend ? 0 : this.maxColumnWidth);\n        legendOption.location.y = start.y;\n        this.pageXCollections.push(legendOption.location.x - this.legend.shapeWidth / 2 - padding);\n        this.totalPages++;\n      } else {\n        legendOption.location.x = prevLegend.location.x;\n        legendOption.location.y = prevLegend.location.y + this.maxItemHeight + padding;\n      }\n    } else {\n      var previousBound = prevLegend.location.x + textPadding + prevLegend.textSize.width;\n\n      if (previousBound + (legendOption.textSize.width + textPadding) > rect.x + rect.width + this.legend.shapeWidth / 2) {\n        legendOption.location.y = count === firstLegend ? prevLegend.location.y : prevLegend.location.y + this.maxItemHeight + padding;\n        legendOption.location.x = start.x;\n      } else {\n        legendOption.location.y = prevLegend.location.y;\n        legendOption.location.x = count === firstLegend ? prevLegend.location.x : previousBound;\n      }\n\n      this.totalPages = this.totalRowCount;\n    }\n\n    var availablewidth = this.getAvailWidth(legendOption.location.x, this.legendBounds.width, this.legendBounds.x);\n    legendOption.text = textTrim(+availablewidth.toFixed(4), legendOption.text, this.legend.textStyle);\n  };\n  /**\n   * finding the smart legend place according to positions.\n   * @return {void}\n   * @private\n   */\n\n\n  AccumulationLegend.prototype.getSmartLegendLocation = function (labelBound, legendBound, margin) {\n    var space;\n\n    switch (this.position) {\n      case 'Left':\n        space = (labelBound.x - legendBound.width - margin.left) / 2;\n        legendBound.x = labelBound.x - legendBound.width < margin.left ? legendBound.x : labelBound.x - legendBound.width - space;\n        break;\n\n      case 'Right':\n        space = (this.chart.availableSize.width - margin.right - (labelBound.x + labelBound.width + legendBound.width)) / 2;\n        legendBound.x = labelBound.x + labelBound.width + legendBound.width > this.chart.availableSize.width - margin.right ? legendBound.x : labelBound.x + labelBound.width + space;\n        break;\n\n      case 'Top':\n        this.getTitleRect(this.chart);\n        space = (labelBound.y - legendBound.height - (this.titleRect.y + this.titleRect.height)) / 2;\n        legendBound.y = labelBound.y - legendBound.height < margin.top ? legendBound.y : labelBound.y - legendBound.height - space;\n        break;\n\n      case 'Bottom':\n        space = (this.chart.availableSize.height - margin.bottom - (labelBound.y + labelBound.height + legendBound.height)) / 2;\n        legendBound.y = labelBound.y + labelBound.height + legendBound.height > this.chart.availableSize.height - margin.bottom ? legendBound.y : labelBound.y + labelBound.height + space;\n        break;\n    }\n  };\n  /**\n   * To get title rect.\n   */\n\n\n  AccumulationLegend.prototype.getTitleRect = function (accumulation) {\n    if (!accumulation.title) {\n      return null;\n    }\n\n    var titleSize = measureText(accumulation.title, accumulation.titleStyle);\n    this.titleRect = new Rect(accumulation.availableSize.width / 2 - titleSize.width / 2, accumulation.margin.top, titleSize.width, titleSize.height);\n  };\n  /**\n   * To get legend by index\n   */\n\n\n  AccumulationLegend.prototype.legendByIndex = function (index, legendCollections) {\n    for (var _i = 0, legendCollections_1 = legendCollections; _i < legendCollections_1.length; _i++) {\n      var legend = legendCollections_1[_i];\n\n      if (legend.pointIndex === index) {\n        return legend;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * To show or hide the legend on clicking the legend.\n   * @return {void}\n   */\n\n\n  AccumulationLegend.prototype.click = function (event) {\n    var targetId = event.target.id;\n    var chart = this.chart;\n    var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_', this.legendID + '_shape_marker_'];\n    var selectedDataIndexes = [];\n\n    if (this.chart.accumulationSelectionModule) {\n      selectedDataIndexes = extend([], this.chart.accumulationSelectionModule.selectedDataIndexes, null, true);\n    }\n\n    this.chart.animateSeries = false;\n\n    for (var _i = 0, legendItemsId_1 = legendItemsId; _i < legendItemsId_1.length; _i++) {\n      var id = legendItemsId_1[_i];\n\n      if (targetId.indexOf(id) > -1) {\n        var pointIndex = parseInt(targetId.split(id)[1], 10);\n\n        if (this.chart.legendSettings.toggleVisibility && !isNaN(pointIndex)) {\n          var currentSeries = this.chart.visibleSeries[0];\n          var point = pointByIndex(pointIndex, currentSeries.points);\n          var legendOption = this.legendByIndex(pointIndex, this.legendCollections);\n          point.visible = !point.visible;\n          legendOption.visible = point.visible;\n          currentSeries.sumOfPoints += point.visible ? point.y : -point.y;\n          chart.redraw = chart.enableAnimation;\n          this.sliceVisibility(pointIndex, point.visible);\n          chart.removeSvg();\n          this.chart.refreshPoints(currentSeries.points);\n          this.chart.renderElements();\n        } else if (this.chart.accumulationSelectionModule && !isNaN(pointIndex)) {\n          this.chart.accumulationSelectionModule.legendSelection(this.chart, 0, pointIndex);\n        }\n      }\n    }\n\n    if (targetId.indexOf(this.legendID + '_pageup') > -1) {\n      this.changePage(event, true);\n    } else if (targetId.indexOf(this.legendID + '_pagedown') > -1) {\n      this.changePage(event, false);\n    }\n\n    chart.redraw = false;\n  };\n  /**\n   * To translate the point elements by index and position\n   */\n\n\n  AccumulationLegend.prototype.sliceVisibility = function (index, isVisible) {\n    var sliceId = this.chart.element.id + '_Series_0_Point_';\n\n    if (this.chart.visibleSeries[0].dataLabel.visible) {\n      sliceId = this.chart.element.id + '_datalabel_Series_0_';\n      this.sliceAnimate(getElement(sliceId + 'g_' + index), isVisible);\n    }\n  };\n  /**\n   * Slice animation\n   * @param element\n   * @param name\n   * @param isVisible\n   */\n\n\n  AccumulationLegend.prototype.sliceAnimate = function (element, isVisible) {\n    if (!element) {\n      return null;\n    }\n\n    new Animation({}).animate(element, {\n      duration: 300,\n      delay: 0,\n      name: isVisible ? 'FadeIn' : 'FadeOut',\n      end: function (args) {\n        args.element.style.visibility = isVisible ? 'visible' : 'hidden';\n      }\n    });\n  };\n  /**\n   * Get module name\n   */\n\n\n  AccumulationLegend.prototype.getModuleName = function () {\n    return 'AccumulationLegend';\n  };\n  /**\n   * To destroy the Legend.\n   * @return {void}\n   * @private\n   */\n\n\n  AccumulationLegend.prototype.destroy = function (chart) {\n    /**\n     * Destroy method calling here\n     */\n  };\n\n  return AccumulationLegend;\n}(BaseLegend);\n\nexport { AccumulationLegend };","map":null,"metadata":{},"sourceType":"module"}