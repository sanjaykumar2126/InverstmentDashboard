{"ast":null,"code":"import { ChartElement } from '../../core';\nimport { X, Y } from '../../common/constants';\nimport { setDefaultOptions } from '../../common';\nimport { forEach, forEachReverse } from './utils';\n\nvar ClusterLayout = function (ChartElement) {\n  function ClusterLayout(options) {\n    ChartElement.call(this, options);\n    this.forEach = options.rtl ? forEachReverse : forEach;\n  }\n\n  if (ChartElement) ClusterLayout.__proto__ = ChartElement;\n  ClusterLayout.prototype = Object.create(ChartElement && ChartElement.prototype);\n  ClusterLayout.prototype.constructor = ClusterLayout;\n\n  ClusterLayout.prototype.reflow = function reflow(box) {\n    var ref = this.options;\n    var vertical = ref.vertical;\n    var gap = ref.gap;\n    var spacing = ref.spacing;\n    var children = this.children;\n    var count = children.length;\n    var axis = vertical ? Y : X;\n    var slots = count + gap + spacing * (count - 1);\n    var slotSize = (vertical ? box.height() : box.width()) / slots;\n    var position = box[axis + 1] + slotSize * (gap / 2);\n    this.forEach(children, function (child, idx) {\n      var childBox = (child.box || box).clone();\n      childBox[axis + 1] = position;\n      childBox[axis + 2] = position + slotSize;\n      child.reflow(childBox);\n\n      if (idx < count - 1) {\n        position += slotSize * spacing;\n      }\n\n      position += slotSize;\n    });\n  };\n\n  return ClusterLayout;\n}(ChartElement);\n\nsetDefaultOptions(ClusterLayout, {\n  vertical: false,\n  gap: 0,\n  spacing: 0\n});\nexport default ClusterLayout;","map":null,"metadata":{},"sourceType":"module"}