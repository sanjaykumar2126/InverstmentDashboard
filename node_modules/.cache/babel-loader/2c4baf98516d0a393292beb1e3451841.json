{"ast":null,"code":"/**\n * Numeric Range.\n * @private\n */\nvar DoubleRange =\n/** @class */\nfunction () {\n  function DoubleRange(start, end) {\n    /*\n      if (!isNaN(start) && !isNaN(end)) {\n       this.mIsEmpty = true;\n      } else {\n          this.mIsEmpty = false;\n      }*/\n    if (start < end) {\n      this.mStart = start;\n      this.mEnd = end;\n    } else {\n      this.mStart = end;\n      this.mEnd = start;\n    }\n  }\n\n  Object.defineProperty(DoubleRange.prototype, \"start\", {\n    //private mIsEmpty: boolean;\n\n    /** @private */\n    get: function () {\n      return this.mStart;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DoubleRange.prototype, \"end\", {\n    /** @private */\n    get: function () {\n      return this.mEnd;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DoubleRange.prototype, \"delta\", {\n    /*\n      get isEmpty(): boolean {\n         return this.mIsEmpty;\n     }*/\n\n    /** @private */\n    get: function () {\n      return this.mEnd - this.mStart;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DoubleRange.prototype, \"median\", {\n    /** @private */\n    get: function () {\n      return this.mStart + (this.mEnd - this.mStart) / 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DoubleRange;\n}();\n\nexport { DoubleRange };","map":null,"metadata":{},"sourceType":"module"}