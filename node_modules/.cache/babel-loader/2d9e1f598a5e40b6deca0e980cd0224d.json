{"ast":null,"code":"/**\n * Defines the common behavior of funnel and pyramid series\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Rect, Size } from '@syncfusion/ej2-svg-base';\nimport { stringToNumber } from '../../common/utils/helper';\nimport { AccumulationBase } from './accumulation-base';\n/**\n * TriangularBase is used to calculate base functions for funnel/pyramid series.\n */\n\nvar TriangularBase =\n/** @class */\nfunction (_super) {\n  __extends(TriangularBase, _super);\n\n  function TriangularBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Initializes the properties of funnel/pyramid series\n   * @private\n   */\n\n\n  TriangularBase.prototype.initProperties = function (chart, series) {\n    var actualChartArea = chart.initialClipRect;\n    series.triangleSize = new Size(stringToNumber(series.width, actualChartArea.width), stringToNumber(series.height, actualChartArea.height));\n    series.neckSize = new Size(stringToNumber(series.neckWidth, actualChartArea.width), stringToNumber(series.neckHeight, actualChartArea.height));\n    this.defaultLabelBound(series, series.dataLabel.visible, series.dataLabel.position, chart);\n\n    if (series.explodeOffset === '30%') {\n      series.explodeOffset = '25px';\n    }\n\n    chart.explodeDistance = stringToNumber(series.explodeOffset, actualChartArea.width);\n    var points = series.points;\n    this.initializeSizeRatio(points, series);\n  };\n  /**\n   * Initializes the size of the pyramid/funnel segments\n   * @private\n   */\n\n\n  TriangularBase.prototype.initializeSizeRatio = function (points, series, reverse) {\n    if (reverse === void 0) {\n      reverse = false;\n    }\n\n    var sumOfPoints = series.sumOfPoints; //Limiting the ratio within the range of 0 to 1\n\n    var gapRatio = Math.min(Math.max(series.gapRatio, 0), 1); //% equivalence of a value 1\n\n    var coEff = 1 / (sumOfPoints * (1 + gapRatio / (1 - gapRatio)));\n    var spacing = gapRatio / (points.length - 1);\n    var y = 0; //starting from bottom\n\n    for (var i = points.length - 1; i >= 0; i--) {\n      var index = reverse ? points.length - 1 - i : i;\n\n      if (points[index].visible) {\n        var height = coEff * points[index].y;\n        points[index].yRatio = y;\n        points[index].heightRatio = height;\n        y += height + spacing;\n      }\n    }\n  };\n  /**\n   * Marks the label location from the set of points that forms a pyramid/funnel segment\n   * @private\n   */\n\n\n  TriangularBase.prototype.setLabelLocation = function (series, point, points) {\n    var last = points.length - 1;\n    var bottom = series.type === 'Funnel' ? points.length - 2 : points.length - 1;\n    var x = (points[0].x + points[bottom].x) / 2;\n    var right = (points[1].x + points[bottom - 1].x) / 2;\n    point.region = new Rect(x, points[0].y, right - x, points[bottom].y - points[0].y);\n    point.symbolLocation = {\n      x: point.region.x + point.region.width / 2,\n      y: point.region.y + point.region.height / 2\n    };\n    point.labelOffset = {\n      x: point.symbolLocation.x - (points[0].x + points[last].x) / 2,\n      y: point.symbolLocation.y - (points[0].y + points[last].y) / 2\n    };\n  };\n  /**\n   * Finds the path to connect the list of points\n   * @private\n   */\n\n\n  TriangularBase.prototype.findPath = function (locations) {\n    var path = 'M';\n\n    for (var i = 0; i < locations.length; i++) {\n      path += locations[i].x + ' ' + locations[i].y;\n\n      if (i !== locations.length - 1) {\n        path += ' L';\n      }\n    }\n\n    return path;\n  };\n  /**\n   * To calculate data-label bounds\n   * @private\n   */\n\n\n  TriangularBase.prototype.defaultLabelBound = function (series, visible, position, chart) {\n    var x = (chart.initialClipRect.width - series.triangleSize.width) / 2;\n    var y = (chart.initialClipRect.height - series.triangleSize.height) / 2;\n    var accumulationBound = new Rect(x, y, series.triangleSize.width, series.triangleSize.height);\n    series.labelBound = new Rect(accumulationBound.x, accumulationBound.y, accumulationBound.width + accumulationBound.x, accumulationBound.height + accumulationBound.y);\n    series.accumulationBound = accumulationBound;\n\n    if (visible && position === 'Outside') {\n      series.labelBound = new Rect(Infinity, Infinity, -Infinity, -Infinity);\n    }\n  };\n\n  return TriangularBase;\n}(AccumulationBase);\n\nexport { TriangularBase };","map":null,"metadata":{},"sourceType":"module"}