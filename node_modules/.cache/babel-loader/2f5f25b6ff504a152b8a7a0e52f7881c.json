{"ast":null,"code":"import { RectOption, CircleOption } from '../utils/helper';\nimport { PathOption, Rect } from '@syncfusion/ej2-svg-base';\n/**\n * Create scrollbar svg.\n * @return {void}\n */\n\nexport function createScrollSvg(scrollbar, renderer) {\n  var rect = scrollbar.axis.rect;\n  var isHorizontalAxis = scrollbar.axis.orientation === 'Horizontal';\n  scrollbar.svgObject = renderer.createSvg({\n    id: scrollbar.component.element.id + '_' + 'scrollBar_svg' + scrollbar.axis.name,\n    width: scrollbar.isVertical ? scrollbar.height : scrollbar.width,\n    height: scrollbar.isVertical ? scrollbar.width : scrollbar.height,\n    style: 'position: absolute;top: ' + ((scrollbar.axis.opposedPosition && isHorizontalAxis ? -16 : 0) + rect.y) + 'px;left: ' + ((scrollbar.axis.opposedPosition && !isHorizontalAxis ? 16 : 0) + rect.x - (scrollbar.isVertical ? scrollbar.height : 0)) + 'px;cursor:auto;'\n  });\n  scrollbar.elements.push(scrollbar.svgObject);\n}\n/**\n * Scrollbar elements renderer\n */\n\nvar ScrollElements =\n/** @class */\nfunction () {\n  /**\n   * Constructor for scroll elements\n   * @param scrollObj\n   */\n  function ScrollElements(chart) {\n    this.chartId = chart.element.id + '_';\n  }\n  /**\n   * Render scrollbar elements.\n   * @return {void}\n   * @private\n   */\n\n\n  ScrollElements.prototype.renderElements = function (scroll, renderer) {\n    var scrollGroup = renderer.createGroup({\n      id: this.chartId + 'scrollBar_' + scroll.axis.name,\n      transform: 'translate(' + (scroll.isVertical && scroll.axis.isInversed ? scroll.height : scroll.axis.isInversed ? scroll.width : '0') + ',' + (scroll.isVertical && scroll.axis.isInversed ? '0' : scroll.axis.isInversed ? scroll.height : scroll.isVertical ? scroll.width : '0') + ') rotate(' + (scroll.isVertical && scroll.axis.isInversed ? '90' : scroll.isVertical ? '270' : scroll.axis.isInversed ? '180' : '0') + ')'\n    });\n    var backRectGroup = renderer.createGroup({\n      id: this.chartId + 'scrollBar_backRect_' + scroll.axis.name\n    });\n    var thumbGroup = renderer.createGroup({\n      id: this.chartId + 'scrollBar_thumb_' + scroll.axis.name,\n      transform: 'translate(0,0)'\n    });\n    this.backRect(scroll, renderer, backRectGroup);\n    this.thumb(scroll, renderer, thumbGroup);\n    this.renderCircle(scroll, renderer, thumbGroup);\n    this.arrows(scroll, renderer, thumbGroup);\n    this.thumbGrip(scroll, renderer, thumbGroup);\n    scrollGroup.appendChild(backRectGroup);\n    scrollGroup.appendChild(thumbGroup);\n    return scrollGroup;\n  };\n  /**\n   * Method to render back rectangle of scrollbar\n   * @param scroll\n   */\n\n\n  ScrollElements.prototype.backRect = function (scroll, renderer, parent) {\n    var style = scroll.scrollbarThemeStyle;\n    var backRectEle = renderer.drawRectangle(new RectOption(this.chartId + 'scrollBarBackRect_' + scroll.axis.name, style.backRect, {\n      width: 1,\n      color: style.backRect\n    }, 1, new Rect(0, 0, scroll.width, scroll.height), 0, 0));\n    parent.appendChild(backRectEle);\n  };\n  /**\n   * Method to render arrows\n   * @param scroll\n   */\n\n\n  ScrollElements.prototype.arrows = function (scroll, renderer, parent) {\n    var style = scroll.scrollbarThemeStyle;\n    var option = new PathOption(this.chartId + 'scrollBar_leftArrow_' + scroll.axis.name, style.arrow, 1, style.arrow, 1, '', '');\n    this.leftArrowEle = renderer.drawPath(option);\n    option.id = this.chartId + 'scrollBar_rightArrow_' + scroll.axis.name;\n    this.rightArrowEle = renderer.drawPath(option);\n    this.setArrowDirection(this.thumbRectX, this.thumbRectWidth, scroll.height);\n    parent.appendChild(this.leftArrowEle);\n    parent.appendChild(this.rightArrowEle);\n  };\n  /**\n   * Methods to set the arrow width\n   * @param thumbRectX\n   * @param thumbRectWidth\n   * @param height\n   */\n\n\n  ScrollElements.prototype.setArrowDirection = function (thumbRectX, thumbRectWidth, height) {\n    var circleRadius = 8;\n    var leftDirection = 'M ' + (thumbRectX - circleRadius / 2 + 1) + ' ' + height / 2 + ' ' + 'L ' + (thumbRectX - circleRadius / 2 + 6) + ' ' + 11 + ' ' + 'L ' + (thumbRectX - circleRadius / 2 + 6) + ' ' + 5 + ' Z';\n    var rightDirection = 'M ' + (thumbRectX + thumbRectWidth + circleRadius / 2 - 0.5) + ' ' + height / 2 + ' ' + 'L ' + (thumbRectX + thumbRectWidth + circleRadius / 2 - 6) + ' ' + 11.5 + ' ' + 'L ' + (thumbRectX + thumbRectWidth + circleRadius / 2 - 6) + ' ' + 4.5 + ' Z';\n    this.leftArrowEle.setAttribute('d', leftDirection);\n    this.rightArrowEle.setAttribute('d', rightDirection);\n  };\n  /**\n   * Method to render thumb\n   * @param scroll\n   * @param renderer\n   * @param parent\n   */\n\n\n  ScrollElements.prototype.thumb = function (scroll, renderer, parent) {\n    scroll.startX = this.thumbRectX;\n    var style = scroll.scrollbarThemeStyle;\n    this.slider = renderer.drawRectangle(new RectOption(this.chartId + 'scrollBarThumb_' + scroll.axis.name, style.thumb, {\n      width: 1,\n      color: ''\n    }, 1, new Rect(this.thumbRectX, 0, this.thumbRectWidth, scroll.height)));\n    parent.appendChild(this.slider);\n  };\n  /**\n   *  Method to render circles\n   * @param scroll\n   * @param renderer\n   * @param parent\n   */\n\n\n  ScrollElements.prototype.renderCircle = function (scroll, renderer, parent) {\n    var style = scroll.scrollbarThemeStyle;\n    var option = new CircleOption(this.chartId + 'scrollBar_leftCircle_' + scroll.axis.name, style.circle, {\n      width: 1,\n      color: style.circle\n    }, 1, this.thumbRectX, scroll.height / 2, 8);\n    var scrollShadowEle = '<filter x=\"-25.0%\" y=\"-20.0%\" width=\"150.0%\" height=\"150.0%\" filterUnits=\"objectBoundingBox\"' + 'id=\"scrollbar_shadow\"><feOffset dx=\"0\" dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"></feOffset>' + '<feGaussianBlur stdDeviation=\"1.5\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"></feGaussianBlur>' + '<feComposite in=\"shadowBlurOuter1\" in2=\"SourceAlpha\" operator=\"out\" result=\"shadowBlurOuter1\"></feComposite>' + '<feColorMatrix values=\"0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.16 0\" type=\"matrix\" in=\"shadowBlurOuter1\">' + '</feColorMatrix></filter>';\n    var defElement = renderer.createDefs();\n    defElement.innerHTML = scrollShadowEle;\n    var shadowGroup = renderer.createGroup({\n      id: this.chartId + scroll.axis.name + '_thumb_shadow'\n    });\n    shadowGroup.innerHTML = '<use fill=\"black\" fill-opacity=\"1\" filter=\"url(#scrollbar_shadow)\" xlink:href=\"#' + this.chartId + 'scrollBar_leftCircle_' + scroll.axis.name + '\"></use><use fill=\"black\" fill-opacity=\"1\" filter=\"url(#scrollbar_shadow)\" xlink:href=\"#' + this.chartId + 'scrollBar_rightCircle_' + scroll.axis.name + '\"></use>';\n    this.leftCircleEle = renderer.drawCircle(option);\n    option.id = this.chartId + 'scrollBar_rightCircle_' + scroll.axis.name;\n    option.cx = this.thumbRectX + this.thumbRectWidth;\n    this.rightCircleEle = renderer.drawCircle(option);\n    parent.appendChild(defElement);\n    parent.appendChild(this.leftCircleEle);\n    parent.appendChild(this.rightCircleEle);\n    parent.appendChild(shadowGroup);\n  };\n  /**\n   * Method to render grip elements\n   * @param scroll\n   * @param renderer\n   * @param parent\n   */\n\n\n  ScrollElements.prototype.thumbGrip = function (scroll, renderer, parent) {\n    var sidePadding = 0;\n    var topPadding = 0;\n    var gripWidth = 14;\n    var gripCircleDiameter = 2;\n    var padding = gripWidth / 2 - gripCircleDiameter;\n    var style = scroll.scrollbarThemeStyle;\n    var option = new CircleOption(this.chartId + 'scrollBar_gripCircle0' + '_' + scroll.axis.name, style.grip, {\n      width: 1,\n      color: style.grip\n    }, 1, 0, 0, 1);\n    this.gripCircle = renderer.createGroup({\n      id: this.chartId + 'scrollBar_gripCircle_' + scroll.axis.name,\n      transform: 'translate(' + (this.thumbRectX + this.thumbRectWidth / 2 + (scroll.isVertical ? 1 : -1) * padding) + ',' + (scroll.isVertical ? '10' : '5') + ') rotate(' + (scroll.isVertical ? '180' : '0') + ')'\n    });\n\n    for (var i = 1; i <= 6; i++) {\n      option.id = this.chartId + 'scrollBar_gripCircle' + i + '_' + scroll.axis.name;\n      option.cx = sidePadding;\n      option.cy = topPadding;\n      this.gripCircle.appendChild(renderer.drawCircle(option));\n      sidePadding = i === 3 ? 0 : sidePadding + 5;\n      topPadding = i >= 3 ? 5 : 0;\n    }\n\n    parent.appendChild(this.gripCircle);\n  };\n\n  return ScrollElements;\n}();\n\nexport { ScrollElements };","map":null,"metadata":{},"sourceType":"module"}