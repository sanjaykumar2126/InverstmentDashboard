{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { firstToLowerCase } from '../../common/utils/helper';\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `TmaIndicator` module is used to render TMA indicator.\n */\n\nvar TmaIndicator =\n/** @class */\nfunction (_super) {\n  __extends(TmaIndicator, _super);\n\n  function TmaIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Defines the predictions based on TMA approach\n   * @private\n   */\n\n\n  TmaIndicator.prototype.initDataSource = function (indicator, chart) {\n    var tmaPoints = [];\n    var field = firstToLowerCase(indicator.field);\n    var xField = 'x';\n    var signalSeries = indicator.targetSeries[0]; //prepare data\n\n    var validData = indicator.points;\n\n    if (validData && validData.length && validData.length >= indicator.period) {\n      var signalSeries_1 = indicator.targetSeries[0]; //prepare data\n\n      var validData_1 = indicator.points;\n\n      if (validData_1.length && validData_1.length >= indicator.period) {\n        //smoothing factor\n        var k = 2 / (indicator.period + 1); //find initial average\n\n        var average = 0;\n        var sum = 0;\n        var sumOfSMA = 0;\n        var averageSMA = 0;\n        var smaValues = []; //sma values\n\n        var index = 0;\n        var length_1 = validData_1.length;\n        var period = indicator.period;\n\n        while (length_1 >= period) {\n          sum = 0;\n          index = validData_1.length - length_1;\n\n          for (var j = index; j < index + period; j++) {\n            sum = sum + validData_1[j][field];\n          }\n\n          sum = sum / period;\n          smaValues.push(sum);\n          length_1--;\n        } //initial values\n\n\n        for (var k_1 = 0; k_1 < period - 1; k_1++) {\n          sum = 0;\n\n          for (var j = 0; j < k_1 + 1; j++) {\n            sum = sum + validData_1[j][field];\n          }\n\n          sum = sum / (k_1 + 1);\n          smaValues.splice(k_1, 0, sum);\n        }\n\n        index = indicator.period;\n\n        while (index <= smaValues.length) {\n          sum = 0;\n\n          for (var j = index - indicator.period; j < index; j++) {\n            sum = sum + smaValues[j];\n          }\n\n          sum = sum / indicator.period;\n          tmaPoints.push(this.getDataPoint(validData_1[index - 1][xField], sum, validData_1[index - 1], signalSeries_1, tmaPoints.length));\n          index++;\n        }\n      }\n    }\n\n    this.setSeriesRange(tmaPoints, indicator);\n  };\n  /**\n   * To destroy the TMA indicator.\n   * @return {void}\n   * @private\n   */\n\n\n  TmaIndicator.prototype.destroy = function (chart) {\n    /**\n     * Destroys the TMA Indicator\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  TmaIndicator.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'TmaIndicator';\n  };\n\n  return TmaIndicator;\n}(TechnicalAnalysis);\n\nexport { TmaIndicator };","map":null,"metadata":{},"sourceType":"module"}