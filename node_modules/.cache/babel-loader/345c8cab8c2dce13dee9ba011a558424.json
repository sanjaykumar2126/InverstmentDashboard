{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, Property, Complex, Collection, Internationalization } from '@syncfusion/ej2-base';\nimport { Browser, remove, Event, EventHandler } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { Chart } from '../chart/index';\nimport { RangeNavigator, appendChildElement, redrawElement } from '../index';\nimport { Rect, TextOption, measureText, SvgRenderer } from '@syncfusion/ej2-svg-base';\nimport { Periods } from '../common/model/base';\nimport { CrosshairSettings, TooltipSettings } from '../chart/index';\nimport { ZoomSettings } from '../chart/index';\nimport { calculateSize, getElement } from '../common/utils/helper';\nimport { getRangeValueXByPoint } from '../range-navigator/index';\nimport { PeriodSelector } from '../common/period-selector/period-selector';\nimport { CartesianChart } from './renderer/cartesian-chart';\nimport { RangeSelector } from './renderer/range-selector';\nimport { ToolBarSelector } from './renderer/toolbar-selector';\nimport { StockMargin, StockChartArea, StockChartAxis, StockChartRow, StockChartIndexes, StockEventsSettings } from './model/base';\nimport { StockSeries, StockChartIndicator, StockChartBorder } from './model/base';\nimport { StockChartAnnotationSettings } from './model/base';\nimport { StockChartFont } from './model/base';\nimport { textElement, titlePositionX } from '../index';\nimport { getThemeColor } from '../common/model/theme';\nimport { StockEvents } from './renderer/stock-events';\n/**\n * Stock Chart\n */\n\nvar StockChart =\n/** @class */\nfunction (_super) {\n  __extends(StockChart, _super);\n  /**\n   * Constructor for creating the widget\n   * @hidden\n   */\n\n\n  function StockChart(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    /** @private */\n\n\n    _this.isSingleAxis = false;\n    _this.chartid = 57723;\n    _this.tempSeriesType = [];\n    /** private */\n\n    _this.zoomChange = false;\n    /** @private */\n\n    _this.allowPan = false;\n    /** @private  */\n\n    _this.onPanning = false;\n    /** @private */\n\n    _this.trendlinetriggered = true;\n    /** @private */\n\n    _this.toolbarHeight = _this.enablePeriodSelector ? Browser.isDevice ? 56 : 42 : 0;\n    /** @private */\n\n    _this.initialRender = true;\n    /** @private */\n\n    _this.rangeFound = false;\n    /** @private */\n\n    _this.tempPeriods = [];\n    return _this;\n  }\n  /**\n   * Called internally if any of the property value changed.\n   * @private\n   */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  StockChart.prototype.onPropertyChanged = function (newProp, oldProp) {\n    // on property changes\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var property = _a[_i];\n\n      switch (property) {\n        case 'series':\n          this.render();\n          break;\n      }\n    }\n  };\n  /**\n   * To change the range for chart\n   */\n\n\n  StockChart.prototype.rangeChanged = function (updatedStart, updatedEnd) {\n    // manage chart refresh\n    var chartElement = document.getElementById(this.chartObject.id);\n\n    if (chartElement) {\n      while (chartElement.firstChild) {\n        chartElement.removeChild(chartElement.firstChild);\n      }\n    }\n\n    this.startValue = updatedStart;\n    this.endValue = updatedEnd;\n    this.cartesianChart.initializeChart();\n    this.periodSelector.datePicker.startDate = new Date(updatedStart);\n    this.periodSelector.datePicker.endDate = new Date(updatedEnd);\n    this.periodSelector.datePicker.dataBind();\n  };\n  /**\n   * Pre render for financial Chart\n   */\n\n\n  StockChart.prototype.preRender = function () {\n    this.unWireEvents();\n    this.initPrivateVariable();\n    this.setCulture();\n    this.stockChartTheme = getThemeColor(this.theme);\n    this.wireEvents();\n  };\n  /**\n   * Method to bind events for chart\n   */\n\n\n  StockChart.prototype.unWireEvents = function () {\n    /*! Find the Events type */\n    var startEvent = Browser.touchStartEvent;\n    var moveEvent = Browser.touchMoveEvent;\n    var stopEvent = Browser.touchEndEvent;\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    /*! UnBind the Event handler */\n\n    EventHandler.remove(this.element, startEvent, this.stockChartOnMouseDown);\n    EventHandler.remove(this.element, moveEvent, this.stockChartOnMouseMove);\n    EventHandler.remove(this.element, stopEvent, this.stockChartMouseEnd);\n    EventHandler.remove(this.element, 'click', this.stockChartOnMouseClick);\n    EventHandler.remove(this.element, 'contextmenu', this.stockChartRightClick);\n    EventHandler.remove(this.element, cancelEvent, this.stockChartOnMouseLeave);\n    window.removeEventListener(Browser.isTouch && 'orientation' in window && 'onorientationchange' in window ? 'orientationchange' : 'resize', this.stockChartResize);\n  };\n\n  StockChart.prototype.wireEvents = function () {\n    /*! Find the Events type */\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    /*! Bind the Event handler */\n\n    EventHandler.add(this.element, Browser.touchStartEvent, this.stockChartOnMouseDown, this);\n    EventHandler.add(this.element, Browser.touchMoveEvent, this.stockChartOnMouseMove, this);\n    EventHandler.add(this.element, Browser.touchEndEvent, this.stockChartMouseEnd, this);\n    EventHandler.add(this.element, 'click', this.stockChartOnMouseClick, this);\n    EventHandler.add(this.element, 'contextmenu', this.stockChartRightClick, this);\n    EventHandler.add(this.element, cancelEvent, this.stockChartOnMouseLeave, this);\n    window.addEventListener(Browser.isTouch && 'orientation' in window && 'onorientationchange' in window ? 'orientationchange' : 'resize', this.stockChartResize.bind(this));\n    this.setStyle(this.element);\n  };\n\n  StockChart.prototype.initPrivateVariable = function () {\n    if (this.element.id === '') {\n      var collection = document.getElementsByClassName('e-stockChart').length;\n      this.element.id = 'stockChart_' + this.chartid + '_' + collection;\n    }\n\n    this.seriesXMax = null;\n    this.seriesXMin = null;\n    this.startValue = null;\n    this.endValue = null;\n    this.currentEnd = null;\n  };\n  /**\n   * Method to set culture for chart\n   */\n\n\n  StockChart.prototype.setCulture = function () {\n    this.intl = new Internationalization();\n  };\n\n  StockChart.prototype.storeDataSource = function () {\n    var _this = this;\n\n    this.series.forEach(function (series) {\n      _this.tempSeriesType.push(series.type);\n\n      series.localData = undefined;\n    });\n    this.initialRender = true;\n    this.rangeFound = false;\n    this.resizeTo = null;\n    this.startValue = null;\n    this.endValue = null;\n  };\n  /**\n   * To Initialize the control rendering.\n   */\n\n\n  StockChart.prototype.render = function () {\n    this.trigger('load', {\n      stockChart: this\n    });\n    this.storeDataSource();\n    this.drawSVG();\n    this.renderTitle();\n    this.chartModuleInjection();\n    this.chartRender();\n\n    if (!(this.dataSource instanceof DataManager) || !(this.series[0].dataSource instanceof DataManager)) {\n      this.stockChartDataManagerSuccess();\n      this.initialRender = false;\n    }\n\n    this.renderComplete();\n  };\n  /**\n   * DataManager Success\n   */\n\n\n  StockChart.prototype.stockChartDataManagerSuccess = function () {\n    this.findRange();\n    this.renderRangeSelector();\n    this.renderPeriodSelector();\n    this.trigger('loaded', {\n      stockChart: this\n    });\n  };\n  /**\n   * To set styles to resolve mvc width issue.\n   * @param element\n   */\n\n\n  StockChart.prototype.setStyle = function (element) {\n    var zooming = this.zoomSettings;\n    var disableScroll = zooming.enableSelectionZooming || zooming.enablePinchZooming || this.selectionMode !== 'None' || this.crosshair.enable;\n    element.style.msTouchAction = disableScroll ? 'none' : 'element';\n    element.style.touchAction = disableScroll ? 'none' : 'element';\n    element.style.msUserSelect = 'none';\n    element.style.msContentZooming = 'none';\n    element.style.position = 'relative';\n    element.style.display = 'block';\n    element.style.webkitUserSelect = 'none';\n  };\n\n  StockChart.prototype.drawSVG = function () {\n    this.removeSvg();\n    calculateSize(this);\n    this.renderer = new SvgRenderer(this.element.id);\n    this.renderBorder();\n    this.createSecondaryElements(); //overall svg in which chart and selector appened\n\n    this.mainObject = this.renderer.createSvg({\n      id: this.element.id + '_stockChart_svg',\n      width: this.availableSize.width,\n      height: this.availableSize.height - (this.enablePeriodSelector ? this.toolbarHeight : 0) - this.titleSize.height\n    });\n    this.svgObject = this.mainObject;\n    this.element.appendChild(this.mainObject);\n  };\n\n  StockChart.prototype.createSecondaryElements = function () {\n    var tooltipDiv = redrawElement(false, this.element.id + '_Secondary_Element') || this.createElement('div');\n    tooltipDiv.id = this.element.id + '_Secondary_Element';\n\n    if (this.title) {\n      this.titleSize = measureText(this.title, this.titleStyle);\n      this.titleSize.height += 15; // for title padding\n    } else {\n      this.titleSize = {\n        height: null,\n        width: null\n      };\n    }\n\n    var height = (this.enablePeriodSelector ? this.toolbarHeight : 0) + this.titleSize.height;\n    tooltipDiv.setAttribute('style', 'position: relative; height:' + height + 'px');\n    appendChildElement(false, this.element, tooltipDiv, false);\n  };\n\n  StockChart.prototype.findCurrentData = function (totalData, xName) {\n    var _this = this;\n\n    var tempData;\n\n    if (totalData && this.startValue && this.endValue) {\n      tempData = totalData.filter(function (data) {\n        return new Date(Date.parse(data[xName])).getTime() >= _this.startValue && new Date(Date.parse(data[xName])).getTime() <= _this.endValue;\n      });\n    }\n\n    return tempData;\n  };\n  /**\n   * Render period selector\n   */\n\n\n  StockChart.prototype.renderPeriodSelector = function () {\n    if (this.enablePeriodSelector) {\n      this.toolbarSelector.initializePeriodSelector();\n      this.periodSelector.toolbar.refreshOverflow(); //to avoid overlapping toolbar elements\n\n      if (!this.enableSelector) {\n        this.cartesianChart.cartesianChartRefresh(this, this.startValue, this.endValue);\n      }\n    }\n  };\n\n  StockChart.prototype.chartRender = function () {\n    this.cartesianChart = new CartesianChart(this);\n    this.cartesianChart.initializeChart();\n  };\n  /**\n   * To render range Selector\n   */\n\n\n  StockChart.prototype.renderRangeSelector = function () {\n    //SVG in which range navigator is going to append\n    if (this.enableSelector) {\n      this.rangeSelector = new RangeSelector(this);\n      this.rangeSelector.initializeRangeNavigator();\n    }\n  };\n  /**\n   * Get component name\n   */\n\n\n  StockChart.prototype.getModuleName = function () {\n    return 'stockChart';\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @private\n   */\n\n\n  StockChart.prototype.getPersistData = function () {\n    return '';\n  };\n  /**\n   * To Remove the SVG.\n   * @return {boolean}\n   * @private\n   */\n\n\n  StockChart.prototype.removeSvg = function () {\n    if (document.getElementById(this.element.id + '_Secondary_Element')) {\n      remove(document.getElementById(this.element.id + '_Secondary_Element'));\n    }\n\n    var removeLength = 0;\n\n    if (this.mainObject) {\n      while (this.mainObject.childNodes.length > removeLength) {\n        this.mainObject.removeChild(this.mainObject.firstChild);\n      }\n\n      if (!this.mainObject.hasChildNodes() && this.mainObject.parentNode) {\n        remove(this.mainObject);\n        this.mainObject = null;\n        this.selectorObject = null;\n        this.chartObject = null;\n      }\n    }\n  };\n  /**\n   * Module Injection for components\n   */\n\n\n  StockChart.prototype.chartModuleInjection = function () {\n    var moduleName;\n\n    for (var _i = 0, _a = this.getInjectedModules(); _i < _a.length; _i++) {\n      var modules = _a[_i];\n      moduleName = modules.prototype.getModuleName().toLowerCase();\n\n      if (moduleName.indexOf('rangetooltip') === -1) {\n        Chart.Inject(modules);\n      } else {\n        RangeNavigator.Inject(modules);\n      }\n\n      if (moduleName === 'datetime' || moduleName === 'areaseries' || moduleName === 'steplineseries') {\n        RangeNavigator.Inject(modules);\n      }\n    }\n  };\n  /**\n   * find range for financal chart\n   */\n\n\n  StockChart.prototype.findRange = function () {\n    var _this = this;\n\n    this.seriesXMin = Infinity;\n    this.seriesXMax = -Infinity;\n\n    for (var _i = 0, _a = this.chart.series; _i < _a.length; _i++) {\n      var value = _a[_i];\n      this.seriesXMin = Math.min(this.seriesXMin, value.xMin);\n      this.seriesXMax = Math.max(this.seriesXMax, value.xMax);\n    }\n\n    this.endValue = this.currentEnd = this.seriesXMax;\n\n    if (this.enablePeriodSelector) {\n      this.toolbarSelector = new ToolBarSelector(this);\n      this.periodSelector = new PeriodSelector(this);\n      this.tempPeriods = this.periods.length ? this.periods : this.toolbarSelector.calculateAutoPeriods();\n      this.tempPeriods.map(function (period, index) {\n        if (period.selected && period.text.toLowerCase() === 'ytd') {\n          _this.startValue = new Date(new Date(_this.currentEnd).getFullYear().toString()).getTime();\n        } else if (period.selected && period.text.toLowerCase() === 'all') {\n          _this.startValue = _this.seriesXMin;\n        } else if (period.selected) {\n          _this.startValue = _this.periodSelector.changedRange(period.intervalType, _this.endValue, period.interval).getTime();\n        }\n      });\n    } else {\n      this.startValue = this.seriesXMin;\n    }\n\n    this.rangeFound = true;\n  };\n  /**\n   * Handles the chart resize.\n   * @return {boolean}\n   * @private\n   */\n\n\n  StockChart.prototype.stockChartResize = function (e) {\n    var _this = this; // To avoid resize console error\n\n\n    if (!document.getElementById(this.element.id)) {\n      return false;\n    }\n\n    this.animateSeries = false;\n\n    if (this.resizeTo) {\n      clearTimeout(this.resizeTo);\n    }\n\n    this.resizeTo = setTimeout(function () {\n      calculateSize(_this);\n\n      _this.renderBorder();\n\n      _this.renderTitle();\n\n      _this.cartesianChart.cartesianChartRefresh(_this, _this.startValue, _this.endValue);\n\n      _this.mainObject.setAttribute('width', _this.availableSize.width.toString());\n\n      if (_this.enablePeriodSelector) {\n        _this.renderPeriodSelector();\n      }\n    }, 500);\n    return false;\n  };\n  /**\n   * Handles the mouse down on chart.\n   * @return {boolean}\n   * @private\n   */\n\n\n  StockChart.prototype.stockChartOnMouseDown = function (e) {\n    var pageX;\n    var pageY;\n    var target;\n    var touchArg;\n    var offset = Browser.isDevice ? 20 : 30;\n    var rect = this.chart.element.getBoundingClientRect();\n    var element = e.target;\n    this.trigger('stockChartMouseDown', {\n      target: element.id,\n      x: this.mouseX,\n      y: this.mouseY\n    });\n\n    if (e.type === 'touchstart') {\n      this.isTouch = true;\n      touchArg = e;\n      pageX = touchArg.changedTouches[0].clientX;\n      target = touchArg.target;\n      pageY = touchArg.changedTouches[0].clientY;\n    } else {\n      this.isTouch = e.pointerType === 'touch';\n      pageX = e.clientX;\n      pageY = e.clientY;\n      target = e.target;\n    }\n\n    if (target.id.indexOf(this.element.id + '_stockChart_chart') > -1) {\n      var svgRect = getElement(this.element.id + '_stockChart_chart').getBoundingClientRect();\n      this.mouseDownY = this.previousMouseMoveY = pageY - rect.top - Math.max(svgRect.top - rect.top, 0);\n      this.mouseDownX = this.previousMouseMoveX = pageX - rect.left - Math.max(svgRect.left - rect.left, 0);\n      this.setMouseXY(this.mouseDownX, this.mouseDownY);\n      this.referenceXAxis = this.chart.primaryXAxis;\n      getElement(this.element.id + '_stockChart_chart').setAttribute('cursor', 'pointer');\n      this.mouseDownXPoint = getRangeValueXByPoint(this.mouseX - this.referenceXAxis.rect.x, this.referenceXAxis.rect.width, this.referenceXAxis.visibleRange, this.referenceXAxis.isInversed);\n      this.allowPan = true;\n      this.notify(Browser.touchStartEvent, e);\n    }\n\n    return false;\n  };\n  /**\n   * Handles the mouse up.\n   * @return {boolean}\n   * @private\n   */\n\n\n  StockChart.prototype.stockChartMouseEnd = function (e) {\n    var pageY;\n    var pageX;\n    var touchArg;\n\n    if (e.type === 'touchend') {\n      touchArg = e;\n      pageX = touchArg.changedTouches[0].clientX;\n      pageY = touchArg.changedTouches[0].clientY;\n      this.isTouch = true;\n    } else {\n      pageY = e.clientY;\n      pageX = e.clientX;\n      this.isTouch = e.pointerType === 'touch' || e.pointerType === '2';\n    }\n\n    getElement(this.element.id + '_stockChart_chart').setAttribute('cursor', 'auto');\n    this.onPanning = false;\n    this.setMouseXY(pageX, pageY);\n    this.stockChartOnMouseUp(e);\n    return false;\n  };\n  /**\n   * Handles the mouse up.\n   * @return {boolean}\n   * @private\n   */\n\n\n  StockChart.prototype.stockChartOnMouseUp = function (e) {\n    var element = e.target;\n    this.trigger('stockChartMouseUp', {\n      target: element.id,\n      x: this.mouseX,\n      y: this.mouseY\n    });\n    this.isChartDrag = false;\n    this.allowPan = false;\n\n    if (this.isTouch) {\n      this.threshold = new Date().getTime() + 300;\n    }\n\n    this.notify(Browser.touchEndEvent, e);\n\n    if (this.stockEvent) {\n      this.stockEvent.removeStockEventTooltip(0);\n    }\n\n    return false;\n  };\n  /**\n   * To find mouse x, y for aligned chart element svg position\n   */\n\n\n  StockChart.prototype.setMouseXY = function (pageX, pageY) {\n    var svgRect = getElement(this.element.id + '_stockChart_chart').getBoundingClientRect();\n    var rect = this.element.getBoundingClientRect();\n    this.mouseX = pageX - rect.left - Math.max(svgRect.left - rect.left, 0);\n    this.mouseY = pageY - rect.top - Math.max(svgRect.top - rect.top, 0);\n  };\n  /**\n   * Handles the mouse move.\n   * @return {boolean}\n   * @private\n   */\n\n\n  StockChart.prototype.stockChartOnMouseMove = function (e) {\n    var pageX;\n    var touchArg;\n    var pageY;\n\n    if (e.type === 'touchmove') {\n      this.isTouch = true;\n      touchArg = e;\n      pageY = touchArg.changedTouches[0].clientY;\n      pageX = touchArg.changedTouches[0].clientX;\n    } else {\n      this.isTouch = e.pointerType === 'touch' || e.pointerType === '2' || this.isTouch;\n      pageX = e.clientX;\n      pageY = e.clientY;\n    }\n\n    this.trigger('stockChartMouseMove', {\n      target: e.target.id,\n      x: this.mouseX,\n      y: this.mouseY\n    });\n    this.setMouseXY(pageX, pageY);\n    this.chartOnMouseMove(e);\n    return false;\n  };\n  /**\n   * Handles the mouse move on chart.\n   * @return {boolean}\n   * @private\n   */\n\n\n  StockChart.prototype.chartOnMouseMove = function (e) {\n    if (this.allowPan && this.mouseDownXPoint && this.mouseX !== this.previousMouseMoveX && this.zoomSettings.enablePan) {\n      this.onPanning = true;\n      getElement(this.element.id + '_stockChart_chart').setAttribute('cursor', 'pointer');\n      this.mouseUpXPoint = getRangeValueXByPoint(this.mouseX - this.referenceXAxis.rect.x, this.referenceXAxis.rect.width, this.referenceXAxis.visibleRange, this.referenceXAxis.isInversed);\n      var diff = Math.abs(this.mouseUpXPoint - this.mouseDownXPoint);\n\n      if (this.mouseDownXPoint < this.mouseUpXPoint) {\n        if (this.seriesXMin <= this.referenceXAxis.visibleRange.min - diff) {\n          this.startValue = this.referenceXAxis.visibleRange.min - diff;\n          this.endValue = this.referenceXAxis.visibleRange.max - diff;\n          this.cartesianChart.cartesianChartRefresh(this, this.referenceXAxis.visibleRange.min - diff, this.referenceXAxis.visibleRange.max - diff);\n          this.rangeSelector.sliderChange(this.referenceXAxis.visibleRange.min - diff, this.referenceXAxis.visibleRange.max - diff);\n        }\n      } else {\n        if (this.seriesXMax >= this.referenceXAxis.visibleRange.max + diff) {\n          this.startValue = this.referenceXAxis.visibleRange.min + diff;\n          this.endValue = this.referenceXAxis.visibleRange.max + diff;\n          this.cartesianChart.cartesianChartRefresh(this, this.referenceXAxis.visibleRange.min + diff, this.referenceXAxis.visibleRange.max + diff);\n          this.rangeSelector.sliderChange(this.referenceXAxis.visibleRange.min + diff, this.referenceXAxis.visibleRange.max + diff);\n        }\n      }\n    }\n\n    this.notify(Browser.touchMoveEvent, e);\n\n    if (e.target.id === '') {\n      //to remove the tooltip when hover on mouse move\n      var element = void 0;\n\n      if (this.chart.tooltip.enable || this.crosshair.enable) {\n        element = document.getElementById(this.element.id + '_stockChart_chart_tooltip');\n\n        if (element) {\n          remove(element);\n        }\n      }\n\n      if (getElement(this.element.id + '_StockEvents_Tooltip')) {\n        this.stockEvent.removeStockEventTooltip(0);\n      }\n    }\n\n    if (e.target.id.indexOf('StockEvents') !== -1) {\n      clearInterval(this.stockEvent.toolTipInterval);\n      this.stockEvent.renderStockEventTooltip(e.target.id);\n    } else {\n      if (this.stockEvent) {\n        this.stockEvent.removeStockEventTooltip(1000);\n      }\n    }\n\n    this.isTouch = false;\n    return false;\n  };\n  /**\n   * Handles the mouse click on chart.\n   * @return {boolean}\n   * @private\n   */\n\n\n  StockChart.prototype.stockChartOnMouseClick = function (e) {\n    var element = e.target;\n    this.trigger('stockChartMouseClick', {\n      target: element.id,\n      x: this.mouseX,\n      y: this.mouseY\n    });\n    this.notify('click', e);\n    return false;\n  };\n\n  StockChart.prototype.stockChartRightClick = function (event) {\n    if (this.crosshair.enable && (event.buttons === 2 || event.which === 0 || event.pointerType === 'touch')) {\n      event.preventDefault();\n      event.stopPropagation();\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Handles the mouse leave.\n   * @return {boolean}\n   * @private\n   */\n\n\n  StockChart.prototype.stockChartOnMouseLeave = function (e) {\n    var touchArg;\n    var pageX;\n    var pageY;\n\n    if (e.type === 'touchleave') {\n      this.isTouch = true;\n      touchArg = e;\n      pageX = touchArg.changedTouches[0].clientX;\n      pageY = touchArg.changedTouches[0].clientY;\n    } else {\n      pageX = e.clientX;\n      pageY = e.clientY;\n      this.isTouch = e.pointerType === 'touch' || e.pointerType === '2';\n    }\n\n    this.setMouseXY(pageX, pageY);\n    this.allowPan = false;\n    this.stockChartOnMouseLeaveEvent(e);\n    return false;\n  };\n  /**\n   * Handles the mouse leave on chart.\n   * @return {boolean}\n   * @private\n   */\n\n\n  StockChart.prototype.stockChartOnMouseLeaveEvent = function (e) {\n    var element = e.target;\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave'; //this.trigger(chartMouseLeave, { target: element.id, x: this.mouseX, y: this.mouseY });\n\n    this.isChartDrag = false;\n    this.notify(cancelEvent, e);\n\n    if (this.stockEvent) {\n      this.stockEvent.removeStockEventTooltip(1000);\n    }\n\n    return false;\n  };\n  /**\n   * Destroy method\n   */\n\n\n  StockChart.prototype.destroy = function () {//Perform destroy here\n  };\n\n  StockChart.prototype.renderBorder = function () {\n    if (this.border.width) {\n      var border = this.createElement('div');\n      border.id = this.element.id + '_stock_border';\n      border.style.width = this.availableSize.width + 'px';\n      border.style.height = this.availableSize.height + 'px';\n      border.style.position = 'absolute';\n      border.style.border = this.border.width + 'px solid ' + this.border.color;\n      border.style.pointerEvents = 'none';\n      appendChildElement(false, getElement(this.element.id), border);\n    }\n  };\n  /**\n   * Render title for chart\n   */\n\n\n  StockChart.prototype.renderTitle = function () {\n    var rect;\n\n    if (this.title) {\n      appendChildElement(false, getElement(this.element.id + '_Secondary_Element'), this.renderer.createSvg({\n        id: this.element.id + '_stockChart_Title',\n        width: this.availableSize.width,\n        height: this.titleSize.height,\n        fill: this.background || this.stockChartTheme.background\n      }), false);\n      var alignment = this.titleStyle.textAlignment;\n      var getAnchor = alignment === 'Near' ? 'start' : alignment === 'Far' ? 'end' : 'middle';\n      rect = new Rect(0, 0, this.availableSize.width, 0);\n      var options = new TextOption(this.element.id + '_ChartTitle', titlePositionX(rect, this.titleStyle), this.titleSize.height - 10, getAnchor, this.title, '', 'auto');\n      var element = textElement(this.renderer, options, this.titleStyle, this.titleStyle.color || this.findTitleColor(), getElement(this.element.id + '_stockChart_Title'), false, false);\n      this.availableSize.height -= this.titleSize.height + 5;\n    }\n  };\n\n  StockChart.prototype.findTitleColor = function () {\n    if (this.theme.indexOf('Highcontrast') > -1 || this.theme.indexOf('Dark') > -1) {\n      return '#ffffff';\n    }\n\n    return '#424242';\n  };\n  /**\n   * @private\n   */\n\n\n  StockChart.prototype.calculateStockEvents = function () {\n    if (this.stockEvents.length) {\n      this.stockEvent = new StockEvents(this);\n      appendChildElement(false, this.chartObject, this.stockEvent.renderStockEvents());\n    }\n  };\n\n  __decorate([Property(null)], StockChart.prototype, \"width\", void 0);\n\n  __decorate([Property(null)], StockChart.prototype, \"height\", void 0);\n\n  __decorate([Property('')], StockChart.prototype, \"dataSource\", void 0);\n\n  __decorate([Complex({}, StockMargin)], StockChart.prototype, \"margin\", void 0);\n\n  __decorate([Complex({\n    color: '#DDDDDD',\n    width: 1\n  }, StockChartBorder)], StockChart.prototype, \"border\", void 0);\n\n  __decorate([Property(null)], StockChart.prototype, \"background\", void 0);\n\n  __decorate([Property('Material')], StockChart.prototype, \"theme\", void 0);\n\n  __decorate([Complex({\n    name: 'primaryXAxis',\n    valueType: 'DateTime'\n  }, StockChartAxis)], StockChart.prototype, \"primaryXAxis\", void 0);\n\n  __decorate([Complex({\n    border: {\n      color: null,\n      width: 0.5\n    },\n    background: 'transparent'\n  }, StockChartArea)], StockChart.prototype, \"chartArea\", void 0);\n\n  __decorate([Complex({\n    name: 'primaryYAxis',\n    opposedPosition: true,\n    labelPosition: 'Inside'\n  }, StockChartAxis)], StockChart.prototype, \"primaryYAxis\", void 0);\n\n  __decorate([Collection([{}], StockChartRow)], StockChart.prototype, \"rows\", void 0);\n\n  __decorate([Collection([{\n    opposedPosition: true\n  }], StockChartAxis)], StockChart.prototype, \"axes\", void 0);\n\n  __decorate([Collection([], StockSeries)], StockChart.prototype, \"series\", void 0);\n\n  __decorate([Collection([], StockEventsSettings)], StockChart.prototype, \"stockEvents\", void 0);\n\n  __decorate([Property(false)], StockChart.prototype, \"isTransposed\", void 0);\n\n  __decorate([Property('')], StockChart.prototype, \"title\", void 0);\n\n  __decorate([Complex({\n    size: '15px',\n    fontWeight: '500',\n    color: null,\n    fontStyle: 'Normal',\n    fontFamily: 'Segoe UI'\n  }, StockChartFont)], StockChart.prototype, \"titleStyle\", void 0);\n\n  __decorate([Collection([], StockChartIndicator)], StockChart.prototype, \"indicators\", void 0);\n\n  __decorate([Complex({\n    shared: true,\n    enableMarker: false\n  }, TooltipSettings)], StockChart.prototype, \"tooltip\", void 0);\n\n  __decorate([Complex({\n    dashArray: '5'\n  }, CrosshairSettings)], StockChart.prototype, \"crosshair\", void 0);\n\n  __decorate([Complex({}, ZoomSettings)], StockChart.prototype, \"zoomSettings\", void 0);\n\n  __decorate([Property(true)], StockChart.prototype, \"enablePeriodSelector\", void 0);\n\n  __decorate([Property(true)], StockChart.prototype, \"enableCustomRange\", void 0);\n\n  __decorate([Property(false)], StockChart.prototype, \"isSelect\", void 0);\n\n  __decorate([Property(true)], StockChart.prototype, \"enableSelector\", void 0);\n\n  __decorate([Collection([], Periods)], StockChart.prototype, \"periods\", void 0);\n\n  __decorate([Collection([{}], StockChartAnnotationSettings)], StockChart.prototype, \"annotations\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"selectorRender\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"stockChartMouseMove\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"stockChartMouseLeave\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"stockChartMouseDown\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"stockChartMouseUp\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"stockChartMouseClick\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"pointClick\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"pointMove\", void 0);\n\n  __decorate([Property('None')], StockChart.prototype, \"selectionMode\", void 0);\n\n  __decorate([Property(false)], StockChart.prototype, \"isMultiSelect\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"load\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"loaded\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"rangeChange\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"axisLabelRender\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"tooltipRender\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"seriesRender\", void 0);\n\n  __decorate([Event()], StockChart.prototype, \"stockEventRender\", void 0);\n\n  __decorate([Collection([], StockChartIndexes)], StockChart.prototype, \"selectedDataIndexes\", void 0);\n\n  __decorate([Property(['Line', 'Hilo', 'OHLC', 'Hollow Candle', 'Spline', 'Candle'])], StockChart.prototype, \"seriesType\", void 0);\n\n  __decorate([Property(['EMA', 'TMA', 'SMA', 'Momentum', 'ATR', 'Accumulation Distribution', 'Bollinger Bands', 'MACD', 'Stochastic', 'RSI'])], StockChart.prototype, \"indicatorType\", void 0);\n\n  __decorate([Property(['PNG', 'JPEG', 'SVG', 'PDF', 'Print'])], StockChart.prototype, \"exportType\", void 0);\n\n  __decorate([Property(['Linear', 'Exponential', 'Polynomial', 'Logarithmic', 'Moving Average'])], StockChart.prototype, \"trendlineType\", void 0);\n\n  return StockChart;\n}(Component);\n\nexport { StockChart };","map":null,"metadata":{},"sourceType":"module"}