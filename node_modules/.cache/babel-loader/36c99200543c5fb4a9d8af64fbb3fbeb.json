{"ast":null,"code":"import deepExtend from './deep-extend';\nvar TRIGGER = 'trigger';\n\nvar InstanceObserver = function InstanceObserver(observer, handlers) {\n  this.observer = observer;\n  this.handlerMap = deepExtend({}, this.handlerMap, handlers);\n};\n\nInstanceObserver.prototype.trigger = function trigger(name, args) {\n  var ref = this;\n  var observer = ref.observer;\n  var handlerMap = ref.handlerMap;\n  var isDefaultPrevented;\n\n  if (handlerMap[name]) {\n    isDefaultPrevented = this.callObserver(handlerMap[name], args);\n  } else if (observer[TRIGGER]) {\n    isDefaultPrevented = this.callObserver(TRIGGER, name, args);\n  }\n\n  return isDefaultPrevented;\n};\n\nInstanceObserver.prototype.callObserver = function callObserver(fnName) {\n  var args = [],\n      len = arguments.length - 1;\n\n  while (len-- > 0) args[len] = arguments[len + 1];\n\n  return this.observer[fnName].apply(this.observer, args);\n};\n\nInstanceObserver.prototype.requiresHandlers = function requiresHandlers(names) {\n  var this$1 = this;\n\n  if (this.observer.requiresHandlers) {\n    return this.observer.requiresHandlers(names);\n  }\n\n  for (var idx = 0; idx < names.length; idx++) {\n    if (this$1.handlerMap[names[idx]]) {\n      return true;\n    }\n  }\n};\n\nexport default InstanceObserver;","map":null,"metadata":{},"sourceType":"module"}