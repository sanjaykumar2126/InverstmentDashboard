{"ast":null,"code":"import PolarPlotAreaBase from './polar-plotarea-base';\nimport PlotAreaBase from './plotarea-base';\nimport PolarLineChart from '../polar-line-chart/polar-line-chart';\nimport PolarScatterChart from '../polar-scatter-chart/polar-scatter-chart';\nimport PolarAreaChart from '../polar-area-chart/polar-area-chart';\nimport PlotAreaEventsMixin from '../mixins/plotarea-events-mixin';\nimport { PolarAxis, Point } from '../../core';\nimport { POLAR_AREA, POLAR_LINE, POLAR_SCATTER } from '../constants';\nimport filterSeriesByType from '../utils/filter-series-by-type';\nimport { ARC } from '../../common/constants';\nimport { deepExtend, eventElement, setDefaultOptions } from '../../common';\n\nvar PolarPlotArea = function (PolarPlotAreaBase) {\n  function PolarPlotArea() {\n    PolarPlotAreaBase.apply(this, arguments);\n  }\n\n  if (PolarPlotAreaBase) PolarPlotArea.__proto__ = PolarPlotAreaBase;\n  PolarPlotArea.prototype = Object.create(PolarPlotAreaBase && PolarPlotAreaBase.prototype);\n  PolarPlotArea.prototype.constructor = PolarPlotArea;\n\n  PolarPlotArea.prototype.createPolarAxis = function createPolarAxis() {\n    var polarAxis = new PolarAxis(this.options.xAxis, this.chartService);\n    this.polarAxis = polarAxis;\n    this.axisX = polarAxis;\n    this.appendAxis(polarAxis);\n  };\n\n  PolarPlotArea.prototype.valueAxisOptions = function valueAxisOptions(defaults) {\n    return deepExtend(defaults, {\n      majorGridLines: {\n        type: ARC\n      },\n      minorGridLines: {\n        type: ARC\n      }\n    }, this.options.yAxis);\n  };\n\n  PolarPlotArea.prototype.createValueAxis = function createValueAxis() {\n    PolarPlotAreaBase.prototype.createValueAxis.call(this);\n    this.axisY = this.valueAxis;\n  };\n\n  PolarPlotArea.prototype.appendChart = function appendChart(chart, pane) {\n    this.valueAxisRangeTracker.update(chart.yAxisRanges);\n    PlotAreaBase.prototype.appendChart.call(this, chart, pane);\n  };\n\n  PolarPlotArea.prototype.createCharts = function createCharts() {\n    var series = this.filterVisibleSeries(this.series);\n    var pane = this.panes[0];\n    this.createLineChart(filterSeriesByType(series, [POLAR_LINE]), pane);\n    this.createScatterChart(filterSeriesByType(series, [POLAR_SCATTER]), pane);\n    this.createAreaChart(filterSeriesByType(series, [POLAR_AREA]), pane);\n  };\n\n  PolarPlotArea.prototype.createLineChart = function createLineChart(series, pane) {\n    if (series.length === 0) {\n      return;\n    }\n\n    var lineChart = new PolarLineChart(this, {\n      series: series\n    });\n    this.appendChart(lineChart, pane);\n  };\n\n  PolarPlotArea.prototype.createScatterChart = function createScatterChart(series, pane) {\n    if (series.length === 0) {\n      return;\n    }\n\n    var scatterChart = new PolarScatterChart(this, {\n      series: series\n    });\n    this.appendChart(scatterChart, pane);\n  };\n\n  PolarPlotArea.prototype.createAreaChart = function createAreaChart(series, pane) {\n    if (series.length === 0) {\n      return;\n    }\n\n    var areaChart = new PolarAreaChart(this, {\n      series: series\n    });\n    this.appendChart(areaChart, pane);\n  };\n\n  PolarPlotArea.prototype._dispatchEvent = function _dispatchEvent(chart, e, eventType) {\n    var coords = chart._eventCoordinates(e);\n\n    var point = new Point(coords.x, coords.y);\n    var xValue = this.axisX.getValue(point);\n    var yValue = this.axisY.getValue(point);\n\n    if (xValue !== null && yValue !== null) {\n      chart.trigger(eventType, {\n        element: eventElement(e),\n        x: xValue,\n        y: yValue\n      });\n    }\n  };\n\n  PolarPlotArea.prototype.createCrosshairs = function createCrosshairs() {};\n\n  return PolarPlotArea;\n}(PolarPlotAreaBase);\n\nsetDefaultOptions(PolarPlotArea, {\n  xAxis: {},\n  yAxis: {}\n});\ndeepExtend(PolarPlotArea.prototype, PlotAreaEventsMixin);\nexport default PolarPlotArea;","map":null,"metadata":{},"sourceType":"module"}