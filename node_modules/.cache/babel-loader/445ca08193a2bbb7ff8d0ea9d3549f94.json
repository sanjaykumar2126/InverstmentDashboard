{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport { ChartElement } from '../../core';\nimport { defined, isFunction, setDefaultOptions } from '../../common';\n\nvar LineSegment = function (ChartElement) {\n  function LineSegment(linePoints, series, seriesIx) {\n    ChartElement.call(this);\n    this.linePoints = linePoints;\n    this.series = series;\n    this.seriesIx = seriesIx;\n  }\n\n  if (ChartElement) LineSegment.__proto__ = ChartElement;\n  LineSegment.prototype = Object.create(ChartElement && ChartElement.prototype);\n  LineSegment.prototype.constructor = LineSegment;\n\n  LineSegment.prototype.points = function points() {\n    return this.toGeometryPoints(this.linePoints);\n  };\n\n  LineSegment.prototype.toGeometryPoints = function toGeometryPoints(points) {\n    var result = [];\n\n    for (var i = 0, length = points.length; i < length; i++) {\n      if (points[i] && points[i].visible !== false) {\n        result.push(points[i]._childBox.toRect().center());\n      }\n    }\n\n    return result;\n  };\n\n  LineSegment.prototype.createVisual = function createVisual() {\n    var this$1 = this;\n    var customVisual = this.series.visual;\n\n    if (customVisual) {\n      this.visual = customVisual({\n        points: this.toGeometryPoints(this.linePoints),\n        series: this.series,\n        sender: this.getSender(),\n        createVisual: function () {\n          this$1.segmentVisual();\n          return this$1.visual;\n        }\n      });\n\n      if (this.visual && !defined(this.visual.options.zIndex)) {\n        this.visual.options.zIndex = this.series.zIndex;\n      }\n    } else {\n      this.segmentVisual();\n    }\n  };\n\n  LineSegment.prototype.segmentVisual = function segmentVisual() {\n    var ref = this;\n    var options = ref.options;\n    var series = ref.series;\n    var color = series.color;\n    var defaults = series._defaults;\n\n    if (isFunction(color) && defaults) {\n      color = defaults.color;\n    }\n\n    var line = draw.Path.fromPoints(this.points(), {\n      stroke: {\n        color: color,\n        width: series.width,\n        opacity: series.opacity,\n        dashType: series.dashType\n      },\n      zIndex: series.zIndex\n    });\n\n    if (options.closed) {\n      line.close();\n    }\n\n    this.visual = line;\n  };\n\n  LineSegment.prototype.aliasFor = function aliasFor(e, coords) {\n    return this.parent.getNearestPoint(coords.x, coords.y, this.seriesIx);\n  };\n\n  return LineSegment;\n}(ChartElement);\n\nsetDefaultOptions(LineSegment, {\n  closed: false\n});\nexport default LineSegment;","map":null,"metadata":{},"sourceType":"module"}