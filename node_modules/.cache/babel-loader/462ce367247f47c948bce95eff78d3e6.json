{"ast":null,"code":"import { measureText } from '../../smithchart/utils/helper';\n/* tslint:disable:no-string-literal */\n\nvar AreaBounds =\n/** @class */\nfunction () {\n  function AreaBounds() {}\n\n  AreaBounds.prototype.calculateAreaBounds = function (smithchart, title, bounds) {\n    var x;\n    var y;\n    var width;\n    var height;\n    var rightSpace;\n    var margin = smithchart.margin;\n    var border = smithchart.border;\n    var spaceValue = this.getLegendSpace(smithchart, bounds);\n    x = spaceValue['leftLegendWidth'] + margin.left + border.width;\n    rightSpace = spaceValue['rightLegendWidth'] + margin.left + margin.right + 2 * border.width;\n    width = smithchart.availableSize['width'] - (x + rightSpace);\n    y = margin['top'] + 2 * smithchart.elementSpacing + spaceValue['modelTitleHeight'] + spaceValue['modelsubTitleHeight'] + spaceValue['topLegendHeight'] + border.width;\n    height = smithchart.availableSize['height'] - (spaceValue['modelTitleHeight'] + 2 * smithchart.elementSpacing + spaceValue['modelsubTitleHeight'] + margin['top'] + spaceValue['topLegendHeight'] + spaceValue['bottomLegendHeight']);\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    };\n  };\n\n  AreaBounds.prototype.getLegendSpace = function (smithchart, bounds) {\n    var title = smithchart.title;\n    var legend = smithchart.legendSettings;\n    var position = legend.position.toLowerCase();\n    var subtitleHeight = 0;\n    var modelsubTitleHeight = 0;\n    var titleHeight = 0;\n    var font = smithchart.font;\n    var modelTitleHeight = 0;\n    var itemPadding = 10;\n    var legendBorder = legend.border.width;\n    var leftLegendWidth = 0;\n    var rightLegendWidth = 0;\n    var topLegendHeight = 0;\n    var bottomLegendHeight = 0;\n    var ltheight = 0;\n    var space;\n\n    if (legend['visible']) {\n      space = bounds.width + itemPadding / 2 + smithchart.elementSpacing + 2 * legendBorder;\n      leftLegendWidth = position === 'left' ? space : 0;\n      rightLegendWidth = position === 'right' ? space : 0;\n      ltheight = legend['title'].visible ? measureText(legend['title'].text, font)['height'] : 0;\n      topLegendHeight = position === 'top' ? smithchart.elementSpacing + bounds.height + ltheight : 0;\n      bottomLegendHeight = position === 'bottom' ? smithchart.elementSpacing + bounds.height + ltheight : 0;\n    }\n\n    subtitleHeight = measureText(title.subtitle.text, font)['height'];\n    modelTitleHeight = title.text === '' || !title['visible'] ? 0 : titleHeight;\n    modelsubTitleHeight = title['subtitle'].text === '' || !title['subtitle'].visible ? 0 : subtitleHeight;\n    return {\n      leftLegendWidth: leftLegendWidth,\n      rightLegendWidth: rightLegendWidth,\n      topLegendHeight: topLegendHeight,\n      bottomLegendHeight: bottomLegendHeight,\n      modelTitleHeight: modelTitleHeight,\n      modelsubTitleHeight: modelsubTitleHeight\n    };\n  };\n\n  return AreaBounds;\n}();\n\nexport { AreaBounds };","map":null,"metadata":{},"sourceType":"module"}