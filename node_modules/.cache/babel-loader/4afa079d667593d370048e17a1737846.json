{"ast":null,"code":"import { ZERO, INTERPOLATE } from '../constants';\nimport { Point } from '../../core';\nimport { MAX_VALUE } from '../../common/constants';\nimport { defined } from '../../common';\nvar LineChartMixin = {\n  renderSegments: function () {\n    var this$1 = this;\n    var ref = this;\n    var options = ref.options;\n    var seriesPoints = ref.seriesPoints;\n    var series = options.series;\n    var seriesCount = seriesPoints.length;\n    var lastSegment;\n    this._segments = [];\n\n    for (var seriesIx = 0; seriesIx < seriesCount; seriesIx++) {\n      var currentSeries = series[seriesIx];\n      var sortedPoints = this$1.sortPoints(seriesPoints[seriesIx]);\n      var pointCount = sortedPoints.length;\n      var linePoints = [];\n\n      for (var pointIx = 0; pointIx < pointCount; pointIx++) {\n        var point = sortedPoints[pointIx];\n\n        if (point) {\n          linePoints.push(point);\n        } else if (this$1.seriesMissingValues(currentSeries) !== INTERPOLATE) {\n          if (linePoints.length > 1) {\n            lastSegment = this$1.createSegment(linePoints, currentSeries, seriesIx, lastSegment);\n\n            this$1._addSegment(lastSegment);\n          }\n\n          linePoints = [];\n        }\n      }\n\n      if (linePoints.length > 1) {\n        lastSegment = this$1.createSegment(linePoints, currentSeries, seriesIx, lastSegment);\n\n        this$1._addSegment(lastSegment);\n      }\n    }\n\n    this.children.unshift.apply(this.children, this._segments);\n  },\n  _addSegment: function (segment) {\n    this._segments.push(segment);\n\n    segment.parent = this;\n  },\n  sortPoints: function (points) {\n    return points;\n  },\n  seriesMissingValues: function (series) {\n    var missingValues = series.missingValues;\n    var assumeZero = !missingValues && this.options.isStacked;\n    return assumeZero ? ZERO : missingValues || INTERPOLATE;\n  },\n  getNearestPoint: function (x, y, seriesIx) {\n    var target = new Point(x, y);\n    var allPoints = this.seriesPoints[seriesIx];\n    var nearestPointDistance = MAX_VALUE;\n    var nearestPoint;\n\n    for (var i = 0; i < allPoints.length; i++) {\n      var point = allPoints[i];\n\n      if (point && defined(point.value) && point.value !== null && point.visible !== false) {\n        var pointBox = point.box;\n        var pointDistance = pointBox.center().distanceTo(target);\n\n        if (pointDistance < nearestPointDistance) {\n          nearestPoint = point;\n          nearestPointDistance = pointDistance;\n        }\n      }\n    }\n\n    return nearestPoint;\n  }\n};\nexport default LineChartMixin;","map":null,"metadata":{},"sourceType":"module"}