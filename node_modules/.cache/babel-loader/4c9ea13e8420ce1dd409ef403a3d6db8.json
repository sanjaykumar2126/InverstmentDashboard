{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, Property, NotifyPropertyChanges, Complex, Collection, Browser } from '@syncfusion/ej2-base';\nimport { EventHandler, remove, Internationalization } from '@syncfusion/ej2-base';\nimport { Event } from '@syncfusion/ej2-base';\nimport { createSvg, removeElement } from '../common/utils/helper';\nimport { Rect, measureText, Size } from '@syncfusion/ej2-svg-base';\nimport { Border, Margin, PeriodSelectorSettings } from '../common/model/base';\nimport { RangeSeries } from './renderer/chart-render';\nimport { RangeNavigatorAxis } from './renderer/range-axis';\nimport { RangeNavigatorSeries, StyleSettings, RangeTooltipSettings } from './model/range-base';\nimport { RangeSlider } from './renderer/slider';\nimport { RectOption } from '../chart/index';\nimport { getElement, LineSeries } from '../chart/index';\nimport { getRangeThemeColor } from './utils/theme';\nimport { Font } from '../common/model/base';\nimport { MajorGridLines, MajorTickLines } from '../chart/axis/axis';\nimport { RangeNavigatorTheme } from './utils/theme';\nimport { Double } from '../chart/axis/double-axis';\nimport { ExportUtils } from '../common/utils/export';\n/**\n * Range Navigator\n */\n\nvar RangeNavigator =\n/** @class */\nfunction (_super) {\n  __extends(RangeNavigator, _super);\n  /**\n   * Constructor for creating the widget\n   * @hidden\n   */\n\n\n  function RangeNavigator(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    /** @private */\n\n\n    _this.animateSeries = true;\n    _this.chartid = 57725;\n    return _this;\n  }\n  /**\n   * Starting point of the control initialization\n   */\n\n\n  RangeNavigator.prototype.preRender = function () {\n    this.unWireEvents();\n    this.setCulture();\n\n    if (this.element.id === '') {\n      var collection = document.getElementsByClassName('e-rangenavigator').length;\n      this.element.id = 'rangenavigator_' + this.chartid + '_' + collection;\n    }\n\n    this.wireEvents();\n  };\n  /**\n   * To initialize the private variables\n   */\n\n\n  RangeNavigator.prototype.initPrivateVariables = function () {\n    this.doubleModule = new Double();\n    this.labels = [];\n    this.rangeSlider = new RangeSlider(this);\n    this.chartSeries = new RangeSeries(this);\n    this.lineSeriesModule = new LineSeries();\n    this.rangeAxis = new RangeNavigatorAxis(this);\n  };\n  /**\n   * Method to set culture for chart\n   */\n\n\n  RangeNavigator.prototype.setCulture = function () {\n    this.intl = new Internationalization();\n  };\n  /**\n   * to initialize the slider\n   */\n\n\n  RangeNavigator.prototype.setSliderValue = function () {\n    var isDateTime = this.valueType === 'DateTime';\n    var range = this.chartSeries.xAxis.actualRange;\n    this.startValue = this.startValue ? this.startValue : !this.value[0] ? range.min : isDateTime ? this.value[0].getTime() : +this.value[0];\n    this.endValue = this.endValue ? this.endValue : !this.value[1] ? range.max : isDateTime ? this.value[1].getTime() : +this.value[1];\n  };\n  /**\n   * To render the range navigator\n   */\n\n\n  RangeNavigator.prototype.render = function () {\n    this.trigger('load', {\n      rangeNavigator: this\n    });\n    this.setTheme();\n    this.initPrivateVariables();\n    this.createRangeSvg();\n    this.calculateBounds();\n    this.chartSeries.renderChart(this);\n    removeElement('chartmeasuretext');\n    this.renderComplete();\n  };\n  /**\n   * Theming for rangeNavigator\n   */\n\n\n  RangeNavigator.prototype.setTheme = function () {\n    /*! Set theme */\n    this.themeStyle = getRangeThemeColor(this.theme, this);\n  };\n  /**\n   * Method to create SVG for Range Navigator\n   */\n\n\n  RangeNavigator.prototype.createRangeSvg = function () {\n    this.removeSvg();\n    createSvg(this);\n    this.renderChartBackground();\n  };\n  /**\n   * Bounds calculation for widget performed.\n   */\n\n\n  RangeNavigator.prototype.calculateBounds = function () {\n    var labelPadding = this.enableGrouping ? 15 : 8;\n    var thumb = this.navigatorStyleSettings.thumb;\n    var labelSize = measureText('tempString', this.labelStyle).height;\n    var margin = this.margin;\n    var isLeightWeight = !this.series.length;\n    var tooltipSpace = !this.disableRangeSelector && isLeightWeight && this.tooltip.enable ? 35 : 0;\n    var selector = this.periodSelectorModule;\n\n    if (this.periodSelectorModule && this.periodSelectorSettings.periods.length > 0) {\n      selector.periodSelectorSize = {\n        x: 0,\n        y: 0,\n        height: 0,\n        width: 0\n      };\n      selector.periodSelectorSize.width = this.availableSize.width;\n      selector.periodSelectorSize.height = this.periodSelectorSettings.height;\n      selector.periodSelectorSize.y = this.periodSelectorSettings.position === 'Bottom' ? this.availableSize.height - selector.periodSelectorSize.height : 0;\n    }\n\n    var periodSelectorY = this.periodSelectorSettings.position === 'Top' && selector ? selector.periodSelectorSize.y + selector.periodSelectorSize.height : 0;\n    this.bounds = new Rect(this.themeStyle.thumbWidth / 2 + thumb.border.width + margin.left, margin.top + tooltipSpace + periodSelectorY, this.availableSize.width - this.themeStyle.thumbWidth - thumb.border.width * 2 - margin.left - margin.right, this.availableSize.height - margin.top - margin.bottom - tooltipSpace - (selector ? selector.periodSelectorSize.height : 0));\n    var deductHeight = (this.labelPosition === 'Outside' || isLeightWeight ? labelSize + labelPadding : 0) + (this.tickPosition === 'Outside' || isLeightWeight ? this.majorTickLines.height : 0);\n    this.bounds.height -= deductHeight;\n\n    if (isLeightWeight) {\n      var height = this.enableGrouping ? this.bounds.height - (labelSize + labelPadding) : this.bounds.height;\n      this.bounds.y += this.themeStyle.thumbHeight > height ? (this.themeStyle.thumbHeight - height) / 2 : 0;\n    }\n\n    if (this.disableRangeSelector) {\n      this.bounds.y = 0;\n      this.bounds.height = this.periodSelectorSettings.height;\n    }\n  };\n  /**\n   * Creating Chart for range navigator\n   */\n\n\n  RangeNavigator.prototype.renderChart = function () {\n    this.chartSeries.renderSeries(this);\n    this.rangeAxis.renderGridLines();\n    this.rangeAxis.renderAxisLabels();\n    this.chartSeries.appendSeriesElements(this);\n    this.createSecondaryElement();\n    this.setSliderValue();\n    this.renderPeriodSelector();\n    this.renderSlider();\n\n    if (!this.stockChart) {\n      this.element.appendChild(this.svgObject);\n    }\n\n    var blazor = 'Blazor';\n    this.trigger('loaded', {\n      rangeNavigator: window[blazor] ? {} : this\n    });\n    this.rangeSlider.setSlider(this.startValue, this.endValue, false, this.tooltip.enable && this.tooltip.displayMode === 'Always');\n  };\n  /**\n   * To render period selector value\n   */\n\n\n  RangeNavigator.prototype.renderPeriodSelector = function () {\n    if (this.periodSelectorModule) {\n      this.periodSelectorModule.renderSelectorElement(this);\n      this.periodSelectorModule.renderSelector();\n    }\n  };\n  /**\n   * Creating secondary range navigator\n   */\n\n\n  RangeNavigator.prototype.createSecondaryElement = function () {\n    // For userInteraction\n    if (this.tooltip.enable) {\n      var tooltipDiv = this.createElement('div');\n      tooltipDiv.id = this.element.id + '_Secondary_Element';\n      tooltipDiv.setAttribute('style', 'position: relative');\n      this.element.appendChild(tooltipDiv);\n    }\n  };\n  /**\n   * Slider Calculation ane rendering performed here\n   */\n\n\n  RangeNavigator.prototype.renderSlider = function () {\n    this.rangeSlider.render(this);\n    this.rangeSlider.setSlider(this.startValue, this.endValue, true, this.tooltip.enable && this.tooltip.displayMode === 'Always');\n  };\n  /**\n   * To Remove the SVG.\n   * @return {boolean}\n   * @private\n   */\n\n\n  RangeNavigator.prototype.removeSvg = function () {\n    if (getElement(this.element.id + '_Secondary_Element')) {\n      remove(getElement(this.element.id + '_Secondary_Element'));\n    }\n\n    var removeLength = 0;\n\n    if (this.svgObject) {\n      while (this.svgObject.childNodes.length > removeLength) {\n        this.svgObject.removeChild(this.svgObject.firstChild);\n      }\n\n      if (!this.svgObject.hasChildNodes() && this.svgObject.parentNode && !this.stockChart) {\n        remove(this.svgObject);\n      }\n    }\n  };\n  /** Wire, UnWire and Event releated calculation Started here */\n\n  /**\n   * Method to un-bind events for range navigator\n   */\n\n\n  RangeNavigator.prototype.unWireEvents = function () {\n    /*! Find the Events type */\n    var startEvent = Browser.touchStartEvent;\n    var moveEvent = Browser.touchMoveEvent;\n    var stopEvent = Browser.touchEndEvent;\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    /*! UnBind the Event handler */\n\n    EventHandler.remove(this.element, startEvent, this.rangeOnMouseDown);\n    EventHandler.remove(this.element, moveEvent, this.mouseMove);\n    EventHandler.remove(this.element, stopEvent, this.mouseEnd);\n    EventHandler.remove(this.element, 'click', this.rangeOnMouseClick); //EventHandler.remove(this.element, 'contextmenu', this.rangeRightClick);\n\n    EventHandler.remove(this.element, cancelEvent, this.mouseLeave);\n    window.removeEventListener(Browser.isTouch && 'orientation' in window && 'onorientationchange' in window ? 'orientationchange' : 'resize', this.rangeResize);\n  };\n  /**\n   * Method to bind events for range navigator\n   */\n\n\n  RangeNavigator.prototype.wireEvents = function () {\n    /*! Find the Events type */\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    /*! Bind the Event handler */\n\n    EventHandler.add(this.element, Browser.touchStartEvent, this.rangeOnMouseDown, this);\n    EventHandler.add(this.element, Browser.touchMoveEvent, this.mouseMove, this);\n    EventHandler.add(this.element, Browser.touchEndEvent, this.mouseEnd, this);\n    EventHandler.add(this.element, 'click', this.rangeOnMouseClick, this); //EventHandler.add(this.element, 'contextmenu', this.rangeRightClick, this);\n\n    EventHandler.add(this.element, cancelEvent, this.mouseLeave, this);\n    window.addEventListener(Browser.isTouch && 'orientation' in window && 'onorientationchange' in window ? 'orientationchange' : 'resize', this.rangeResize.bind(this));\n    var element = this.element;\n    element.style.touchAction = 'none';\n    element.style.msTouchAction = 'none';\n    element.style.msContentZooming = 'none';\n    element.style.msUserSelect = 'none';\n    element.style.webkitUserSelect = 'none';\n    element.style.position = 'relative';\n    element.style.display = 'block';\n  };\n  /**\n   * Handles the widget resize.\n   * @return {boolean}\n   * @private\n   */\n\n\n  RangeNavigator.prototype.rangeResize = function (e) {\n    var _this = this; // To avoid resize console error\n\n\n    if (!document.getElementById(this.element.id)) {\n      return false;\n    }\n\n    this.animateSeries = false;\n    this.removeAllTooltip();\n\n    if (this.resizeTo) {\n      clearTimeout(this.resizeTo);\n    }\n\n    var arg = {\n      rangeNavigator: this,\n      name: 'resized',\n      currentSize: new Size(0, 0),\n      previousSize: new Size(this.availableSize.width, this.availableSize.height)\n    };\n    this.resizeTo = setTimeout(function () {\n      if (_this.isDestroyed) {\n        clearTimeout(_this.resizeTo);\n        return;\n      }\n\n      _this.createRangeSvg();\n\n      arg.currentSize = _this.availableSize;\n\n      _this.trigger('resized', arg);\n\n      _this.calculateBounds();\n\n      _this.chartSeries.renderChart(_this);\n    }, 500);\n    return false;\n  };\n  /**\n   * Bug task ID: EJ2-30797\n   * while resizing tooltip shows in wrong position\n   * Cause: Due to time lag in resize, tooltip did not remove until the component calculation\n   * Fix: Removed the tooltip element on resize\n   */\n\n\n  RangeNavigator.prototype.removeAllTooltip = function () {\n    if (this.tooltip.enable && this.tooltip.displayMode === 'Always') {\n      if (getElement(this.element.id + '_leftTooltip')) {\n        remove(getElement(this.element.id + '_leftTooltip'));\n      }\n\n      if (getElement(this.element.id + '_rightTooltip')) {\n        remove(getElement(this.element.id + '_rightTooltip'));\n      }\n    }\n  };\n  /**\n   * Handles the mouse move.\n   * @return {boolean}\n   * @private\n   */\n\n\n  RangeNavigator.prototype.mouseMove = function (e) {\n    this.mouseX = this.setMouseX(e);\n    this.notify(Browser.touchMoveEvent, e);\n    return false;\n  };\n  /**\n   * Handles the mouse leave.\n   * @return {boolean}\n   * @private\n   */\n\n\n  RangeNavigator.prototype.mouseLeave = function (e) {\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    this.mouseX = this.setMouseX(e);\n    this.notify(cancelEvent, e);\n    return false;\n  };\n  /**\n   * Handles the mouse click on range navigator.\n   * @return {boolean}\n   * @private\n   */\n\n\n  RangeNavigator.prototype.rangeOnMouseClick = function (e) {\n    this.notify('click', e);\n    return false;\n  };\n  /**\n   * Handles the print method for range navigator control.\n   */\n\n\n  RangeNavigator.prototype.print = function (id) {\n    new ExportUtils(this).print(id);\n  };\n  /**\n   * Handles the export method for range navigator control.\n   * @param type\n   * @param fileName\n   */\n\n\n  RangeNavigator.prototype.export = function (type, fileName, orientation, controls, width, height, isVertical) {\n    controls = controls ? controls : [this];\n    new ExportUtils(this).export(type, fileName, orientation, controls, width, height, isVertical);\n  };\n  /**\n   * Creating a background element to the svg object\n   */\n\n\n  RangeNavigator.prototype.renderChartBackground = function () {\n    var rect = new RectOption(this.element.id + '_ChartBorder', this.themeStyle.background, {\n      width: 0,\n      color: 'transparent'\n    }, 1, new Rect(0, 0, this.availableSize.width, this.availableSize.height));\n    this.svgObject.appendChild(this.renderer.drawRectangle(rect));\n  };\n  /**\n   * Handles the mouse down on range navigator.\n   * @return {boolean}\n   * @private\n   */\n\n\n  RangeNavigator.prototype.rangeOnMouseDown = function (e) {\n    this.mouseDownX = this.setMouseX(e);\n    this.notify(Browser.touchStartEvent, e);\n    return false;\n  };\n  /**\n   * Handles the mouse up.\n   * @return {boolean}\n   * @private\n   */\n\n\n  RangeNavigator.prototype.mouseEnd = function (e) {\n    this.mouseX = this.setMouseX(e);\n    this.notify(Browser.touchEndEvent, e);\n    return false;\n  }; // private rangeRightClick(event: MouseEvent | PointerEvent): boolean {\n  //     if (event.buttons === 2 || event.which === 0 || (<PointerEvent>event).pointerType === 'touch') {\n  //         event.preventDefault();\n  //         event.stopPropagation();\n  //         return false;\n  //     }\n  //     return true;\n  // }\n\n  /**\n   * To find mouse x, y for aligned range navigator element svg position\n   */\n\n\n  RangeNavigator.prototype.setMouseX = function (e) {\n    var pageX = e.type.indexOf('touch') > -1 ? e.changedTouches[0].clientX : e.clientX;\n    var rect = this.element.getBoundingClientRect();\n    var svgRect = !this.stockChart ? getElement(this.element.id + '_svg').getBoundingClientRect() : getElement(this.element.id).getBoundingClientRect();\n    return pageX - rect.left - Math.max(svgRect.left - rect.left, 0);\n  };\n  /** Wire, UnWire and Event releated calculation End here */\n\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @private\n   */\n\n\n  RangeNavigator.prototype.getPersistData = function () {\n    var keyEntity = ['loaded'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * OnProperty change method calling here\n   * @param newProp\n   * @param oldProp\n   */\n\n\n  RangeNavigator.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var renderer = false;\n    var refreshBounds = false;\n    var refreshRange = false;\n    this.animateSeries = false;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'width':\n        case 'height':\n        case 'navigatorBorder':\n        case 'enableGrouping':\n        case 'labelPosition':\n        case 'tickPosition':\n        case 'labelStyle':\n          refreshBounds = true;\n          break;\n\n        case 'series':\n        case 'enableRtl':\n        case 'dataSource':\n        case 'xName':\n        case 'yName':\n        case 'query':\n        case 'minimum':\n        case 'maximum':\n        case 'interval':\n        case 'intervalType':\n        case 'logBase':\n        case 'valueType':\n        case 'majorGridLines':\n        case 'minorGridLines':\n        case 'navigatorStyleSettings':\n        case 'labelFormat':\n        case 'skeleton':\n        case 'skeletonType':\n        case 'secondaryLabelAlignment':\n          renderer = true;\n          break;\n\n        case 'theme':\n          this.animateSeries = true;\n          break;\n\n        case 'locale':\n          _super.prototype.refresh.call(this);\n\n          break;\n\n        case 'value':\n          this.startValue = null;\n          this.endValue = null;\n          refreshRange = true;\n          break;\n      }\n    }\n\n    if (!refreshBounds && renderer) {\n      this.removeSvg();\n      this.chartSeries.xMin = Infinity;\n      this.chartSeries.xMax = -Infinity;\n      this.chartSeries.renderChart(this);\n    }\n\n    if (refreshBounds) {\n      this.removeSvg();\n      this.calculateBounds();\n      this.chartSeries.renderChart(this);\n    }\n\n    if (!refreshBounds && !renderer && refreshRange) {\n      this.setSliderValue();\n      this.rangeSlider.setSlider(this.startValue, this.endValue, true, this.tooltip.enable && this.tooltip.displayMode === 'Always');\n    }\n  };\n  /**\n   * To provide the array of modules needed for control rendering\n   * @return {ModuleDeclaration[]}\n   * @private\n   */\n\n\n  RangeNavigator.prototype.requiredModules = function () {\n    var _this = this;\n\n    var modules = [];\n    this.series.map(function (series) {\n      modules.push({\n        member: series.type + 'Series',\n        args: [_this]\n      });\n    });\n\n    if (this.periodSelectorSettings.periods.length > 0) {\n      modules.push({\n        member: 'PeriodSelector',\n        args: [this]\n      });\n    }\n\n    if (this.valueType !== 'Double') {\n      modules.push({\n        member: this.valueType,\n        args: [this]\n      });\n    }\n\n    if (this.tooltip.enable) {\n      modules.push({\n        member: 'RangeTooltip',\n        args: [this]\n      });\n    }\n\n    return modules;\n  };\n  /**\n   * To get the module name of the widget\n   */\n\n\n  RangeNavigator.prototype.getModuleName = function () {\n    return 'rangeNavigator';\n  };\n  /**\n   * To destroy the widget\n   * @method destroy\n   * @return {void}.\n   * @member of rangeNavigator\n   */\n\n\n  RangeNavigator.prototype.destroy = function () {\n    this.unWireEvents();\n    this.rangeSlider.destroy();\n\n    _super.prototype.destroy.call(this);\n\n    this.element.classList.remove('e-rangenavigator');\n  };\n\n  __decorate([Property(null)], RangeNavigator.prototype, \"width\", void 0);\n\n  __decorate([Property(null)], RangeNavigator.prototype, \"height\", void 0);\n\n  __decorate([Property(null)], RangeNavigator.prototype, \"dataSource\", void 0);\n\n  __decorate([Property(null)], RangeNavigator.prototype, \"xName\", void 0);\n\n  __decorate([Property(null)], RangeNavigator.prototype, \"yName\", void 0);\n\n  __decorate([Property()], RangeNavigator.prototype, \"query\", void 0);\n\n  __decorate([Collection([], RangeNavigatorSeries)], RangeNavigator.prototype, \"series\", void 0);\n\n  __decorate([Complex({}, RangeTooltipSettings)], RangeNavigator.prototype, \"tooltip\", void 0);\n\n  __decorate([Property(null)], RangeNavigator.prototype, \"minimum\", void 0);\n\n  __decorate([Property(null)], RangeNavigator.prototype, \"maximum\", void 0);\n\n  __decorate([Property(null)], RangeNavigator.prototype, \"interval\", void 0);\n\n  __decorate([Property('Auto')], RangeNavigator.prototype, \"intervalType\", void 0);\n\n  __decorate([Property('Hide')], RangeNavigator.prototype, \"labelIntersectAction\", void 0);\n\n  __decorate([Property(10)], RangeNavigator.prototype, \"logBase\", void 0);\n\n  __decorate([Property('Double')], RangeNavigator.prototype, \"valueType\", void 0);\n\n  __decorate([Property('Outside')], RangeNavigator.prototype, \"labelPosition\", void 0);\n\n  __decorate([Property(500)], RangeNavigator.prototype, \"animationDuration\", void 0);\n\n  __decorate([Property(false)], RangeNavigator.prototype, \"enableGrouping\", void 0);\n\n  __decorate([Property(false)], RangeNavigator.prototype, \"enableDeferredUpdate\", void 0);\n\n  __decorate([Property(false)], RangeNavigator.prototype, \"disableRangeSelector\", void 0);\n\n  __decorate([Property(false)], RangeNavigator.prototype, \"allowSnapping\", void 0);\n\n  __decorate([Property(false)], RangeNavigator.prototype, \"useGroupingSeparator\", void 0);\n\n  __decorate([Property()], RangeNavigator.prototype, \"groupBy\", void 0);\n\n  __decorate([Property('Outside')], RangeNavigator.prototype, \"tickPosition\", void 0);\n\n  __decorate([Complex(RangeNavigatorTheme.axisLabelFont, Font)], RangeNavigator.prototype, \"labelStyle\", void 0);\n\n  __decorate([Complex({}, MajorGridLines)], RangeNavigator.prototype, \"majorGridLines\", void 0);\n\n  __decorate([Complex({}, MajorTickLines)], RangeNavigator.prototype, \"majorTickLines\", void 0);\n\n  __decorate([Complex({}, StyleSettings)], RangeNavigator.prototype, \"navigatorStyleSettings\", void 0);\n\n  __decorate([Complex({}, PeriodSelectorSettings)], RangeNavigator.prototype, \"periodSelectorSettings\", void 0);\n\n  __decorate([Complex({\n    color: '#DDDDDD',\n    width: 1\n  }, Border)], RangeNavigator.prototype, \"navigatorBorder\", void 0);\n\n  __decorate([Property('Material')], RangeNavigator.prototype, \"theme\", void 0);\n\n  __decorate([Property([])], RangeNavigator.prototype, \"value\", void 0);\n\n  __decorate([Property('')], RangeNavigator.prototype, \"labelFormat\", void 0);\n\n  __decorate([Property('')], RangeNavigator.prototype, \"skeleton\", void 0);\n\n  __decorate([Property('DateTime')], RangeNavigator.prototype, \"skeletonType\", void 0);\n\n  __decorate([Property('Middle')], RangeNavigator.prototype, \"secondaryLabelAlignment\", void 0);\n\n  __decorate([Complex({\n    top: 5,\n    bottom: 5,\n    right: 5,\n    left: 5\n  }, Margin)], RangeNavigator.prototype, \"margin\", void 0);\n\n  __decorate([Event()], RangeNavigator.prototype, \"load\", void 0);\n\n  __decorate([Event()], RangeNavigator.prototype, \"loaded\", void 0);\n\n  __decorate([Event()], RangeNavigator.prototype, \"resized\", void 0);\n\n  __decorate([Event()], RangeNavigator.prototype, \"labelRender\", void 0);\n\n  __decorate([Event()], RangeNavigator.prototype, \"changed\", void 0);\n\n  __decorate([Event()], RangeNavigator.prototype, \"tooltipRender\", void 0);\n\n  __decorate([Event()], RangeNavigator.prototype, \"selectorRender\", void 0);\n\n  __decorate([Event()], RangeNavigator.prototype, \"beforePrint\", void 0);\n\n  RangeNavigator = __decorate([NotifyPropertyChanges], RangeNavigator);\n  return RangeNavigator;\n}(Component);\n\nexport { RangeNavigator };","map":null,"metadata":{},"sourceType":"module"}