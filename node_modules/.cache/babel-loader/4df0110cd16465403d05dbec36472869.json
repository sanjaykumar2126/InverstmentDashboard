{"ast":null,"code":"import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\nimport { INITIAL_ANIMATION_DURATION, BAR, START_SCALE } from '../constants';\nimport { X, Y } from '../../common/constants';\nimport { interpolateValue, setDefaultOptions } from '../../common';\n\nvar BarChartAnimation = function (superclass) {\n  function BarChartAnimation() {\n    superclass.apply(this, arguments);\n  }\n\n  if (superclass) BarChartAnimation.__proto__ = superclass;\n  BarChartAnimation.prototype = Object.create(superclass && superclass.prototype);\n  BarChartAnimation.prototype.constructor = BarChartAnimation;\n\n  BarChartAnimation.prototype.setup = function setup() {\n    var ref = this;\n    var element = ref.element;\n    var options = ref.options;\n    var bbox = element.bbox();\n\n    if (bbox) {\n      this.origin = options.origin;\n      var axis = options.vertical ? Y : X;\n      var fromScale = this.fromScale = new geom.Point(1, 1);\n      fromScale[axis] = START_SCALE;\n      element.transform(geom.transform().scale(fromScale.x, fromScale.y));\n    } else {\n      this.abort();\n    }\n  };\n\n  BarChartAnimation.prototype.step = function step(pos) {\n    var scaleX = interpolateValue(this.fromScale.x, 1, pos);\n    var scaleY = interpolateValue(this.fromScale.y, 1, pos);\n    this.element.transform(geom.transform().scale(scaleX, scaleY, this.origin));\n  };\n\n  BarChartAnimation.prototype.abort = function abort() {\n    superclass.prototype.abort.call(this);\n    this.element.transform(null);\n  };\n\n  return BarChartAnimation;\n}(draw.Animation);\n\nsetDefaultOptions(BarChartAnimation, {\n  duration: INITIAL_ANIMATION_DURATION\n});\ndraw.AnimationFactory.current.register(BAR, BarChartAnimation);\nexport default BarChartAnimation;","map":null,"metadata":{},"sourceType":"module"}