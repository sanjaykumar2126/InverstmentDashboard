{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { AnnotationBase } from '../../common/annotation/annotation';\nimport { appendElement, redrawElement } from '../../common/utils/helper';\nimport { createElement } from '@syncfusion/ej2-base';\n/**\n * `ChartAnnotation` module handles the annotation for chart.\n */\n\nvar ChartAnnotation =\n/** @class */\nfunction (_super) {\n  __extends(ChartAnnotation, _super);\n  /**\n   * Constructor for chart annotation.\n   * @private.\n   */\n\n\n  function ChartAnnotation(control, annotations) {\n    var _this = _super.call(this, control) || this;\n\n    _this.chart = control;\n    _this.annotations = annotations;\n    return _this;\n  }\n  /**\n   * Method to render the annotation for chart\n   * @param element\n   * @private\n   */\n\n\n  ChartAnnotation.prototype.renderAnnotations = function (element) {\n    var _this = this;\n\n    this.annotations = this.chart.annotations;\n    this.parentElement = redrawElement(this.chart.redraw, this.chart.element.id + '_Annotation_Collections') || createElement('div', {\n      id: this.chart.element.id + '_Annotation_Collections'\n    });\n    this.annotations.map(function (annotation, index) {\n      _this.processAnnotation(annotation, index, _this.parentElement);\n    });\n    appendElement(this.parentElement, element, this.chart.redraw);\n  };\n  /**\n   * To destroy the annotation.\n   * @return {void}\n   * @private\n   */\n\n\n  ChartAnnotation.prototype.destroy = function (control) {// Destroy method performed here\n  };\n  /**\n   * Get module name.\n   */\n\n\n  ChartAnnotation.prototype.getModuleName = function () {\n    // Returns te module name\n    return 'Annotation';\n  };\n\n  return ChartAnnotation;\n}(AnnotationBase);\n\nexport { ChartAnnotation };","map":null,"metadata":{},"sourceType":"module"}