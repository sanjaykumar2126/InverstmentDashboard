{"ast":null,"code":"import PlotAreaBase from './plotarea-base';\nimport AxisGroupRangeTracker from '../axis-group-range-tracker';\nimport { RadarLogarithmicAxis, RadarNumericAxis } from '../../core';\nimport { LOGARITHMIC } from '../constants';\nimport { getSpacing } from '../../common';\nimport { Y, CENTER } from '../../common/constants';\nvar DEFAULT_PADDING = 0.15;\n\nvar PolarPlotAreaBase = function (PlotAreaBase) {\n  function PolarPlotAreaBase() {\n    PlotAreaBase.apply(this, arguments);\n  }\n\n  if (PlotAreaBase) PolarPlotAreaBase.__proto__ = PlotAreaBase;\n  PolarPlotAreaBase.prototype = Object.create(PlotAreaBase && PlotAreaBase.prototype);\n  PolarPlotAreaBase.prototype.constructor = PolarPlotAreaBase;\n\n  PolarPlotAreaBase.prototype.initFields = function initFields() {\n    this.valueAxisRangeTracker = new AxisGroupRangeTracker();\n  };\n\n  PolarPlotAreaBase.prototype.render = function render() {\n    this.addToLegend(this.series);\n    this.createPolarAxis();\n    this.createCharts();\n    this.createValueAxis();\n  };\n\n  PolarPlotAreaBase.prototype.alignAxes = function alignAxes() {\n    var axis = this.valueAxis;\n    var range = axis.range();\n    var crossingValue = axis.options.reverse ? range.max : range.min;\n    var slot = axis.getSlot(crossingValue);\n    var center = this.polarAxis.getSlot(0).center;\n    var axisBox = axis.box.translate(center.x - slot.x1, center.y - slot.y1);\n    axis.reflow(axisBox);\n  };\n\n  PolarPlotAreaBase.prototype.createValueAxis = function createValueAxis() {\n    var tracker = this.valueAxisRangeTracker;\n    var defaultRange = tracker.query();\n    var axisOptions = this.valueAxisOptions({\n      roundToMajorUnit: false,\n      zIndex: -1\n    });\n    var axisType, axisDefaultRange;\n\n    if (axisOptions.type === LOGARITHMIC) {\n      axisType = RadarLogarithmicAxis;\n      axisDefaultRange = {\n        min: 0.1,\n        max: 1\n      };\n    } else {\n      axisType = RadarNumericAxis;\n      axisDefaultRange = {\n        min: 0,\n        max: 1\n      };\n    }\n\n    var range = tracker.query(name) || defaultRange || axisDefaultRange;\n\n    if (range && defaultRange) {\n      range.min = Math.min(range.min, defaultRange.min);\n      range.max = Math.max(range.max, defaultRange.max);\n    }\n\n    var valueAxis = new axisType(range.min, range.max, axisOptions, this.chartService);\n    this.valueAxis = valueAxis;\n    this.appendAxis(valueAxis);\n  };\n\n  PolarPlotAreaBase.prototype.reflowAxes = function reflowAxes() {\n    var ref = this;\n    var options = ref.options.plotArea;\n    var valueAxis = ref.valueAxis;\n    var polarAxis = ref.polarAxis;\n    var box = ref.box;\n    var defaultPadding = Math.min(box.width(), box.height()) * DEFAULT_PADDING;\n    var padding = getSpacing(options.padding || {}, defaultPadding);\n    var paddingBox = box.clone().unpad(padding);\n    var axisBox = paddingBox.clone();\n    axisBox.y2 = axisBox.y1 + Math.min(axisBox.width(), axisBox.height());\n    axisBox.align(paddingBox, Y, CENTER);\n    var valueAxisBox = axisBox.clone().shrink(0, axisBox.height() / 2);\n    polarAxis.reflow(axisBox);\n    valueAxis.reflow(valueAxisBox);\n    var heightDiff = valueAxis.lineBox().height() - valueAxis.box.height();\n    valueAxis.reflow(valueAxis.box.unpad({\n      top: heightDiff\n    }));\n    this.axisBox = axisBox;\n    this.alignAxes(axisBox);\n  };\n\n  PolarPlotAreaBase.prototype.backgroundBox = function backgroundBox() {\n    return this.box;\n  };\n\n  PolarPlotAreaBase.prototype.detachLabels = function detachLabels() {};\n\n  return PolarPlotAreaBase;\n}(PlotAreaBase);\n\nexport default PolarPlotAreaBase;","map":null,"metadata":{},"sourceType":"module"}