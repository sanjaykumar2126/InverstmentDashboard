{"ast":null,"code":"import { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * Selection Module handles the selection for chart.\n * @private\n */\n\nvar BaseSelection =\n/** @class */\nfunction () {\n  function BaseSelection(control) {\n    this.control = control;\n  }\n  /**\n   * To create selection styles for series\n   */\n\n\n  BaseSelection.prototype.seriesStyles = function () {\n    var seriesclass;\n    var style = document.getElementById(this.styleId);\n\n    if (isNullOrUndefined(style)) {\n      style = document.createElement('style');\n      style.setAttribute('id', this.styleId);\n\n      for (var _i = 0, _a = this.control.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n        seriesclass = series.selectionStyle || this.styleId + '_series_' + series.index;\n        style.innerHTML += series.selectionStyle ? '' : '.' + seriesclass + ' { } ';\n      }\n\n      style.innerHTML += '.' + this.unselected + ' { opacity:' + 0.3 + ';} ';\n      document.body.appendChild(style);\n    }\n  };\n  /**\n   * To concat indexes\n   */\n\n\n  BaseSelection.prototype.concatIndexes = function (userIndexes, localIndexes) {\n    return userIndexes.concat(localIndexes);\n  };\n  /**\n   * Selected points series visibility checking on legend click\n   */\n\n\n  BaseSelection.prototype.checkVisibility = function (selectedIndexes) {\n    var visible = false;\n    var uniqueSeries = [];\n\n    for (var _i = 0, selectedIndexes_1 = selectedIndexes; _i < selectedIndexes_1.length; _i++) {\n      var index = selectedIndexes_1[_i];\n\n      if (uniqueSeries.indexOf(index.series) === -1) {\n        uniqueSeries.push(index.series);\n      }\n    }\n\n    for (var _a = 0, uniqueSeries_1 = uniqueSeries; _a < uniqueSeries_1.length; _a++) {\n      var index = uniqueSeries_1[_a];\n\n      if (this.control.series[index].visible) {\n        visible = true;\n        break;\n      }\n    }\n\n    return visible;\n  };\n  /**\n   * To add svg element style class\n   * @private\n   */\n\n\n  BaseSelection.prototype.addSvgClass = function (element, className) {\n    var elementClassName = element.getAttribute('class') || '';\n    elementClassName += elementClassName !== '' ? ' ' : '';\n\n    if (elementClassName.indexOf(className) === -1) {\n      element.setAttribute('class', elementClassName + className);\n    }\n  };\n  /**\n   * To remove svg element style class\n   * @private\n   */\n\n\n  BaseSelection.prototype.removeSvgClass = function (element, className) {\n    var elementClassName = element.getAttribute('class') || '';\n\n    if (elementClassName.indexOf(className) > -1) {\n      element.setAttribute('class', elementClassName.replace(className, ''));\n    }\n  };\n  /**\n   * To get children from parent element\n   */\n\n\n  BaseSelection.prototype.getChildren = function (parent) {\n    var children = [];\n\n    for (var i = 0; i < parent.childNodes.length; i++) {\n      if (parent.childNodes[i].tagName !== 'defs') {\n        children.push(parent.childNodes[i]);\n      }\n    }\n\n    return children;\n  };\n\n  return BaseSelection;\n}();\n\nexport { BaseSelection };","map":null,"metadata":{},"sourceType":"module"}