{"ast":null,"code":"/**\n * @hidden\n */\nvar optionsReducer = function (currentState, action) {\n  if (action.chartCollectionIdxKey) {\n    return reducers.collectionConfigurationItem(currentState, action);\n  } else if (action.chartKey) {\n    return reducers.configurationItem(currentState, action);\n  } else {\n    return {};\n  }\n};\n/**\n * @hidden\n */\n\n\nvar themeReducer = function (currentState, action) {\n  if (action.type) {\n    switch (action.type) {\n      case 'set':\n        return reducers.themeItem(currentState, action);\n\n      case 'push':\n        return Object.assign(currentState, action.payload);\n\n      default:\n        return currentState;\n    }\n  } else {\n    return {};\n  }\n};\n/**\n * @hidden\n */\n\n\nvar observersReducer = function (currentState, action) {\n  if (action.type) {\n    switch (action.type) {\n      case 'add':\n        return currentState.concat([action.payload]);\n\n      case 'remove':\n        return currentState.filter(function (element) {\n          return element !== action.payload;\n        });\n\n      default:\n        return currentState;\n    }\n  } else {\n    return [];\n  }\n};\n/**\n * @hidden\n */\n\n\nvar reducers = {\n  configurationItem: function (currentState, action) {\n    var _a;\n\n    return Object.assign(currentState, (_a = {}, _a[action.chartKey] = action.payload, _a));\n  },\n  collectionConfigurationItem: function (currentState, action) {\n    var _a;\n\n    var inCollection = false;\n\n    var _b = action.chartCollectionIdxKey.split('_'),\n        collectionName = _b[0],\n        collectionIdx = _b[1];\n\n    var collection = currentState[collectionName].map(function (item, index) {\n      if (parseInt(collectionIdx, 10) === index) {\n        inCollection = true;\n        return action.payload;\n      }\n\n      return item;\n    });\n\n    if (inCollection === false) {\n      collection.splice(parseInt(collectionIdx, 10), 0, action.payload);\n    }\n\n    return Object.assign(currentState, (_a = {}, _a[collectionName] = collection, _a));\n  },\n  themeItem: function (currentState, action) {\n    var store = {};\n    var nextStore = Object.assign(store, currentState);\n    var _a = action.payload,\n        field = _a.field,\n        value = _a.value;\n    var parts = field.split('.');\n    var key = parts.shift();\n\n    while (parts.length > 0) {\n      store = store[key] = store[key] || {};\n      key = parts.shift();\n    }\n\n    store[key] = value;\n    return nextStore;\n  }\n};\nexport { optionsReducer, themeReducer, observersReducer };","map":null,"metadata":{},"sourceType":"module"}