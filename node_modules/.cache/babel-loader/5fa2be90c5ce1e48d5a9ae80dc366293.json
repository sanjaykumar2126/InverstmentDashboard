{"ast":null,"code":"import { EventHandler } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { removeElement, RectOption, PolygonOption, createTooltip, minMax, getElement } from '../../common/utils/helper';\nimport { textElement } from '../../common/utils/helper';\nimport { PathOption, Rect, measureText, TextOption, SvgRenderer } from '@syncfusion/ej2-svg-base';\nimport { zoomComplete } from '../../common/model/constants';\n/**\n * Zooming Toolkit created here\n * @private\n */\n\nvar Toolkit =\n/** @class */\nfunction () {\n  /** @private */\n  function Toolkit(chart) {\n    this.iconRectOverFill = 'transparent';\n    this.iconRectSelectionFill = 'transparent';\n    this.chart = chart;\n    this.elementId = chart.element.id;\n    this.chart.svgRenderer = new SvgRenderer(this.elementId);\n    this.selectionColor = chart.theme === 'Bootstrap4' ? '#FFFFFF' : '#ff4081';\n    this.fillColor = chart.theme === 'Bootstrap4' ? '#495057' : '#737373';\n    this.iconRectOverFill = chart.theme === 'Bootstrap4' ? '#5A6268' : this.iconRectOverFill;\n    this.iconRectSelectionFill = chart.theme === 'Bootstrap4' ? '#5B6269' : this.iconRectSelectionFill;\n    this.iconRect = chart.theme === 'Bootstrap4' ? new Rect(-5, -5, 26, 26) : new Rect(0, 0, 16, 16);\n  }\n  /**\n   * To create the pan button.\n   * @return {void}\n   * @private\n   */\n\n\n  Toolkit.prototype.createPanButton = function (childElement, parentElement, chart) {\n    var render = this.chart.svgRenderer;\n    var fillColor = this.chart.zoomModule.isPanning ? this.selectionColor : this.fillColor;\n    var direction = 'M5,3h2.3L7.275,5.875h1.4L8.65,3H11L8,0L5,3z M3,11V8.7l2.875,0.025v-1.4L3,7.35V5L0,8L3,';\n    direction += '11z M11,13H8.7l0.025-2.875h-1.4L7.35,13H5l3,3L11,13z M13,5v2.3l-2.875-0.025v1.4L13,8.65V11l3-3L13,5z';\n    childElement.id = this.elementId + '_Zooming_Pan';\n    childElement.setAttribute('aria-label', this.chart.getLocalizedLabel('Pan'));\n    this.panElements = childElement;\n    childElement.appendChild(render.drawRectangle(new RectOption(this.elementId + '_Zooming_Pan_1', 'transparent', {}, 1, this.iconRect)));\n    childElement.appendChild(render.drawPath(new PathOption(this.elementId + '_Zooming_Pan_2', fillColor, null, null, 1, null, direction), null));\n    parentElement.appendChild(childElement);\n    this.wireEvents(childElement, this.pan);\n  };\n  /**\n   * To create the zoom button.\n   * @return {void}\n   * @private\n   */\n\n\n  Toolkit.prototype.createZoomButton = function (childElement, parentElement, chart) {\n    var render = this.chart.svgRenderer;\n    var fillColor = this.chart.zoomModule.isPanning ? this.fillColor : this.selectionColor;\n    var rectColor = this.chart.zoomModule.isPanning ? 'transparent' : this.iconRectSelectionFill;\n    var direction = 'M0.001,14.629L1.372,16l4.571-4.571v-0.685l0.228-0.274c1.051,0.868,2.423,1.417,3.885,1.417c3.291,0,';\n    direction += '5.943-2.651,5.943-5.943S13.395,0,10.103,0S4.16,2.651,4.16,5.943c0,1.508,0.503,2.834,1.417,3.885l-0.274,0.228H4.571';\n    direction = direction + 'L0.001,14.629L0.001,14.629z M5.943,5.943c0-2.285,1.828-4.114,4.114-4.114s4.114,1.828,4.114,';\n    childElement.id = this.elementId + '_Zooming_Zoom';\n    childElement.setAttribute('aria-label', this.chart.getLocalizedLabel('Zoom'));\n    this.zoomElements = childElement;\n    this.selectedID = this.chart.zoomModule.isPanning ? this.chart.element.id + '_Zooming_Pan_1' : this.elementId + '_Zooming_Zoom_1';\n    childElement.appendChild(render.drawRectangle(new RectOption(this.elementId + '_Zooming_Zoom_1', rectColor, {}, 1, this.iconRect)));\n    childElement.appendChild(render.drawPath(new PathOption(this.elementId + '_Zooming_Zoom_3', fillColor, null, null, 1, null, direction + '4.114s-1.828,4.114-4.114,4.114S5.943,8.229,5.943,5.943z')));\n    parentElement.appendChild(childElement);\n    this.wireEvents(childElement, this.zoom);\n  };\n  /**\n   * To create the ZoomIn button.\n   * @return {void}\n   * @private\n   */\n\n\n  Toolkit.prototype.createZoomInButton = function (childElement, parentElement, chart) {\n    var render = this.chart.svgRenderer;\n    var fillColor = this.fillColor;\n    var direction = 'M10.103,0C6.812,0,4.16,2.651,4.16,5.943c0,1.509,0.503,2.834,1.417,3.885l-0.274,0.229H4.571L0,';\n    direction += '14.628l0,0L1.372,16l4.571-4.572v-0.685l0.228-0.275c1.052,0.868,2.423,1.417,3.885,1.417c3.291,0,5.943-2.651,';\n    direction += '5.943-5.943C16,2.651,13.395,0,10.103,0z M10.058,10.058c-2.286,0-4.114-1.828-4.114-4.114c0-2.286,1.828-4.114,';\n    childElement.id = this.elementId + '_Zooming_ZoomIn';\n    childElement.setAttribute('aria-label', this.chart.getLocalizedLabel('ZoomIn'));\n    var polygonDirection = '12.749,5.466 10.749,5.466 10.749,3.466 9.749,3.466 9.749,5.466 7.749,5.466 7.749,6.466';\n    childElement.appendChild(render.drawRectangle(new RectOption(this.elementId + '_Zooming_ZoomIn_1', 'transparent', {}, 1, this.iconRect)));\n    childElement.appendChild(render.drawPath(new PathOption(this.elementId + '_Zooming_ZoomIn_2', fillColor, null, null, 1, null, direction + '4.114-4.114c2.286,0,4.114,1.828,4.114,4.114C14.172,8.229,12.344,10.058,10.058,10.058z'), null));\n    childElement.appendChild(render.drawPolygon(new PolygonOption(this.elementId + '_Zooming_ZoomIn_3', polygonDirection + ' 9.749,6.466 9.749,8.466 10.749,8.466 10.749,6.466 12.749,6.466', fillColor)));\n    this.zoomInElements = childElement;\n    this.elementOpacity = chart.zoomModule.isPanning ? '0.2' : '1';\n    childElement.setAttribute('opacity', this.elementOpacity);\n    parentElement.appendChild(childElement);\n    this.wireEvents(childElement, this.zoomIn);\n  };\n  /**\n   * To create the ZoomOut button.\n   * @return {void}\n   * @private\n   */\n\n\n  Toolkit.prototype.createZoomOutButton = function (childElement, parentElement, chart) {\n    var render = this.chart.svgRenderer;\n    var fillColor = this.fillColor;\n    var direction = 'M0,14.622L1.378,16l4.533-4.533v-0.711l0.266-0.266c1.022,0.889,2.4,1.422,3.866,';\n    direction += '1.422c3.289,0,5.955-2.666,5.955-5.955S13.333,0,10.044,0S4.089,2.667,4.134,5.911c0,1.466,0.533,2.844,';\n    direction += '1.422,3.866l-0.266,0.266H4.578L0,14.622L0,14.622z M5.911,5.911c0-2.311,1.822-4.133,4.133-4.133s4.133,1.822,4.133,';\n    childElement.id = this.elementId + '_Zooming_ZoomOut';\n    childElement.setAttribute('aria-label', this.chart.getLocalizedLabel('ZoomOut'));\n    childElement.appendChild(render.drawRectangle(new RectOption(this.elementId + '_Zooming_ZoomOut_1', 'transparent', {}, 1, this.iconRect)));\n    childElement.appendChild(render.drawPath(new PathOption(this.elementId + '_Zooming_ZoomOut_2', fillColor, null, null, 1, null, direction + '4.133s-1.866,4.133-4.133,4.133S5.911,8.222,5.911,5.911z M12.567,6.466h-5v-1h5V6.466z'), null));\n    this.zoomOutElements = childElement;\n    this.elementOpacity = chart.zoomModule.isPanning ? '0.2' : '1';\n    childElement.setAttribute('opacity', this.elementOpacity);\n    parentElement.appendChild(childElement);\n    this.wireEvents(childElement, this.zoomOut);\n  };\n  /**\n   * To create the Reset button.\n   * @return {void}\n   * @private\n   */\n\n\n  Toolkit.prototype.createResetButton = function (childElement, parentElement, chart, isDevice) {\n    var render = this.chart.svgRenderer;\n    var fillColor = this.fillColor;\n    var size;\n    var direction = 'M12.364,8h-2.182l2.909,3.25L16,8h-2.182c0-3.575-2.618-6.5-5.818-6.5c-1.128,0-2.218,0.366-3.091,';\n    direction += '1.016l1.055,1.178C6.581,3.328,7.272,3.125,8,3.125C10.4,3.125,12.363,5.319,12.364,8L12.364,8z M11.091,';\n    direction += '13.484l-1.055-1.178C9.419,12.672,8.728,12.875,8,12.875c-2.4,0-4.364-2.194-4.364-4.875h2.182L2.909,4.75L0,8h2.182c0,';\n    childElement.id = this.elementId + '_Zooming_Reset';\n    childElement.setAttribute('aria-label', this.chart.getLocalizedLabel('Reset'));\n\n    if (!isDevice) {\n      childElement.appendChild(render.drawRectangle(new RectOption(this.elementId + '_Zooming_Reset_1', 'transparent', {}, 1, this.iconRect)));\n      childElement.appendChild(render.drawPath(new PathOption(this.elementId + '_Zooming_Reset_2', fillColor, null, null, 1, null, direction + '3.575,2.618,6.5,5.818,6.5C9.128,14.5,10.219,14.134,11.091,13.484L11.091,13.484z'), null));\n    } else {\n      size = measureText(this.chart.getLocalizedLabel('ResetZoom'), {\n        size: '12px'\n      });\n      childElement.appendChild(render.drawRectangle(new RectOption(this.elementId + '_Zooming_Reset_1', 'transparent', {}, 1, new Rect(0, 0, size.width, size.height))));\n      textElement(chart.renderer, new TextOption(this.elementId + '_Zooming_Reset_2', 0 + size.width / 2, 0 + size.height * 3 / 4, 'middle', this.chart.getLocalizedLabel('ResetZoom'), 'rotate(0,' + 0 + ',' + 0 + ')', 'auto'), {\n        size: '12px'\n      }, 'black', childElement);\n    }\n\n    parentElement.appendChild(childElement);\n    this.wireEvents(childElement, this.reset);\n  };\n  /**\n   * To bind events.\n   * @return {void}\n   * @private\n   */\n\n\n  Toolkit.prototype.wireEvents = function (element, process) {\n    EventHandler.add(element, 'mousedown touchstart', process, this);\n    EventHandler.add(element, 'mouseover', this.showTooltip, this);\n    EventHandler.add(element, 'mouseout', this.removeTooltip, this);\n  };\n  /**\n   * To show tooltip.\n   * @return {void}\n   * @private\n   */\n\n\n  Toolkit.prototype.showTooltip = function (event) {\n    var text = event.currentTarget.id.split('_Zooming_')[1];\n    var left = event.pageX - (measureText(text, {\n      size: '10px'\n    }).width + 5);\n    var rect = getElement(event.currentTarget.id + '_1');\n    var icon2 = getElement(event.currentTarget.id + '_2');\n    var icon3 = getElement(event.currentTarget.id + '_3');\n\n    if (rect) {\n      this.hoveredID = rect.id;\n      rect.setAttribute('fill', this.iconRectOverFill);\n    }\n\n    if (icon2) {\n      icon2.setAttribute('fill', this.selectionColor);\n    }\n\n    if (icon3) {\n      icon3.setAttribute('fill', this.selectionColor);\n    }\n\n    if (!this.chart.isTouch) {\n      createTooltip('EJ2_Chart_ZoomTip', this.chart.getLocalizedLabel(text), event.pageY + 10, left, '10px');\n    }\n  };\n  /** @private */\n  // tslint:disable\n\n\n  Toolkit.prototype.removeTooltip = function () {\n    if (getElement(this.hoveredID)) {\n      var rectColor = this.chart.zoomModule.isPanning ? this.hoveredID.indexOf('_Pan_') > -1 ? this.iconRectSelectionFill : 'transparent' : this.hoveredID.indexOf('_Zoom_') > -1 ? this.iconRectSelectionFill : 'transparent';\n      getElement(this.hoveredID).setAttribute('fill', rectColor);\n    }\n\n    var icon2 = this.hoveredID ? getElement(this.hoveredID.replace('_1', '_2')) : null;\n    var icon3 = this.hoveredID ? getElement(this.hoveredID.replace('_1', '_3')) : null;\n\n    if (icon2) {\n      var iconColor = this.chart.zoomModule.isPanning ? this.hoveredID.indexOf('_Pan_') > -1 ? this.selectionColor : this.fillColor : this.hoveredID.indexOf('_Zoom_') > -1 ? this.selectionColor : this.fillColor;\n      icon2.setAttribute('fill', iconColor);\n    }\n\n    if (icon3) {\n      var iconColor = this.chart.zoomModule.isPanning ? this.fillColor : this.hoveredID.indexOf('_Zoom_') > -1 ? this.selectionColor : this.fillColor;\n      icon3.setAttribute('fill', iconColor);\n    }\n\n    removeElement('EJ2_Chart_ZoomTip');\n  }; // Toolkit events function calculation here.\n\n  /** @private */\n\n\n  Toolkit.prototype.reset = function () {\n    var chart = this.chart;\n\n    if (!chart.zoomModule.isDevice) {\n      remove(chart.zoomModule.toolkitElements);\n    }\n\n    var argsData;\n    this.removeTooltip();\n    chart.svgObject.setAttribute('cursor', 'auto');\n    chart.axisCollections.forEach(function (axis) {\n      argsData = {\n        cancel: false,\n        name: zoomComplete,\n        axis: axis,\n        previousZoomFactor: axis.zoomFactor,\n        previousZoomPosition: axis.zoomPosition,\n        currentZoomFactor: 1,\n        currentZoomPosition: 0\n      };\n      axis.zoomFactor = 1;\n      axis.zoomPosition = 0;\n\n      if (axis.zoomingScrollBar) {\n        axis.zoomingScrollBar.isScrollUI = false;\n      }\n\n      chart.trigger(zoomComplete, argsData);\n\n      if (!argsData.cancel) {\n        axis.zoomFactor = argsData.currentZoomFactor;\n        axis.zoomPosition = argsData.currentZoomPosition;\n      }\n    });\n    chart.disableTrackTooltip = false;\n    chart.zoomModule.isZoomed = chart.zoomModule.isPanning = chart.isChartDrag = chart.delayRedraw = false;\n    chart.zoomModule.touchMoveList = chart.zoomModule.touchStartList = [];\n    chart.zoomModule.pinchTarget = null;\n    chart.removeSvg();\n    chart.refreshAxis();\n    chart.refreshBound();\n    this.elementOpacity = '1';\n    return false;\n  };\n\n  Toolkit.prototype.zoomIn = function (e) {\n    this.zoomInOutCalculation(1, this.chart, this.chart.axisCollections, this.chart.zoomSettings.mode);\n    return false;\n  };\n\n  Toolkit.prototype.zoomOut = function (e) {\n    this.zoomInOutCalculation(-1, this.chart, this.chart.axisCollections, this.chart.zoomSettings.mode);\n    return false;\n  };\n\n  Toolkit.prototype.zoom = function (e) {\n    this.chart.zoomModule.isPanning = false;\n    var zoomModule = this.chart.zoomModule;\n    this.elementOpacity = '1';\n    this.chart.svgObject.setAttribute('cursor', 'auto');\n    this.zoomInElements.setAttribute('opacity', this.elementOpacity);\n    this.zoomOutElements.setAttribute('opacity', this.elementOpacity);\n    this.applySelection(this.zoomElements.childNodes, this.selectionColor);\n    this.applySelection(this.panElements.childNodes, '#737373');\n\n    if (getElement(this.selectedID)) {\n      getElement(this.selectedID).setAttribute('fill', 'transparent');\n    }\n\n    this.selectedID = this.chart.element.id + '_Zooming_Zoom_1';\n    getElement(this.selectedID).setAttribute('fill', this.iconRectSelectionFill);\n    return false;\n  };\n  /** @private */\n\n\n  Toolkit.prototype.pan = function () {\n    var element;\n    this.chart.zoomModule.isPanning = true;\n    this.chart.svgObject.setAttribute('cursor', 'pointer');\n    this.elementOpacity = '0.2';\n    element = this.zoomInElements ? this.zoomInElements.setAttribute('opacity', this.elementOpacity) : null;\n    element = this.zoomOutElements ? this.zoomOutElements.setAttribute('opacity', this.elementOpacity) : null;\n    element = this.panElements ? this.applySelection(this.panElements.childNodes, this.selectionColor) : null;\n    element = this.zoomElements ? this.applySelection(this.zoomElements.childNodes, '#737373') : null;\n\n    if (getElement(this.selectedID)) {\n      getElement(this.selectedID).setAttribute('fill', 'transparent');\n    }\n\n    this.selectedID = this.chart.element.id + '_Zooming_Pan_1';\n    getElement(this.selectedID).setAttribute('fill', this.iconRectSelectionFill);\n    return false;\n  };\n\n  Toolkit.prototype.zoomInOutCalculation = function (scale, chart, axes, mode) {\n    if (!chart.zoomModule.isPanning && this.elementOpacity !== '0.2') {\n      var zoomFactor_1;\n      var zoomPosition_1;\n      var cumulative_1;\n      chart.disableTrackTooltip = true;\n      chart.delayRedraw = true;\n      var argsData_1;\n      axes.forEach(function (axis) {\n        argsData_1 = {\n          cancel: false,\n          name: zoomComplete,\n          axis: axis,\n          previousZoomFactor: axis.zoomFactor,\n          previousZoomPosition: axis.zoomPosition,\n          currentZoomFactor: axis.zoomFactor,\n          currentZoomPosition: axis.zoomPosition\n        };\n\n        if (axis.orientation === 'Horizontal' && mode !== 'Y' || axis.orientation === 'Vertical' && mode !== 'X') {\n          cumulative_1 = Math.max(Math.max(1 / minMax(axis.zoomFactor, 0, 1), 1) + 0.25 * scale, 1);\n          zoomFactor_1 = cumulative_1 === 1 ? 1 : minMax(1 / cumulative_1, 0, 1);\n          zoomPosition_1 = cumulative_1 === 1 ? 0 : axis.zoomPosition + (axis.zoomFactor - zoomFactor_1) * 0.5;\n\n          if (axis.zoomPosition !== zoomPosition_1 || axis.zoomFactor !== zoomFactor_1) {\n            zoomFactor_1 = zoomPosition_1 + zoomFactor_1 > 1 ? 1 - zoomPosition_1 : zoomFactor_1;\n          }\n\n          argsData_1.currentZoomFactor = zoomFactor_1;\n          argsData_1.currentZoomPosition = zoomPosition_1;\n          chart.trigger(zoomComplete, argsData_1);\n\n          if (!argsData_1.cancel) {\n            axis.zoomFactor = argsData_1.currentZoomFactor;\n            axis.zoomPosition = argsData_1.currentZoomPosition;\n          }\n        }\n      });\n    }\n  };\n\n  Toolkit.prototype.applySelection = function (elements, color) {\n    for (var i = 1, length_1 = elements.length; i < length_1; i++) {\n      elements[i].setAttribute('fill', color);\n    }\n  };\n\n  return Toolkit;\n}();\n\nexport { Toolkit };","map":null,"metadata":{},"sourceType":"module"}