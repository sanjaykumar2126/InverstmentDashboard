{"ast":null,"code":"import Bar from '../bar-chart/bar';\nimport BarLabel from '../bar-chart/bar-label';\nimport { deepExtend, getTemplate } from '../../common';\n\nvar RangeBar = function (Bar) {\n  function RangeBar() {\n    Bar.apply(this, arguments);\n  }\n\n  if (Bar) RangeBar.__proto__ = Bar;\n  RangeBar.prototype = Object.create(Bar && Bar.prototype);\n  RangeBar.prototype.constructor = RangeBar;\n\n  RangeBar.prototype.createLabel = function createLabel() {\n    var labels = this.options.labels;\n    var fromOptions = deepExtend({}, labels, labels.from);\n    var toOptions = deepExtend({}, labels, labels.to);\n\n    if (fromOptions.visible) {\n      this.labelFrom = this._createLabel(fromOptions);\n      this.append(this.labelFrom);\n    }\n\n    if (toOptions.visible) {\n      this.labelTo = this._createLabel(toOptions);\n      this.append(this.labelTo);\n    }\n  };\n\n  RangeBar.prototype._createLabel = function _createLabel(options) {\n    var labelTemplate = getTemplate(options);\n    var pointData = this.pointData();\n    var labelText;\n\n    if (labelTemplate) {\n      labelText = labelTemplate(pointData);\n    } else {\n      labelText = this.formatValue(options.format);\n    }\n\n    return new BarLabel(labelText, deepExtend({\n      vertical: this.options.vertical\n    }, options), pointData);\n  };\n\n  RangeBar.prototype.reflow = function reflow(targetBox) {\n    this.render();\n    var ref = this;\n    var labelFrom = ref.labelFrom;\n    var labelTo = ref.labelTo;\n    var value = ref.value;\n    this.box = targetBox;\n\n    if (labelFrom) {\n      labelFrom.options.aboveAxis = value.from > value.to;\n      labelFrom.reflow(targetBox);\n    }\n\n    if (labelTo) {\n      labelTo.options.aboveAxis = value.to > value.from;\n      labelTo.reflow(targetBox);\n    }\n\n    if (this.note) {\n      this.note.reflow(targetBox);\n    }\n  };\n\n  return RangeBar;\n}(Bar);\n\nRangeBar.prototype.defaults = deepExtend({}, RangeBar.prototype.defaults, {\n  labels: {\n    format: \"{0} - {1}\"\n  },\n  tooltip: {\n    format: \"{1}\"\n  }\n});\nexport default RangeBar;","map":null,"metadata":{},"sourceType":"module"}