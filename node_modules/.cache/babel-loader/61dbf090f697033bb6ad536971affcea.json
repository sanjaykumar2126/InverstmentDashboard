{"ast":null,"code":"/**\n * Bundle of @devexpress/dx-chart-core\n * Generated: 2019-09-16\n * Version: 2.0.5\n * License: https://js.devexpress.com/Licensing\n */\nimport { extent } from 'd3-array';\nimport { scaleLinear as scaleLinear$1, scaleBand as scaleBand$1 } from 'd3-scale';\nimport { area, line, curveMonotoneX, curveMonotoneY, pie, symbol, symbolCircle, arc, stack } from 'd3-shape';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n}\n/** @internal */\n\n\nvar HORIZONTAL = 'horizontal';\n/** @internal */\n\nvar VERTICAL = 'vertical';\n/** @internal */\n\nvar TOP = 'top';\n/** @internal */\n\nvar BOTTOM = 'bottom';\n/** @internal */\n\nvar LEFT = 'left';\n/** @internal */\n\nvar RIGHT = 'right';\n/** @internal */\n\nvar MIDDLE = 'middle';\n/** @internal */\n\nvar END = 'end';\n/** @internal */\n\nvar START = 'start';\n/** @internal */\n\nvar LINEAR = 'linear';\n/** @internal */\n\nvar BAND = 'band';\n/** @internal */\n\nvar ARGUMENT_DOMAIN = 'argument-domain';\n/** @internal */\n\nvar VALUE_DOMAIN = 'value-domain';\n/** @internal */\n\nvar HOVERED = 'hovered';\n/** @internal */\n\nvar SELECTED = 'selected';\n/** @internal */\n\nvar scaleLinear = scaleLinear$1;\n/** @internal */\n\nvar scaleBand = function () {\n  return scaleBand$1().paddingInner(0.3).paddingOuter(0.15);\n};\n/** @internal */\n\n\nvar isHorizontal = function (name, rotated) {\n  return name === ARGUMENT_DOMAIN === !rotated;\n}; // tslint:disable-next-line: ban-types\n\n\nvar makeScaleHelper = function (linear, band) {\n  var func = function (scale) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var choosen = 'bandwidth' in scale ? band : linear;\n    return choosen.apply(void 0, __spread([scale], args));\n  };\n\n  return func;\n};\n\nvar getLinearScaleWidth = function (_) {\n  return 0;\n};\n\nvar getBandScaleWidth = function (scale) {\n  return scale.bandwidth();\n};\n/** @internal */\n\n\nvar getWidth = makeScaleHelper(getLinearScaleWidth, getBandScaleWidth);\n/** @internal */\n\nvar getValueDomainName = function (name) {\n  return name || VALUE_DOMAIN;\n};\n\nvar floatsEqual = function (a, b) {\n  return Math.abs(a - b) < Number.EPSILON;\n};\n/** @internal */\n\n\nvar rangesEqual = function (r1, r2) {\n  return floatsEqual(r1[0], r2[0]) && floatsEqual(r1[1], r2[1]);\n};\n\nvar wrapLinearScale = function (scale) {\n  return scale;\n};\n\nvar wrapBandScale = function (scale) {\n  var ret = function (value) {\n    return scale(value) + scale.bandwidth() / 2;\n  };\n\n  Object.assign(ret, scale);\n  return ret;\n};\n\nvar wrapScale = makeScaleHelper(wrapLinearScale, wrapBandScale);\n/** @internal */\n\nvar makeScale = function (_a, range) {\n  var factory = _a.factory,\n      domain = _a.domain;\n  var scale = (factory || scaleLinear)().domain(domain).range(range);\n  return wrapScale(scale);\n}; // It is implicitly supposed that Chart can accept any d3 scale. It is wrong.\n// The followings notes show that. d3 scales are not seamlessly interchangeable themselves\n// (i.e. band scale has no \"invert\", continuous scale has no \"bandwidth\").\n// We have to use \"adapters\" to mitigate the differences.\n// Hence Chart can actually accept any object that matches \"adapter\" interface.\n// TODO: We should update reference accordingly. There might be breaking changes though.\n\n\nvar scaleLinearBounds = function (scale, bounds) {\n  return bounds.map(scale);\n}; // There is an issue - when range is \"inverted\" values are scaled incorrectly.\n//   scaleBand().domain(['a', 'b', 'c']).range([0, 60])('b') === 20\n//   scaleBand().domain(['a', 'b', 'c']).range([60, 0])('b') === 20 (should be 40)\n\n\nvar scaleBandBounds = function (scale, bounds) {\n  var cleanScale = scale.copy().paddingInner(0).paddingOuter(0);\n  var fullRange = scale.range();\n  var sign = Math.sign(fullRange[1] - fullRange[0]);\n  return sign >= 0 ? [cleanScale(bounds[0]), cleanScale(bounds[1]) + cleanScale.bandwidth()] : [cleanScale(bounds[0]) + cleanScale.bandwidth(), cleanScale(bounds[1])];\n};\n\nvar moveLinearScaleBounds = function (scale, bounds, delta) {\n  var fullRange = scale.range();\n  var sign = Math.sign(fullRange[1] - fullRange[0]);\n  var range = scaleLinearBounds(scale, bounds);\n  var r0 = range[0] + delta;\n  var r1 = range[1] + delta; // Check if new range is outside of the left border.\n\n  if (Math.sign(r0 - fullRange[0]) !== sign) {\n    r0 = fullRange[0];\n    r1 = r0 + range[1] - range[0];\n  } // Check if new range is outside of the right border.\n\n\n  if (Math.sign(fullRange[1] - r1) !== sign) {\n    r1 = fullRange[1];\n    r0 = r1 - range[1] + range[0];\n  }\n\n  var newBounds = [scale.invert(r0), scale.invert(r1)];\n  return rangesEqual(bounds, newBounds) ? bounds : newBounds;\n}; // This is pointer \"delta\" processing specific for \"band\" scale.\n// If pointer delta is significantly smaller than band size (0.3) then movement should be skipped\n// and current delta should be added to a next one (from a new \"move\" event).\n// Now there is no code that accumulates deltas.\n// In order to allow band scrolling at least somehow the following is applied - if pointer delta\n// is at least greater than 30 pixel then minimal movement is performed.\n// TODO: Make proper delta accumulation!\n\n\nvar adjustBandScaleMoveStep = function (delta, step) {\n  var ratio = Math.abs(delta / step);\n  var sign = Math.sign(delta / step);\n\n  if (ratio >= 0.5) {\n    return sign * Math.round(ratio);\n  }\n\n  if (ratio >= 0.3) {\n    return sign;\n  }\n\n  if (Math.abs(delta) > 30) {\n    return sign;\n  }\n\n  return 0;\n}; // Band case is processed separately to preserve categories count in the bounds range.\n// If common inversion mechanism is used start and end bounds cannot be inverted independently\n// because of rounding issues which may add or remove categories to the new bounds.\n\n\nvar moveBandScaleBounds = function (scale, bounds, delta) {\n  var domain = scale.domain();\n  var fullRange = scale.range();\n  var step = (fullRange[1] - fullRange[0]) / domain.length;\n  var rangeStep = adjustBandScaleMoveStep(delta, step);\n\n  if (rangeStep === 0) {\n    return bounds;\n  }\n\n  var range = scaleBounds(scale, bounds);\n  var range0 = Math.round((range[0] - fullRange[0]) / step);\n  var range1 = range0 + Math.round((range[1] - range[0]) / step) - 1;\n  var new0 = range0 + rangeStep;\n  var new1 = range1 + rangeStep;\n\n  if (new0 < 0) {\n    new0 = 0;\n    new1 = new0 + range1 - range0;\n  }\n\n  if (new1 > domain.length - 1) {\n    new1 = domain.length - 1;\n    new0 = new1 - range1 + range0;\n  }\n\n  if (new0 === range0 || new1 === range1) {\n    return bounds;\n  }\n\n  return [domain[new0], domain[new1]];\n}; // Defines how much linear scale can be zoomed it.\n// I.e. if original scale domain has size of 1, then fully zoomed scale domain has size\n// of 1 / LINEAR_SCALE_ZOOMING_THRESHOLD.\n\n\nvar LINEAR_SCALE_ZOOMING_THRESHOLD = 1000;\n\nvar growLinearScaleBounds = function (scale, bounds, delta, anchor) {\n  var fullRange = scale.range();\n  var minRangeThreshold = (fullRange[1] - fullRange[0]) / LINEAR_SCALE_ZOOMING_THRESHOLD;\n  var sign = Math.sign(fullRange[1] - fullRange[0]);\n  var range = scaleBounds(scale, bounds); // If zooming in and initial range is already too small then do nothing.\n\n  if (delta > 0 && Math.abs(range[1] - range[0]) <= Math.abs(minRangeThreshold)) {\n    return bounds;\n  } // If zooming out and initial range is already too large then do nothing.\n\n\n  if (delta < 0 && Math.abs(range[1] - range[0]) >= Math.abs(fullRange[1] - fullRange[0])) {\n    return bounds;\n  }\n\n  var t = Math.abs((anchor - range[0]) / (range[1] - range[0]));\n  var r0 = range[0] + sign * delta * 2 * t;\n  var r1 = range[1] - sign * delta * 2 * (1 - t); // If new range is outside of the left border then clamp it.\n\n  if (Math.sign(r0 - fullRange[0]) !== sign) {\n    r0 = fullRange[0];\n  } // If new range is outside of the right border then clamp it.\n\n\n  if (Math.sign(fullRange[1] - r1) !== sign) {\n    r1 = fullRange[1];\n  } // If new range is too small then make it no less than minimal available.\n\n\n  if (Math.sign(r1 - r0) !== sign || Math.abs(r1 - r0) < Math.abs(minRangeThreshold)) {\n    if (Math.abs(r0 - range[0]) < Math.abs(minRangeThreshold / 2)) {\n      // Dock it to the start.\n      r0 = range[0];\n      r1 = r0 + minRangeThreshold;\n    } else if (Math.abs(r1 - range[1]) < Math.abs(minRangeThreshold / 2)) {\n      // Dock it to the end.\n      r1 = range[1];\n      r0 = r1 - minRangeThreshold;\n    } else {\n      // Dock it to the anchor.\n      r0 = anchor - minRangeThreshold / 2;\n      r1 = anchor + minRangeThreshold / 2;\n    }\n  }\n\n  var newBounds = [scale.invert(r0), scale.invert(r1)];\n  return rangesEqual(bounds, newBounds) ? bounds : newBounds;\n};\n\nvar growBandScaleBounds = function (scale, bounds, delta, anchor) {\n  var domain = scale.domain();\n  var fullRange = scale.range();\n  var step = (fullRange[1] - fullRange[0]) / domain.length;\n  var range = scaleBounds(scale, bounds);\n  var range0 = Math.round((range[0] - fullRange[0]) / step);\n  var range1 = range0 + Math.round((range[1] - range[0]) / step) - 1; // Let it be always 1 for now.\n\n  var rangeStep = Math.sign(delta);\n\n  if (rangeStep === 0 || rangeStep > 0 && range0 === range1 || rangeStep < 0 && range0 === 0 && range1 === domain.length - 1) {\n    return bounds;\n  }\n\n  var t = Math.abs((anchor - range[0]) / (range[1] - range[0]));\n  var new0 = range0 + Math.round(rangeStep * 2 * t);\n  var new1 = range1 - Math.round(rangeStep * 2 * (1 - t));\n\n  if (new0 < 0) {\n    new0 = 0;\n  }\n\n  if (new1 > domain.length - 1) {\n    new1 = domain.length - 1;\n  }\n\n  if (new0 > new1) {\n    if (t <= 0.5) {\n      new1 = new0;\n    } else {\n      new0 = new1;\n    }\n  }\n\n  if (new0 === range0 && new1 === range1) {\n    return bounds;\n  }\n\n  return [domain[new0], domain[new1]];\n};\n\nvar invertLinearScaleBounds = function (scale, range) {\n  var fullRange = scale.range();\n  var match = Math.sign(fullRange[1] - fullRange[0]) === Math.sign(range[1] - range[0]);\n  return [scale.invert(range[match ? 0 : 1]), scale.invert(range[match ? 1 : 0])];\n};\n\nvar matchPointToBand = function (domain, range, p) {\n  var i = Math.floor(domain.length * (p - range[0]) / (range[1] - range[0]));\n  return domain[Math.min(i, domain.length - 1)];\n};\n\nvar invertBandScaleBounds = function (scale, range) {\n  var domain = scale.domain();\n  var fullRange = scale.range();\n  return [matchPointToBand(domain, fullRange, range[0]), matchPointToBand(domain, fullRange, range[1])];\n}; // Though these functions are used only in *Viewport* plugin (and so should be placed right there),\n// they reside here so that internal scale specifics (*getWidth*)\n// are encapsulated in this utility file.\n\n/** @internal */\n\n\nvar scaleBounds = makeScaleHelper(scaleLinearBounds, scaleBandBounds);\n/** @internal */\n\nvar moveBounds = makeScaleHelper(moveLinearScaleBounds, moveBandScaleBounds); // \"scaleBounds\" would be a better name but \"scale\" is already occupied.\n\n/** @internal */\n\nvar growBounds = makeScaleHelper(growLinearScaleBounds, growBandScaleBounds);\n/** @internal */\n\nvar invertBoundsRange = makeScaleHelper(invertLinearScaleBounds, invertBandScaleBounds);\n\nvar _a;\n\nvar makeDomain = function (_a) {\n  var factory = _a.factory,\n      modifyDomain = _a.modifyDomain;\n  return {\n    domain: [],\n    factory: factory,\n    isDiscrete: !!(factory && isDiscrete(factory)),\n    modifyDomain: modifyDomain\n  };\n};\n/** @internal */\n\n\nvar defaultDomains = (_a = {}, _a[ARGUMENT_DOMAIN] = makeDomain({}), _a[VALUE_DOMAIN] = makeDomain({}), _a);\n/** @internal */\n\nvar addDomain = function (domains, name, options) {\n  var _a;\n\n  return __assign(__assign({}, domains), (_a = {}, _a[name] = makeDomain(options), _a));\n};\n\nvar mergeContinuousDomains = function (domain, items) {\n  var newDomain = extent(__spread(domain, items));\n  return rangesEqual(newDomain, domain) ? domain : newDomain;\n};\n\nvar mergeDiscreteDomains = function (domain, items) {\n  var newDomain = Array.from(new Set(__spread(domain, items)));\n  return newDomain.length === domain.length ? domain : newDomain;\n};\n\nvar getArgument = function (point) {\n  return point.argument;\n};\n\nvar getValue = function (point) {\n  return point.value;\n};\n\nvar guessFactory = function (points, getItem) {\n  return points.length && typeof getItem(points[0]) === 'string' ? scaleBand : scaleLinear;\n};\n\nvar isDiscrete = function (factory) {\n  return 'bandwidth' in factory();\n};\n\nvar updateDomainFactory = function (domain, series, getItem) {\n  if (domain.factory) {\n    return domain;\n  }\n\n  var factory = guessFactory(series.points, getItem);\n  return __assign(__assign({}, domain), {\n    factory: factory,\n    isDiscrete: isDiscrete(factory)\n  });\n};\n/** @internal */\n\n\nvar updateDomainItems = function (domain, items) {\n  var merge = domain.isDiscrete ? mergeDiscreteDomains : mergeContinuousDomains;\n  var merged = merge(domain.domain, items);\n  return merged === domain.domain ? domain : __assign(__assign({}, domain), {\n    domain: domain.modifyDomain ? domain.modifyDomain(merged) : merged\n  });\n};\n\nvar getArgumentDomainItems = function (series) {\n  return series.points.map(getArgument);\n};\n\nvar getValueDomainItems = function (series) {\n  var items = series.points.map(getValue);\n  return series.getPointTransformer.isStartedFromZero ? __spread([0], items) : items;\n};\n\nvar updateDomain = function (domain, series, getItem, getDomainItems) {\n  return updateDomainItems(updateDomainFactory(domain, series, getItem), getDomainItems(series));\n};\n/** @internal */\n\n\nvar extendDomains = function (domains, series) {\n  var argumentDomain = updateDomain(domains[ARGUMENT_DOMAIN], series, getArgument, getArgumentDomainItems);\n  var valueDomainName = getValueDomainName(series.scaleName);\n  var valueDomain = updateDomain(domains[valueDomainName], series, getValue, getValueDomainItems);\n  var changes = {};\n\n  if (argumentDomain !== domains[ARGUMENT_DOMAIN]) {\n    changes[ARGUMENT_DOMAIN] = argumentDomain;\n  }\n\n  if (valueDomain !== domains[valueDomainName]) {\n    changes[valueDomainName] = valueDomain;\n  }\n\n  return Object.keys(changes).length ? __assign(__assign({}, domains), changes) : domains;\n};\n/** @internal */\n\n\nvar buildScales = function (domains, ranges) {\n  var scales = {};\n  Object.keys(domains).forEach(function (name) {\n    scales[name] = makeScale(domains[name], ranges[name === ARGUMENT_DOMAIN ? ARGUMENT_DOMAIN : VALUE_DOMAIN]);\n  });\n  return scales;\n};\n\nvar isEqual = function (_a, _b) {\n  var firstWidth = _a.width,\n      firstHeight = _a.height;\n  var secondWidth = _b.width,\n      secondHeight = _b.height;\n  return firstWidth === secondWidth && firstHeight === secondHeight;\n};\n/** @internal */\n\n\nvar bBoxes = function (prevBBoxes, _a) {\n  var _b;\n\n  var bBox = _a.bBox,\n      placeholder = _a.placeholder;\n  if (isEqual(prevBBoxes[placeholder] || {}, bBox)) return prevBBoxes;\n  return __assign(__assign({}, prevBBoxes), (_b = {}, _b[placeholder] = bBox, _b));\n};\n/** @internal */\n\n\nvar getRanges = function (paneSize, rotated) {\n  var _a;\n\n  var horRange = [0, paneSize.width];\n  var verRange = [paneSize.height, 0];\n  return _a = {}, _a[ARGUMENT_DOMAIN] = rotated ? verRange : horRange, _a[VALUE_DOMAIN] = rotated ? horRange : verRange, _a;\n};\n\nvar _a$1, _b;\n\nvar getTicks = function (scale, count) {\n  return scale.ticks ? scale.ticks(count) : scale.domain();\n};\n\nvar createTicks = function (scale, count, callback) {\n  return getTicks(scale, count).map(function (tick, index) {\n    return callback(scale(tick), String(index), tick);\n  });\n};\n\nvar getFormat = function (scale, count, tickFormat) {\n  if (scale.tickFormat) {\n    return tickFormat ? tickFormat(scale, count) : scale.tickFormat(count);\n  }\n\n  return function (tick) {\n    return tick;\n  };\n};\n\nvar rotatedPositions = (_a$1 = {}, _a$1[LEFT] = BOTTOM, _a$1[RIGHT] = TOP, _a$1[BOTTOM] = LEFT, _a$1[TOP] = RIGHT, _a$1);\nvar positionFlags = (_b = {}, _b[LEFT] = false, _b[RIGHT] = false, _b[BOTTOM] = true, _b[TOP] = true, _b);\n/** @internal */\n\nvar getRotatedPosition = function (position) {\n  return rotatedPositions[position];\n};\n/** @internal */\n\n\nvar isValidPosition = function (position, scaleName, rotated) {\n  return positionFlags[position] === isHorizontal(scaleName, rotated);\n};\n\nvar createHorizontalOptions = function (position, tickSize, indentFromAxis) {\n  // Make *position* orientation agnostic - should be START or END.\n  var isStart = position === BOTTOM;\n  return {\n    y1: 0,\n    y2: isStart ? +tickSize : -tickSize,\n    yText: isStart ? +indentFromAxis : -indentFromAxis,\n    dy: isStart ? '1em' : '0em',\n    textAnchor: MIDDLE\n  };\n};\n\nvar createVerticalOptions = function (position, tickSize, indentFromAxis) {\n  // Make *position* orientation agnostic - should be START or END.\n  var isStart = position === LEFT;\n  return {\n    x1: 0,\n    x2: isStart ? -tickSize : +tickSize,\n    xText: isStart ? -indentFromAxis : +indentFromAxis,\n    dy: '0.3em',\n    textAnchor: isStart ? END : START\n  };\n}; // Constant is selected to preserve original behavior described in\n// https://github.com/d3/d3-scale#continuous_ticks.\n\n\nvar DEFAULT_TICK_COUNT = 10;\n\nvar getTickCount = function (scaleRange, paneSize) {\n  var rangeToPaneRatio = Math.abs(scaleRange[0] - scaleRange[1]) / paneSize;\n  return Math.round(DEFAULT_TICK_COUNT * (isFinite(rangeToPaneRatio) ? rangeToPaneRatio : 1));\n};\n\nvar createTickFilter = function (isHor, size) {\n  return isHor ? function (tick) {\n    return tick.x1 >= 0 && tick.x1 <= size;\n  } : function (tick) {\n    return tick.y1 >= 0 && tick.y1 <= size;\n  };\n};\n/** @internal */\n\n\nvar tickCoordinatesGetter = function (_a) {\n  var isHor = _a.isHor,\n      scale = _a.scale,\n      tickCount = _a.tickCount,\n      tickFormat = _a.tickFormat,\n      position = _a.position,\n      tickSize = _a.tickSize,\n      indentFromAxis = _a.indentFromAxis;\n  var formatTick = getFormat(scale, tickCount, tickFormat);\n  var options = (isHor ? createHorizontalOptions : createVerticalOptions)(position, tickSize, indentFromAxis);\n  return function (coordinates, key, tick) {\n    return __assign({\n      key: key,\n      x1: coordinates,\n      x2: coordinates,\n      y1: coordinates,\n      y2: coordinates,\n      xText: coordinates,\n      yText: coordinates,\n      text: formatTick(tick)\n    }, options);\n  };\n};\n/** @internal */\n\n\nvar gridCoordinatesGetter = function (_a) {\n  var isHor = _a.isHor;\n  var options = isHor ? {\n    y1: 0\n  } : {\n    x1: 0\n  };\n  return function (coordinates, key) {\n    return __assign({\n      key: key,\n      x1: coordinates,\n      y1: coordinates\n    }, options);\n  };\n};\n/** @internal */\n\n\nvar getTickCoordinates = function (_a) {\n  var scaleName = _a.scaleName,\n      scale = _a.scale,\n      paneSize = _a.paneSize,\n      rotated = _a.rotated,\n      callback = _a.callback,\n      restProps = __rest(_a, [\"scaleName\", \"scale\", \"paneSize\", \"rotated\", \"callback\"]);\n\n  var isHor = isHorizontal(scaleName, rotated);\n  var tickCount = getTickCount(scale.range(), paneSize[1 - Number(isHor)]);\n  var ticks = createTicks(scale, tickCount, callback(__assign({\n    isHor: isHor,\n    scale: scale,\n    tickCount: tickCount\n  }, restProps)));\n  var visibleTicks = ticks.filter(createTickFilter(isHor, paneSize[1 - Number(isHor)]));\n  return {\n    ticks: visibleTicks,\n    sides: [Number(isHor), Number(!isHor)]\n  };\n};\n\nvar getArg = function (_a) {\n  var arg = _a.arg;\n  return arg;\n};\n\nvar getVal = function (_a) {\n  var val = _a.val;\n  return val;\n};\n\nvar getStartVal = function (_a) {\n  var startVal = _a.startVal;\n  return startVal;\n};\n/** @internal */\n\n\nvar dArea = area().x(getArg).y1(getVal).y0(getStartVal);\n/** @internal */\n\nvar dRotateArea = area().x1(getStartVal).x0(getVal).y(getArg);\n/** @internal */\n\nvar dLine = line().x(getArg).y(getVal);\n/** @internal */\n\nvar dRotateLine = line().x(getVal).y(getArg);\n/** @internal */\n\nvar dSpline = line().x(getArg).y(getVal).curve(curveMonotoneX);\n/** @internal */\n\nvar dRotateSpline = line().x(getVal).y(getArg).curve(curveMonotoneY);\n/** @internal */\n\nvar dBar = function (arg, val, startVal, width, rotated) {\n  var height = Math.abs(val - startVal);\n  var minVal = Math.min(val, startVal);\n  return {\n    x: rotated ? minVal : arg - width / 2,\n    y: rotated ? arg - width / 2 : minVal,\n    width: rotated ? height : width || 2,\n    height: rotated ? width || 2 : height\n  };\n};\n/** @internal */\n\n\nvar getPiePointTransformer = function (_a) {\n  var argumentScale = _a.argumentScale,\n      valueScale = _a.valueScale,\n      points = _a.points;\n  var x = Math.max.apply(Math, __spread(argumentScale.range())) / 2;\n  var y = Math.max.apply(Math, __spread(valueScale.range())) / 2;\n  var maxRadius = Math.min(x, y);\n  var pieData = pie().sort(null).value(function (d) {\n    return d.value;\n  })(points);\n  return function (point) {\n    var _a = pieData[point.index],\n        startAngle = _a.startAngle,\n        endAngle = _a.endAngle;\n    return __assign(__assign({}, point), {\n      arg: x,\n      val: y,\n      startAngle: startAngle,\n      endAngle: endAngle,\n      maxRadius: maxRadius\n    });\n  };\n};\n/** @internal */\n\n\nvar getLinePointTransformer = function (_a) {\n  var argumentScale = _a.argumentScale,\n      valueScale = _a.valueScale;\n  return function (point) {\n    return __assign(__assign({}, point), {\n      arg: argumentScale(point.argument),\n      val: valueScale(point.value)\n    });\n  };\n}; // Though transformations for line and scatter are the same,\n// separate function instance is required as it contains additional static fields.\n\n/** @internal */\n\n\nvar getScatterPointTransformer = function () {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return getLinePointTransformer.apply(void 0, __spread(args));\n};\n/** @internal */\n\n\nvar getAreaPointTransformer = function (series) {\n  var transform = getLinePointTransformer(series);\n  var startVal = series.valueScale(0);\n  return function (point) {\n    var ret = transform(point);\n    return __assign(__assign({}, ret), {\n      startVal: startVal\n    });\n  };\n}; // Used for domain calculation and stacking.\n\n\ngetAreaPointTransformer.isStartedFromZero = true;\n/** @internal */\n\nvar getBarPointTransformer = function (_a) {\n  var argumentScale = _a.argumentScale,\n      valueScale = _a.valueScale;\n  var startVal = valueScale(0);\n  return function (point) {\n    return __assign(__assign({}, point), {\n      arg: argumentScale(point.argument),\n      val: valueScale(point.value),\n      startVal: startVal,\n      maxBarWidth: getWidth(argumentScale)\n    });\n  };\n}; // Used for domain calculation and stacking.\n\n\ngetBarPointTransformer.isStartedFromZero = true; // Used for Bar grouping.\n\ngetBarPointTransformer.isBroad = true;\n\ngetPiePointTransformer.getPointColor = function (palette, index) {\n  return palette[index % palette.length];\n};\n/** @internal */\n\n\nvar findSeriesByName = function (name, series) {\n  return series.find(function (seriesItem) {\n    return seriesItem.symbolName === name;\n  });\n};\n/** @internal */\n\n\nvar dSymbol = function (_a) {\n  var size = _a.size;\n  return symbol().size(Math.pow(size, 2)).type(symbolCircle)();\n};\n/** @internal */\n\n\nvar dPie = function (_a) {\n  var maxRadius = _a.maxRadius,\n      innerRadius = _a.innerRadius,\n      outerRadius = _a.outerRadius,\n      startAngle = _a.startAngle,\n      endAngle = _a.endAngle;\n  return arc()({\n    startAngle: startAngle,\n    endAngle: endAngle,\n    innerRadius: innerRadius * maxRadius,\n    outerRadius: outerRadius * maxRadius\n  });\n};\n\nvar getRect = function (cArg, cVal, dArg, dVal, rotated) {\n  var minArg = cArg - dArg;\n  var minVal = cVal - dVal;\n  var maxArg = cArg + dArg;\n  var maxVal = cVal + dVal;\n  return rotated ? [minVal, minArg, maxVal, maxArg] : [minArg, minVal, maxArg, maxVal];\n};\n\ngetBarPointTransformer.getTargetElement = function (point) {\n  var _a = point,\n      arg = _a.arg,\n      val = _a.val,\n      startVal = _a.startVal,\n      barWidth = _a.barWidth,\n      maxBarWidth = _a.maxBarWidth,\n      rotated = _a.rotated;\n  var halfWidth = barWidth * maxBarWidth / 2;\n  var halfHeight = Math.abs(startVal - val) / 2;\n  var centerVal = (val + startVal) / 2;\n  return getRect(arg, centerVal, halfWidth, halfHeight, rotated);\n};\n\ngetPiePointTransformer.getTargetElement = function (point) {\n  var _a = point,\n      x = _a.arg,\n      y = _a.val,\n      innerRadius = _a.innerRadius,\n      outerRadius = _a.outerRadius,\n      maxRadius = _a.maxRadius,\n      startAngle = _a.startAngle,\n      endAngle = _a.endAngle;\n  var center = arc().centroid({\n    startAngle: startAngle,\n    endAngle: endAngle,\n    innerRadius: innerRadius * maxRadius,\n    outerRadius: outerRadius * maxRadius\n  });\n  var cx = center[0] + x;\n  var cy = center[1] + y;\n  return getRect(cx, cy, 0.5, 0.5, false);\n};\n\ngetAreaPointTransformer.getTargetElement = function (_a) {\n  var arg = _a.arg,\n      val = _a.val,\n      rotated = _a.rotated;\n  return getRect(arg, val, 1, 1, rotated);\n};\n\ngetLinePointTransformer.getTargetElement = getAreaPointTransformer.getTargetElement;\n\ngetScatterPointTransformer.getTargetElement = function (obj) {\n  var _a = obj,\n      arg = _a.arg,\n      val = _a.val,\n      point = _a.point,\n      rotated = _a.rotated;\n  var t = point.size / 2;\n  return getRect(arg, val, t, t, rotated);\n};\n\nvar getUniqueName = function (list, name) {\n  var names = new Set(list.map(function (item) {\n    return item.name;\n  }));\n  var ret = name;\n\n  while (names.has(ret)) {\n    // @ts-ignore\n    ret = ret.replace(/\\d*$/, function (str) {\n      return str ? +str + 1 : 0;\n    });\n  }\n\n  return ret;\n}; // TODO: Memoization is much needed here.\n// Though \"series\" list never persists, single \"series\" item most often does.\n\n\nvar createPoints = function (_a, data, props, palette) {\n  var argumentField = _a.argumentField,\n      valueField = _a.valueField,\n      getPointTransformer = _a.getPointTransformer;\n  var points = [];\n  data.forEach(function (dataItem, index) {\n    var argument = dataItem[argumentField];\n    var value = dataItem[valueField];\n\n    if (argument !== undefined && value !== undefined) {\n      points.push(__assign(__assign({\n        argument: argument,\n        value: value,\n        index: index\n      }, props), {\n        color: getPointTransformer.getPointColor ? getPointTransformer.getPointColor(palette, index) : props.color\n      }));\n    }\n  });\n  return points;\n};\n/** @internal */\n\n\nvar addSeries = function (series, data, palette, props, restProps) {\n  // It is used to generate unique series dependent attribute names for patterns.\n  // *symbolName* cannot be used as it cannot be part of DOM attribute name.\n  var index = series.length;\n  var seriesColor = props.color || palette[index % palette.length];\n  return __spread(series, [__assign(__assign({}, props), {\n    index: index,\n    name: getUniqueName(series, props.name),\n    points: createPoints(props, data, __assign(__assign({}, restProps), {\n      color: seriesColor\n    }), palette),\n    color: seriesColor\n  })]);\n}; // TODO: Memoization is much needed here by the same reason as in \"createPoints\".\n// Make \"scales\" persistent first.\n\n\nvar scalePoints = function (series, scales, rotated) {\n  var transform = series.getPointTransformer(__assign(__assign({}, series), {\n    argumentScale: scales[ARGUMENT_DOMAIN],\n    valueScale: scales[getValueDomainName(series.scaleName)]\n  }));\n\n  var ret = __assign(__assign({}, series), {\n    rotated: rotated,\n    points: series.points.map(function (point) {\n      return __assign(__assign({}, transform(point)), {\n        rotated: rotated\n      });\n    })\n  });\n\n  return ret;\n};\n/** @internal */\n\n\nvar scaleSeriesPoints = function (series, scales, rotated) {\n  return series.map(function (seriesItem) {\n    return scalePoints(seriesItem, scales, rotated);\n  });\n};\n/** @internal */\n\n\nvar getVisibility = function (pane, centerX, centerY, width, height) {\n  return centerX - width / 2 < 0 && centerX + width / 2 < 0 || centerX - width / 2 > pane.width && centerX + width / 2 > pane.width || centerY - height / 2 < 0 && centerY + height / 2 < 0 || centerY - height / 2 > pane.height && centerY + height / 2 > pane.height ? 'hidden' : 'visible';\n};\n/** @internal */\n\n\nvar adjustBarSize = function (bar, _a) {\n  var width = _a.width,\n      height = _a.height;\n  var x = Math.max(0, bar.x);\n  var y = Math.max(0, bar.y);\n  return {\n    x: x,\n    y: y,\n    width: Math.min(width, bar.x + bar.width) - x,\n    height: Math.min(height, bar.y + bar.height) - y\n  };\n}; // \"Stack\" plugin relies on \"data\" and \"series\" getters and\n// knowledge about \"getPointTransformer\" and \"path\" functions behavior.\n\n\nvar buildSeriesToStackMap = function (stacks) {\n  var result = {};\n  stacks.forEach(function (_a, i) {\n    var series = _a.series;\n    series.forEach(function (name) {\n      result[name] = i;\n    });\n  });\n  return result;\n};\n\nvar getStackedPointTransformer = function (getPointTransformer) {\n  var wrapper = function (series) {\n    var transform = getPointTransformer(series);\n    var valueScale = series.valueScale;\n    return function (point) {\n      var ret = transform(point);\n      return __assign(__assign({}, ret), {\n        startVal: valueScale(point.value0)\n      });\n    };\n  }; // Preserve static fields of original transformer.\n\n\n  Object.assign(wrapper, getPointTransformer);\n  return wrapper;\n};\n\nvar collectStacks = function (seriesList, seriesToStackMap, stacksKeys, seriesPositions) {\n  seriesList.forEach(function (_a) {\n    var name = _a.name,\n        valueField = _a.valueField;\n    var stackId = seriesToStackMap[name];\n\n    if (stackId === undefined) {\n      return;\n    }\n\n    if (!stacksKeys[stackId]) {\n      stacksKeys[stackId] = [];\n    }\n\n    seriesPositions[name] = stacksKeys[stackId].length;\n    stacksKeys[stackId].push(valueField);\n  }); // Stack cannot consist of single series.\n\n  Object.keys(stacksKeys).forEach(function (stackId) {\n    if (stacksKeys[stackId].length === 1) {\n      delete stacksKeys[stackId];\n    }\n  });\n};\n\nvar getStackedData = function (stacksKeys, dataItems, offset, order) {\n  var result = {};\n  Object.keys(stacksKeys).forEach(function (stackId) {\n    result[stackId] = stack().keys(stacksKeys[stackId]).order(order).offset(offset)(dataItems);\n  });\n  return result;\n};\n\nvar buildStackedSeries = function (series, dataItems) {\n  var points = series.points.map(function (point) {\n    var _a = __read(dataItems[point.index], 2),\n        value0 = _a[0],\n        value = _a[1];\n\n    return __assign(__assign({}, point), {\n      value: value,\n      value0: value0\n    });\n  });\n\n  var stackedSeries = __assign(__assign({}, series), {\n    points: points,\n    isStacked: true\n  });\n\n  if (series.getPointTransformer.isStartedFromZero) {\n    stackedSeries.getPointTransformer = getStackedPointTransformer(series.getPointTransformer);\n  }\n\n  return stackedSeries;\n};\n\nvar applyStacking = function (seriesList, dataItems, seriesToStackMap, offset, order) {\n  var stacksKeys = {};\n  var seriesPositions = {};\n  collectStacks(seriesList, seriesToStackMap, stacksKeys, seriesPositions);\n\n  if (Object.keys(stacksKeys).length === 0) {\n    return seriesList;\n  }\n\n  var stackedData = getStackedData(stacksKeys, dataItems, offset, order);\n  return seriesList.map(function (seriesItem) {\n    var stackId = seriesToStackMap[seriesItem.name];\n    var stackData = stackedData[stackId];\n\n    if (!stackData) {\n      return seriesItem;\n    }\n\n    var position = seriesPositions[seriesItem.name];\n    return buildStackedSeries(seriesItem, stackData[position]);\n  });\n};\n\nvar getGroupName = function (series, i, seriesToStackMap) {\n  var stackId = seriesToStackMap[series.name];\n  return stackId >= 0 ? String(stackId) : \"group-\" + i;\n};\n\nvar getGroupedPointTransformer = function (getPointTransformer, groupCount, groupOffset) {\n  var wrapper = function (series) {\n    var transform = getPointTransformer(series);\n    var widthCoeff = 1 / groupCount;\n    return function (point) {\n      var original = transform(point);\n      var arg = original.arg - original.maxBarWidth * (0.5 - 0.5 * widthCoeff - groupOffset * widthCoeff);\n\n      var result = __assign(__assign({}, original), {\n        arg: arg,\n        maxBarWidth: original.maxBarWidth / groupCount\n      });\n\n      return result;\n    };\n  }; // Preserve static fields of original transformer.\n\n\n  Object.assign(wrapper, getPointTransformer);\n  return wrapper;\n};\n\nvar applyGrouping = function (seriesList, seriesToStackMap) {\n  var groups = new Set();\n  seriesList.forEach(function (seriesItem, i) {\n    if (seriesItem.getPointTransformer.isBroad) {\n      groups.add(getGroupName(seriesItem, i, seriesToStackMap));\n    }\n  }); // There cannot be single group.\n\n  if (groups.size < 2) {\n    return seriesList;\n  }\n\n  var scale = scaleBand$1().domain(Array.from(groups)).range([0, groups.size]);\n  return seriesList.map(function (seriesItem, i) {\n    if (!seriesItem.getPointTransformer.isBroad) {\n      return seriesItem;\n    }\n\n    var getPointTransformer = getGroupedPointTransformer(seriesItem.getPointTransformer, groups.size, scale(getGroupName(seriesItem, i, seriesToStackMap)));\n    return __assign(__assign({}, seriesItem), {\n      getPointTransformer: getPointTransformer\n    });\n  });\n};\n/** @internal */\n\n\nvar getStackedSeries = function (seriesList, dataItems, _a) {\n  var stacks = _a.stacks,\n      offset = _a.offset,\n      order = _a.order;\n  var map = buildSeriesToStackMap(stacks);\n  var stackedSeriesList = applyStacking(seriesList, dataItems, map, offset, order);\n  var groupedSeriesList = applyGrouping(stackedSeriesList, map);\n  return groupedSeriesList;\n};\n\nvar resetDomainItems = function (domains) {\n  var result = {};\n  Object.keys(domains).forEach(function (key) {\n    result[key] = __assign(__assign({}, domains[key]), {\n      domain: []\n    });\n  });\n  return result;\n};\n\nvar extendDomainsWithAdditionalItems = function (domains, series) {\n  var _a;\n\n  var items = series.points.map(function (point) {\n    return point.value0;\n  });\n  var key = getValueDomainName(series.scaleName);\n  var domain = updateDomainItems(domains[key], items);\n  return domain !== domains[key] ? __assign(__assign({}, domains), (_a = {}, _a[key] = domain, _a)) : domains;\n}; // Stacking changes data - so computed domains have to be discarded\n// and recalculated from the new stacked data.\n\n/** @internal */\n\n\nvar getStackedDomains = function (domains, seriesList) {\n  var stackedSeries = seriesList.filter(function (series) {\n    return series.isStacked;\n  });\n\n  if (!stackedSeries.length) {\n    return domains;\n  } // Recalculate domains in a common way.\n\n\n  var rebuiltDomains = seriesList.reduce(extendDomains, resetDomainItems(domains)); // Take additional \"value0\" fields into account.\n\n  return stackedSeries.reduce(extendDomainsWithAdditionalItems, rebuiltDomains);\n};\n\nvar ANIMATIONS = Symbol('animation');\n\nvar addKeyframe = function (name, def) {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.getElementsByTagName('head')[0];\n  var style = Array.from(head.getElementsByTagName('style')).find(function (node) {\n    return node.dataset[ANIMATIONS];\n  });\n\n  if (!style) {\n    style = document.createElement('style');\n    style.type = 'text/css';\n    style.dataset[ANIMATIONS] = true;\n    head.appendChild(style);\n  }\n\n  var content = style.textContent;\n\n  if (!content.includes(name)) {\n    style.textContent += \"\\n@keyframes \" + name + \" \" + def + \"\\n\";\n  }\n};\n\nvar getAreaAnimationName = function (rotated) {\n  var name = 'animation_transform';\n  var attr = rotated ? 'scaleX' : 'scaleY';\n  addKeyframe(name, \"{ from { transform: \" + attr + \"(0); } }\");\n  return name;\n};\n\nvar getScatterAnimationName = function () {\n  var name = 'animation_scatter';\n  addKeyframe(name, '{ 0% { opacity: 0; } 50% { opacity: 0; } 100% { opacity: 1 } }');\n  return name;\n};\n\nvar getPieAnimationName = function () {\n  var name = 'animation_pie';\n  addKeyframe(name, '{ from { transform: scale(0); } }');\n  return name;\n};\n\nvar getDefaultAreaAnimationOptions = function () {\n  return '1s';\n};\n\nvar getDefaultPieAnimationOptions = function (_a) {\n  var index = _a.index;\n  return 0.7 + index * 0.1 + \"s\";\n};\n\nvar getDefaultScatterAnimationOptions = function () {\n  return '1.6s';\n};\n/** @internal */\n\n\nvar getAreaAnimationStyle = function (rotated, _a) {\n  var xScale = _a.xScale,\n      yScale = _a.yScale;\n  var x = rotated ? xScale.copy().clamp(true)(0) : 0;\n  var y = rotated ? 0 : yScale.copy().clamp(true)(0);\n  var animationStyle = {\n    transformOrigin: x + \"px \" + y + \"px\"\n  };\n  var options = getDefaultAreaAnimationOptions();\n  return __assign({\n    animation: getAreaAnimationName(rotated) + \" \" + options\n  }, animationStyle);\n};\n/** @internal */\n\n\nvar getPieAnimationStyle = function (r, s, point) {\n  var options = getDefaultPieAnimationOptions(point);\n  return {\n    animation: getPieAnimationName() + \" \" + options\n  };\n};\n/** @internal */\n\n\nvar getScatterAnimationStyle = function () {\n  var options = getDefaultScatterAnimationOptions();\n  return {\n    animation: getScatterAnimationName() + \" \" + options\n  };\n};\n/** @internal */\n\n\nvar buildAnimatedStyleGetter = function (rotated) {\n  return function (style, getAnimationStyle, scales, point) {\n    var animationStyle = getAnimationStyle(rotated, scales, point);\n    return __assign(__assign({}, animationStyle), style);\n  };\n}; // Comparing by reference is not an option as Tracker always sends new objects.\n// Tracker cannot persist references as it actually operates with simple scalars\n// and constructs objects to provide info in a slightly more suitable way.\n\n\nvar compareTargets = function (target1, target2) {\n  return target1.series === target2.series && target1.point === target2.point;\n}; // If *currentTarget* is among *targets* then it has priority but only while its distance\n// is not significantly greater (DISTANCE_PRIORITY_RATIO) than that of the best candidate.\n\n\nvar selectTarget = function (targets, currentTarget) {\n  var candidate = targets[0];\n\n  if (!currentTarget) {\n    return candidate;\n  }\n\n  if (!candidate) {\n    return null;\n  }\n\n  return compareTargets(candidate, currentTarget) ? undefined : candidate;\n};\n/** @internal */\n\n\nvar processPointerMove = function (targets, currentTarget, notify) {\n  var nextTarget = selectTarget(targets, currentTarget);\n\n  if (nextTarget === undefined) {\n    return undefined;\n  }\n\n  if (notify) {\n    notify(nextTarget);\n  }\n\n  return nextTarget;\n}; // This function is to be called from context where DOM is available -\n// so *window* can be accessed safely.\n\n/** @internal */\n\n\nvar getOffset = function (element) {\n  var _a = element.getBoundingClientRect(),\n      left = _a.left,\n      top = _a.top; // Safer way to get window.\n\n\n  var defaultView = element.ownerDocument.defaultView;\n  var _b = defaultView,\n      pageXOffset = _b.pageXOffset,\n      pageYOffset = _b.pageYOffset;\n  return [left + pageXOffset, top + pageYOffset];\n};\n/** @internal */\n\n\nvar getEventCoords = function (e, offset) {\n  var _a = e.touches ? e.touches[0] : e,\n      pageX = _a.pageX,\n      pageY = _a.pageY;\n\n  return [pageX - offset[0], pageY - offset[1]];\n};\n/** @internal */\n\n\nvar getParameters = function (series, target) {\n  var currentSeries = series.find(function (_a) {\n    var name = _a.name;\n    return target.series === name;\n  });\n  var item = currentSeries.points.find(function (point) {\n    return point.index === target.point;\n  });\n  return {\n    element: currentSeries.getPointTransformer.getTargetElement(item),\n    text: \"\" + item.value\n  };\n};\n/** @internal */\n\n\nvar createReference = function (rect, rootRef) {\n  return {\n    // These two fields together with *width* and *height* are left with stub data for\n    // simplicity reasons - they seem to be unused by *Popper*.\n    clientWidth: 0,\n    clientHeight: 0,\n    getBoundingClientRect: function () {\n      // This function is expected to be called (by the *Popper*) when DOM is ready -\n      // so *rootRef.current* can be accessed.\n      var offset = getOffset(rootRef.current); // *getBoundingClientRect* of a real html element is affected by window scrolling.\n      // *popper.js* subscribes \"html -> getBoundingClientRect -> (left, top)\" from\n      // \"reference -> getBoundingClientRect\" - so here it is added.\n\n      var htmlRect = rootRef.current.ownerDocument.documentElement.getBoundingClientRect();\n      return {\n        left: rect[0] + offset[0] + htmlRect.left,\n        top: rect[1] + offset[1] + htmlRect.top,\n        right: rect[2] + offset[0] + htmlRect.left,\n        bottom: rect[3] + offset[1] + htmlRect.top,\n        width: 0,\n        height: 0\n      };\n    }\n  };\n};\n/** @internal */\n\n\nvar processHandleTooltip = function (targets, currentTarget, onTargetItemChange) {\n  var filterTargets = targets.filter(function (target) {\n    return target.point !== undefined;\n  });\n  return processPointerMove(filterTargets, currentTarget, onTargetItemChange);\n};\n\nvar getArgumentBounds = function (viewport) {\n  return viewport && viewport.argumentStart !== undefined && viewport.argumentEnd !== undefined ? [viewport.argumentStart, viewport.argumentEnd] : null;\n};\n\nvar getValueBounds = function (viewport) {\n  return viewport && viewport.valueStart !== undefined && viewport.valueEnd !== undefined ? [viewport.valueStart, viewport.valueEnd] : null;\n};\n\nvar getValueScaleName = function (viewport) {\n  return getValueDomainName(viewport && viewport.scaleName);\n};\n\nvar getDefaultBounds = function (scale) {\n  var domain = scale.domain();\n  return [domain[0], domain[domain.length - 1]];\n};\n\nvar proportionallyExtendRange = function (range, subRange) {\n  var p = (subRange[0] - subRange[1]) / (range[0] - range[1]);\n  var q = subRange[0] - p * range[0];\n  return [(range[0] - q) / p, (range[1] - q) / p];\n};\n\nvar adjustRange = function (domain, bounds, range) {\n  var scale = makeScale(domain, range);\n  var subRange = scaleBounds(scale, bounds);\n  return rangesEqual(subRange, range) ? range : proportionallyExtendRange(range, subRange);\n};\n\nvar update = function (ranges, changes, key, domain, bounds) {\n  var newRange = adjustRange(domain, bounds, ranges[key]);\n\n  if (newRange !== ranges[key]) {\n    changes[key] = newRange;\n  }\n};\n/** @internal */\n\n\nvar adjustLayout = function (domains, ranges, viewport) {\n  var changes = {};\n  var argumentBounds = getArgumentBounds(viewport);\n\n  if (argumentBounds) {\n    update(ranges, changes, ARGUMENT_DOMAIN, domains[ARGUMENT_DOMAIN], argumentBounds);\n  }\n\n  var valueBounds = getValueBounds(viewport);\n\n  if (valueBounds) {\n    update(ranges, changes, VALUE_DOMAIN, domains[getValueScaleName(viewport)], valueBounds);\n  }\n\n  return Object.keys(changes).length ? __assign(__assign({}, ranges), changes) : ranges;\n};\n\nvar boundsForScale = function (name, scales, currentBounds, interaction, type, delta, anchor, range) {\n  if (!checkInteraction(interaction, type)) {\n    return null;\n  }\n\n  var scale = scales[name];\n  var bounds = currentBounds || getDefaultBounds(scale);\n  var newBounds;\n\n  if (type === 'pan') {\n    newBounds = moveBounds(scale, bounds, delta);\n  } else if (type === 'zoom') {\n    newBounds = range ? invertBoundsRange(scale, range) : growBounds(scale, bounds, delta, anchor);\n  }\n\n  return newBounds !== bounds ? newBounds : null;\n};\n/** @internal */\n\n\nvar getViewport = function (scales, rotated, _a, type, deltas, anchors, ranges, viewport, onViewportChange) {\n  var _b = __read(_a, 2),\n      argInteraction = _b[0],\n      valInteraction = _b[1];\n\n  var argIndex = Number(rotated);\n  var valIndex = 1 - argIndex;\n  var changes = {};\n  var argumentBounds = boundsForScale(ARGUMENT_DOMAIN, scales, getArgumentBounds(viewport), argInteraction, type, deltas ? deltas[argIndex] : 0, anchors ? anchors[argIndex] : 0, ranges ? ranges[argIndex] : undefined);\n  var valueBounds = boundsForScale(getValueScaleName(viewport), scales, getValueBounds(viewport), valInteraction, type, deltas ? deltas[valIndex] : 0, anchors ? anchors[valIndex] : 0, ranges ? ranges[valIndex] : undefined);\n\n  if (argumentBounds) {\n    changes.argumentStart = argumentBounds[0];\n    changes.argumentEnd = argumentBounds[1];\n  }\n\n  if (valueBounds) {\n    changes.valueStart = valueBounds[0];\n    changes.valueEnd = valueBounds[1];\n  }\n\n  if (Object.keys(changes).length) {\n    var newViewport = __assign(__assign({}, viewport), changes);\n\n    if (onViewportChange) {\n      onViewportChange(newViewport);\n    }\n\n    return {\n      viewport: newViewport\n    };\n  }\n\n  return null;\n};\n/** @internal */\n\n\nvar getDeltaForTouches = function (touches) {\n  var deltaX = touches[0].pageX - touches[1].pageX;\n  var deltaY = touches[0].pageY - touches[1].pageY;\n  var delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  var center = [(touches[0].pageX + touches[1].pageX) / 2, (touches[0].pageY + touches[1].pageY) / 2];\n  return {\n    delta: delta,\n    center: center\n  };\n};\n/** @internal */\n\n\nvar isKeyPressed = function (event, key) {\n  return event[key + \"Key\"];\n};\n/** @internal */\n\n\nvar getWheelDelta = function (_a) {\n  var wheelDelta = _a.wheelDelta,\n      deltaY = _a.deltaY;\n  return wheelDelta !== undefined ? wheelDelta : deltaY * -30; // deltaY for FF\n};\n/** @internal */\n\n\nvar isMultiTouch = function (e) {\n  return e.touches && e.touches.length === 2;\n};\n/** @internal */\n\n\nvar attachEvents = function (node, handlers) {\n  Object.keys(handlers).forEach(function (el) {\n    node.addEventListener(el, handlers[el], {\n      passive: false\n    });\n  });\n};\n/** @internal */\n\n\nvar detachEvents = function (node, handlers) {\n  Object.keys(handlers).forEach(function (el) {\n    node.removeEventListener(el, handlers[el]);\n  });\n};\n/** @internal */\n\n\nvar getRect$1 = function (rotated, interactionWithArguments, interactionWithValues, initial, current, pane) {\n  var isZoomArgument = checkInteraction(interactionWithArguments, 'zoom');\n  var isZoomValue = checkInteraction(interactionWithValues, 'zoom');\n  var isXFixed = rotated ? isZoomValue : isZoomArgument;\n  var isYFixed = rotated ? isZoomArgument : isZoomValue;\n  var x = isXFixed ? Math.min(initial[0], current[0]) : 0;\n  var width = isXFixed ? Math.abs(initial[0] - current[0]) : pane.width;\n  var y = isYFixed ? Math.min(initial[1], current[1]) : 0;\n  var height = isYFixed ? Math.abs(initial[1] - current[1]) : pane.height;\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n};\n\nvar checkInteraction = function (interaction, type) {\n  return interaction === 'both' || interaction === type;\n};\n/** @internal */\n\n\nvar setCursorType = function (node, type) {\n  var defaultType = 'pointer';\n  node.style.cursor = type ? type : defaultType;\n};\n\nvar getSegmentLength = function (dx, dy) {\n  return Math.sqrt(dx * dx + dy * dy);\n}; // *distance* is a normalized distance to point.\n// It belongs to [0, Infinity):\n//  = 0 - at point center\n//  = 1 - at point border\n//  > 1 - outside point\n// This function is called from event handlers (when DOM is available) -\n// *window.document* can be accessed safely.\n\n\nvar createContext = function () {\n  return document.createElement('canvas').getContext('2d');\n}; // For a start using browser canvas will suffice.\n// However a better and more clean solution should be found.\n// Can't d3 perform hit testing?\n\n\nvar createCanvasAbusingHitTester = function (makePath, points, rotated) {\n  var ctx = createContext();\n  var path = makePath(rotated);\n  path.context(ctx);\n  path(points);\n  return function (_a) {\n    var _b = __read(_a, 2),\n        x = _b[0],\n        y = _b[1];\n\n    return ctx.isPointInPath(x, y);\n  };\n};\n\nvar LINE_POINT_SIZE = 20;\nvar LINE_TOLERANCE = 10;\n\nvar getDistance = function (_a, _b, rotated) {\n  var _c = __read(_a, 2),\n      px = _c[0],\n      py = _c[1];\n\n  var arg = _b.arg,\n      val = _b.val;\n  var x = rotated ? val : arg;\n  var y = rotated ? arg : val;\n  return getSegmentLength(px - x, py - y);\n};\n\nvar createContinuousSeriesHitTesterCreator = function (makePath) {\n  return function (points, rotated) {\n    var fallbackHitTest = createCanvasAbusingHitTester(makePath, points, rotated);\n    return function (target) {\n      var minDistance = Number.MAX_VALUE;\n      var minIndex = 0;\n      var list = [];\n      points.forEach(function (point, i) {\n        var distance = getDistance(target, point, rotated);\n\n        if (distance <= LINE_POINT_SIZE) {\n          list.push({\n            distance: distance,\n            index: point.index\n          });\n        }\n\n        if (distance < minDistance) {\n          minDistance = distance;\n          minIndex = i;\n        }\n      }); // This is special case for continuous series - if no point is actually hit\n      // then the closest point to the pointer position is picked.\n\n      if (!list.length && fallbackHitTest(target)) {\n        list.push({\n          index: points[minIndex].index,\n          distance: minDistance\n        });\n      }\n\n      return list.length ? {\n        points: list\n      } : null;\n    };\n  };\n};\n\nvar createPointsEnumeratingHitTesterCreator = function (hitTestPoint) {\n  return function (points, rotated) {\n    return function (target) {\n      var list = [];\n      points.forEach(function (point) {\n        var status = hitTestPoint(target, point, rotated);\n\n        if (status) {\n          list.push({\n            index: point.index,\n            distance: status.distance\n          });\n        }\n      });\n      return list.length ? {\n        points: list\n      } : null;\n    };\n  };\n};\n/** @internal */\n\n\nvar createAreaHitTester = createContinuousSeriesHitTesterCreator(function (rotated) {\n  var path = area();\n  var hitArea = rotated ? dRotateArea : dArea;\n\n  if (rotated) {\n    path.x1(hitArea.x1());\n    path.x0(hitArea.x0());\n    path.y(hitArea.y());\n  } else {\n    path.x(hitArea.x());\n    path.y1(hitArea.y1());\n    path.y0(hitArea.y0());\n  }\n\n  return path;\n});\n/** @internal */\n\nvar createLineHitTester = createContinuousSeriesHitTesterCreator(function (rotated) {\n  var path = area();\n  var hitLine = rotated ? dRotateLine : dLine;\n\n  if (rotated) {\n    var getX_1 = hitLine.x();\n    path.y(hitLine.y());\n    path.x0(function (point) {\n      return getX_1(point) + LINE_TOLERANCE;\n    });\n    path.x1(function (point) {\n      return getX_1(point) - LINE_TOLERANCE;\n    });\n  } else {\n    var getY_1 = hitLine.y();\n    path.x(hitLine.x());\n    path.y1(function (point) {\n      return getY_1(point) - LINE_TOLERANCE;\n    });\n    path.y0(function (point) {\n      return getY_1(point) + LINE_TOLERANCE;\n    });\n  }\n\n  return path;\n});\n/** @internal */\n\nvar createSplineHitTester = createContinuousSeriesHitTesterCreator(function (rotated) {\n  var path = area();\n  var hitSpline = rotated ? dRotateSpline : dSpline;\n\n  if (rotated) {\n    var getX_2 = hitSpline.x();\n    path.y(hitSpline.y());\n    path.x1(function (point) {\n      return getX_2(point) - LINE_TOLERANCE;\n    });\n    path.x0(function (point) {\n      return getX_2(point) + LINE_TOLERANCE;\n    });\n  } else {\n    var getY_2 = hitSpline.y();\n    path.x(hitSpline.x());\n    path.y1(function (point) {\n      return getY_2(point) - LINE_TOLERANCE;\n    });\n    path.y0(function (point) {\n      return getY_2(point) + LINE_TOLERANCE;\n    });\n  }\n\n  path.curve(hitSpline.curve());\n  return path;\n});\n\nvar hitTestRect = function (dx, dy, halfX, halfY) {\n  return Math.abs(dx) <= halfX && Math.abs(dy) <= halfY ? {\n    distance: getSegmentLength(dx, dy)\n  } : null;\n}; // Some kind of binary search can be used here as bars can be ordered along argument axis.\n\n/** @internal */\n\n\nvar createBarHitTester = createPointsEnumeratingHitTesterCreator(function (_a, point, rotated) {\n  var _b = __read(_a, 2),\n      px = _b[0],\n      py = _b[1];\n\n  var _c = point,\n      arg = _c.arg,\n      val = _c.val,\n      startVal = _c.startVal,\n      barWidth = _c.barWidth,\n      maxBarWidth = _c.maxBarWidth;\n  var halfWidth = maxBarWidth * barWidth / 2;\n  var halfHeight = Math.abs(val - startVal) / 2;\n  var centerVal = (val + startVal) / 2;\n  var xCenter = rotated ? centerVal : arg;\n  var yCenter = rotated ? arg : centerVal;\n  return hitTestRect(px - xCenter, py - yCenter, rotated ? halfHeight : halfWidth, rotated ? halfWidth : halfHeight);\n});\n/** @internal */\n\nvar createScatterHitTester = createPointsEnumeratingHitTesterCreator(function (_a, obj, rotated) {\n  var _b = __read(_a, 2),\n      px = _b[0],\n      py = _b[1];\n\n  var point = obj.point;\n  var distance = getDistance([px, py], obj, rotated);\n  return distance <= point.size / 2 ? {\n    distance: distance\n  } : null;\n});\n\nvar mapAngleTod3 = function (angle) {\n  var ret = angle + Math.PI / 2;\n  return ret >= 0 ? ret : ret + Math.PI * 2;\n}; // Some kind of binary search can be used here as pies can be ordered along angle axis.\n\n/** @internal */\n\n\nvar createPieHitTester = createPointsEnumeratingHitTesterCreator(function (_a, point) {\n  var _b = __read(_a, 2),\n      px = _b[0],\n      py = _b[1];\n\n  var _c = point,\n      x = _c.arg,\n      y = _c.val,\n      innerRadius = _c.innerRadius,\n      outerRadius = _c.outerRadius,\n      startAngle = _c.startAngle,\n      maxRadius = _c.maxRadius,\n      endAngle = _c.endAngle;\n  var inner = innerRadius * maxRadius;\n  var outer = outerRadius * maxRadius;\n  var rCenter = (inner + outer) / 2;\n  var angleCenter = (startAngle + endAngle) / 2;\n  var halfRadius = (outer - inner) / 2;\n  var halfAngle = Math.abs(startAngle - endAngle) / 2;\n  var dx = px - x;\n  var dy = py - y;\n  var r = getSegmentLength(dx, dy);\n  var angle = mapAngleTod3(Math.atan2(dy, dx)); // This is not a correct distance calculation but for now it will suffice.\n  // For Pie series it would not be actually used.\n\n  return hitTestRect(r - rCenter, angle - angleCenter, halfRadius, halfAngle);\n});\n\nvar buildFilter = function (targets) {\n  var result = {};\n  targets.forEach(function (_a) {\n    var series = _a.series,\n        point = _a.point;\n    (result[series] = result[series] || new Set()).add(point);\n  });\n  return result;\n};\n/** @internal */\n\n\nvar changeSeriesState = function (seriesList, targets, state) {\n  if (targets.length === 0) {\n    return seriesList;\n  }\n\n  var filter = buildFilter(targets);\n  var matches = 0;\n  var result = seriesList.map(function (seriesItem) {\n    var set = filter[seriesItem.name];\n\n    if (!set) {\n      return seriesItem;\n    }\n\n    matches += 1;\n    var props = {\n      state: state\n    };\n\n    if (set.size) {\n      props.points = seriesItem.points.map(function (point) {\n        return set.has(point.index) ? __assign(__assign({}, point), {\n          state: state\n        }) : point;\n      });\n    }\n\n    return __assign(__assign({}, seriesItem), props);\n  }); // This is to prevent false rerenders.\n\n  return matches > 0 ? result : seriesList;\n};\n\nvar getDefaultLegendItems = function (series) {\n  return series.map(function (_a) {\n    var text = _a.name,\n        color = _a.color;\n    return {\n      text: text,\n      color: color\n    };\n  });\n};\n\nvar getPieLegendItems = function (series) {\n  return series[0].points.map(function (_a) {\n    var text = _a.argument,\n        color = _a.color;\n    return {\n      text: text,\n      color: color\n    };\n  });\n}; // The function supports special case when there is single Pie series.\n// There is no common way to tell if series is PieSeries -\n// checking `radius` props will suffice for now.\n\n\nvar isSinglePieSeriesCase = function (series) {\n  return series.length === 1 && 'innerRadius' in series[0] && 'outerRadius' in series[0];\n};\n/** @internal */\n\n\nvar getLegendItems = function (series) {\n  return (isSinglePieSeriesCase(series) ? getPieLegendItems : getDefaultLegendItems)(series);\n};\n\nvar DISTANCE_THRESHOLD = 20;\n\nvar compareHitTargets = function (t1, t2) {\n  var distanceDelta = t1.distance - t2.distance;\n\n  if (Math.abs(distanceDelta) <= DISTANCE_THRESHOLD) {\n    var orderDelta = t2.order - t1.order;\n    return orderDelta !== 0 ? orderDelta : distanceDelta;\n  }\n\n  return distanceDelta;\n};\n\nvar buildEventHandler = function (seriesList, handlers) {\n  var hitTesters = null;\n\n  var createHitTesters = function () {\n    var obj = {};\n    seriesList.forEach(function (seriesItem) {\n      obj[seriesItem.symbolName] = seriesItem.createHitTester(seriesItem.points, seriesItem.rotated);\n    });\n    return obj;\n  };\n\n  return function (e) {\n    var location = getEventCoords(e, getOffset(e.currentTarget));\n    hitTesters = hitTesters || createHitTesters();\n    var targets = [];\n    seriesList.forEach(function (_a) {\n      var series = _a.name,\n          order = _a.index,\n          symbolName = _a.symbolName;\n      var status = hitTesters[symbolName](location);\n\n      if (status) {\n        targets.push.apply(targets, __spread(status.points.map(function (point) {\n          return {\n            series: series,\n            order: order,\n            point: point.index,\n            distance: point.distance\n          };\n        })));\n      }\n    });\n    targets.sort(compareHitTargets);\n    var arg = {\n      location: location,\n      targets: targets,\n      event: e.nativeEvent\n    };\n    handlers.forEach(function (handler) {\n      return handler(arg);\n    });\n  };\n};\n\nvar buildLeaveEventHandler = function (handlers) {\n  return function (e) {\n    var location = getEventCoords(e, getOffset(e.currentTarget));\n    var arg = {\n      location: location,\n      targets: []\n    };\n    handlers.forEach(function (handler) {\n      return handler(arg);\n    });\n  };\n}; // The result is of Map<string, Function> type.\n// Keys are DOM event names (https://developer.mozilla.org/en-US/docs/Web/Events).\n\n/** @internal */\n\n\nvar buildEventHandlers = function (seriesList, _a) {\n  var clickHandlers = _a.clickHandlers,\n      pointerMoveHandlers = _a.pointerMoveHandlers;\n  var handlers = {};\n\n  if (clickHandlers.length) {\n    handlers.click = buildEventHandler(seriesList, clickHandlers);\n  }\n\n  if (pointerMoveHandlers.length) {\n    var moveHandler = buildEventHandler(seriesList, pointerMoveHandlers);\n    var leaveHandler = buildLeaveEventHandler(pointerMoveHandlers);\n\n    if ('ontouchstart' in window) {\n      handlers.touchstart = moveHandler;\n    } else {\n      handlers.mousemove = moveHandler;\n      handlers.mouseleave = leaveHandler;\n    }\n  }\n\n  return handlers;\n};\n\nexport { ARGUMENT_DOMAIN, BAND, BOTTOM, END, HORIZONTAL, HOVERED, LEFT, LINEAR, MIDDLE, RIGHT, SELECTED, START, TOP, VALUE_DOMAIN, VERTICAL, addDomain, addSeries, adjustBarSize, adjustLayout, attachEvents, bBoxes, buildAnimatedStyleGetter, buildEventHandlers, buildScales, changeSeriesState, createAreaHitTester, createBarHitTester, createLineHitTester, createPieHitTester, createReference, createScatterHitTester, createSplineHitTester, dArea, dBar, dLine, dPie, dRotateArea, dRotateLine, dRotateSpline, dSpline, dSymbol, defaultDomains, detachEvents, extendDomains, findSeriesByName, getAreaAnimationStyle, getAreaPointTransformer, getBarPointTransformer, getDeltaForTouches, getEventCoords, getLegendItems, getLinePointTransformer, getOffset, getParameters, getPieAnimationStyle, getPiePointTransformer, getRanges, getRect$1 as getRect, getRotatedPosition, getScatterAnimationStyle, getScatterPointTransformer, getStackedDomains, getStackedSeries, getTickCoordinates, getValueDomainName, getViewport, getVisibility, getWheelDelta, getWidth, gridCoordinatesGetter, growBounds, invertBoundsRange, isHorizontal, isKeyPressed, isMultiTouch, isValidPosition, makeScale, moveBounds, processHandleTooltip, processPointerMove, rangesEqual, scaleBand, scaleBounds, scaleLinear, scaleSeriesPoints, setCursorType, tickCoordinatesGetter, updateDomainItems };","map":null,"metadata":{},"sourceType":"module"}