{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport Target from './target';\nimport { ChartElement, Box } from '../../core';\nimport PointEventsMixin from '../mixins/point-events-mixin';\nimport NoteMixin from '../mixins/note-mixin';\nimport Bar from '../bar-chart/bar';\nimport { WHITE, TOP, RIGHT } from '../../common/constants';\nimport { alignPathToPixel, deepExtend, defined, setDefaultOptions, valueOrDefault } from '../../common';\n\nvar Bullet = function (ChartElement) {\n  function Bullet(value, options) {\n    ChartElement.call(this, options);\n    this.aboveAxis = this.options.aboveAxis;\n    this.color = options.color || WHITE;\n    this.value = value;\n  }\n\n  if (ChartElement) Bullet.__proto__ = ChartElement;\n  Bullet.prototype = Object.create(ChartElement && ChartElement.prototype);\n  Bullet.prototype.constructor = Bullet;\n\n  Bullet.prototype.render = function render() {\n    var options = this.options;\n\n    if (!this._rendered) {\n      this._rendered = true;\n\n      if (defined(this.value.target)) {\n        this.target = new Target({\n          type: options.target.shape,\n          background: options.target.color || this.color,\n          opacity: options.opacity,\n          zIndex: options.zIndex,\n          border: options.target.border,\n          vAlign: TOP,\n          align: RIGHT\n        });\n        this.target.value = this.value;\n        this.target.dataItem = this.dataItem;\n        this.target.series = this.series;\n        this.append(this.target);\n      }\n\n      this.createNote();\n    }\n  };\n\n  Bullet.prototype.reflow = function reflow(box) {\n    this.render();\n    var ref = this;\n    var options = ref.options;\n    var target = ref.target;\n    var chart = ref.owner;\n    var invertAxes = options.invertAxes;\n    var valueAxis = chart.seriesValueAxis(this.options);\n    var categorySlot = chart.categorySlot(chart.categoryAxis, options.categoryIx, valueAxis);\n    var targetValueSlot = valueAxis.getSlot(this.value.target);\n    var targetSlotX = invertAxes ? targetValueSlot : categorySlot;\n    var targetSlotY = invertAxes ? categorySlot : targetValueSlot;\n\n    if (target) {\n      var targetSlot = new Box(targetSlotX.x1, targetSlotY.y1, targetSlotX.x2, targetSlotY.y2);\n      target.options.height = invertAxes ? targetSlot.height() : options.target.line.width;\n      target.options.width = invertAxes ? options.target.line.width : targetSlot.width();\n      target.reflow(targetSlot);\n    }\n\n    if (this.note) {\n      this.note.reflow(box);\n    }\n\n    this.box = box;\n  };\n\n  Bullet.prototype.createVisual = function createVisual() {\n    ChartElement.prototype.createVisual.call(this);\n    var options = this.options;\n    var body = draw.Path.fromRect(this.box.toRect(), {\n      fill: {\n        color: this.color,\n        opacity: options.opacity\n      },\n      stroke: null\n    });\n\n    if (options.border.width > 0) {\n      body.options.set(\"stroke\", {\n        color: options.border.color || this.color,\n        width: options.border.width,\n        dashType: options.border.dashType,\n        opacity: valueOrDefault(options.border.opacity, options.opacity)\n      });\n    }\n\n    this.bodyVisual = body;\n    alignPathToPixel(body);\n    this.visual.append(body);\n  };\n\n  Bullet.prototype.createAnimation = function createAnimation() {\n    if (this.bodyVisual) {\n      this.animation = draw.Animation.create(this.bodyVisual, this.options.animation);\n    }\n  };\n\n  Bullet.prototype.createHighlight = function createHighlight(style) {\n    return draw.Path.fromRect(this.box.toRect(), style);\n  };\n\n  Bullet.prototype.highlightVisual = function highlightVisual() {\n    return this.bodyVisual;\n  };\n\n  Bullet.prototype.highlightVisualArgs = function highlightVisualArgs() {\n    return {\n      rect: this.box.toRect(),\n      visual: this.bodyVisual,\n      options: this.options\n    };\n  };\n\n  Bullet.prototype.formatValue = function formatValue(format) {\n    return this.owner.formatPointValue(this, format);\n  };\n\n  return Bullet;\n}(ChartElement);\n\nBullet.prototype.tooltipAnchor = Bar.prototype.tooltipAnchor;\nsetDefaultOptions(Bullet, {\n  border: {\n    width: 1\n  },\n  vertical: false,\n  opacity: 1,\n  target: {\n    shape: \"\",\n    border: {\n      width: 0,\n      color: \"green\"\n    },\n    line: {\n      width: 2\n    }\n  },\n  tooltip: {\n    format: \"Current: {0}<br />Target: {1}\"\n  }\n});\ndeepExtend(Bullet.prototype, PointEventsMixin);\ndeepExtend(Bullet.prototype, NoteMixin);\nexport default Bullet;","map":null,"metadata":{},"sourceType":"module"}