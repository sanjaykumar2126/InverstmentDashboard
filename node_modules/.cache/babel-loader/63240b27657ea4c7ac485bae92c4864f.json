{"ast":null,"code":"import { Tooltip as SVGTooltip } from '@syncfusion/ej2-svg-base';\nimport { getElement } from '../../common/utils/helper';\nimport { stopTimer } from '../../common/utils/helper';\nimport { firstToLowerCase } from '../../index';\nimport { createTemplate } from '../../index';\nimport { measureText } from '@syncfusion/ej2-svg-base';\nimport { createElement } from '@syncfusion/ej2-base';\n/**\n * `Tooltip` module is used to render the tooltip for chart series.\n */\n\nvar RangeTooltip =\n/** @class */\nfunction () {\n  /**\n   * Constructor for tooltip module.\n   * @private.\n   */\n  function RangeTooltip(range) {\n    this.control = range;\n    this.elementId = range.element.id;\n  }\n  /**\n   * Left tooltip method called here\n   * @param rangeSlider\n   */\n\n\n  RangeTooltip.prototype.renderLeftTooltip = function (rangeSlider) {\n    this.fadeOutTooltip();\n    var content = this.getTooltipContent(rangeSlider.currentStart);\n    var contentWidth = this.getContentSize(content);\n    var rect = this.control.enableRtl ? rangeSlider.rightRect : rangeSlider.leftRect;\n\n    if (contentWidth > rect.width) {\n      rect = rangeSlider.midRect;\n    }\n\n    this.leftTooltip = this.renderTooltip(rect, this.createElement('_leftTooltip'), rangeSlider.startX, content);\n  };\n  /**\n   * get the content size\n   * @param value\n   */\n\n\n  RangeTooltip.prototype.getContentSize = function (value) {\n    var width;\n    var font = this.control.tooltip.textStyle;\n\n    if (this.control.tooltip.template) {\n      width = createTemplate(createElement('div', {\n        id: 'measureElement',\n        styles: 'position: absolute;'\n      }), 0, this.control.tooltip.template, this.control).getBoundingClientRect().width;\n    } else {\n      // 20 for tooltip padding\n      width = measureText(value[0], font).width + 20;\n    }\n\n    return width;\n  };\n  /**\n   * Right tooltip method called here\n   * @param rangeSlider\n   */\n\n\n  RangeTooltip.prototype.renderRightTooltip = function (rangeSlider) {\n    this.fadeOutTooltip();\n    var content = this.getTooltipContent(rangeSlider.currentEnd);\n    var contentWidth = this.getContentSize(content);\n    var rect = this.control.enableRtl ? rangeSlider.leftRect : rangeSlider.rightRect;\n\n    if (contentWidth > rect.width) {\n      rect = rangeSlider.midRect;\n      rect.x = !this.control.series.length ? rect.x : 0;\n    }\n\n    this.rightTooltip = this.renderTooltip(rect, this.createElement('_rightTooltip'), rangeSlider.endX, content);\n  };\n  /**\n   * Tooltip element creation\n   * @param id\n   */\n\n\n  RangeTooltip.prototype.createElement = function (id) {\n    if (getElement(this.elementId + id)) {\n      return getElement(this.elementId + id);\n    } else {\n      var element = document.createElement('div');\n      element.id = this.elementId + id;\n      element.className = 'ejSVGTooltip';\n      element.setAttribute('style', 'pointer-events:none; position:absolute;z-index: 1');\n\n      if (!this.control.stockChart) {\n        getElement(this.elementId + '_Secondary_Element').appendChild(element);\n      } else {\n        var stockChart = this.control.stockChart;\n        getElement(stockChart.element.id + '_Secondary_Element').appendChild(element);\n        element.style.transform = 'translateY(' + (stockChart.availableSize.height - stockChart.toolbarHeight - 80 + stockChart.toolbarHeight + stockChart.titleSize.height) + 'px)';\n      }\n\n      return element;\n    }\n  };\n  /**\n   * Tooltip render called here\n   * @param bounds\n   * @param parent\n   * @param pointX\n   * @param value\n   */\n\n\n  RangeTooltip.prototype.renderTooltip = function (bounds, parent, pointX, content) {\n    var control = this.control;\n    var tooltip = control.tooltip;\n    var argsData = {\n      cancel: false,\n      name: 'tooltipRender',\n      text: content,\n      textStyle: tooltip.textStyle\n    };\n    this.control.trigger('tooltipRender', argsData);\n    var left = control.svgObject.getBoundingClientRect().left - control.element.getBoundingClientRect().left;\n\n    if (!argsData.cancel) {\n      return new SVGTooltip({\n        location: {\n          x: pointX,\n          y: control.rangeSlider.sliderY\n        },\n        content: argsData.text,\n        marginX: 2,\n        enableShadow: false,\n        marginY: 2,\n        arrowPadding: 8,\n        rx: 0,\n        ry: 0,\n        inverted: control.series.length > 0,\n        areaBounds: bounds,\n        fill: tooltip.fill,\n        theme: this.control.theme,\n        //enableShadow: false,\n        clipBounds: {\n          x: left\n        },\n        border: tooltip.border,\n        opacity: tooltip.opacity,\n        template: tooltip.template,\n        textStyle: argsData.textStyle,\n        availableSize: control.availableSize,\n        data: {\n          'start': this.getTooltipContent(this.control.startValue)[0],\n          'end': this.getTooltipContent(this.control.endValue)[0],\n          'value': content[0]\n        }\n      }, parent);\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Tooltip content processed here\n   * @param value\n   */\n\n\n  RangeTooltip.prototype.getTooltipContent = function (value) {\n    var control = this.control;\n    var tooltip = control.tooltip;\n    var xAxis = control.chartSeries.xAxis;\n    var text;\n    var format = tooltip.format || xAxis.labelFormat;\n    var isCustom = format.match('{value}') !== null;\n    var valueType = xAxis.valueType;\n\n    if (valueType === 'DateTime') {\n      text = control.intl.getDateFormat({\n        format: format || 'MM/dd/yyyy',\n        type: firstToLowerCase(control.skeletonType),\n        skeleton: control.dateTimeModule.getSkeleton(xAxis, null, null)\n      })(new Date(value));\n    } else {\n      xAxis.format = control.intl.getNumberFormat({\n        format: isCustom ? '' : format,\n        useGrouping: control.useGroupingSeparator\n      });\n      text = control.doubleModule.formatValue(xAxis, isCustom, format, valueType === 'Logarithmic' ? Math.pow(xAxis.logBase, value) : value);\n    }\n\n    return [text];\n  };\n  /**\n   * Fadeout animation performed here\n   */\n\n\n  RangeTooltip.prototype.fadeOutTooltip = function () {\n    var _this = this;\n\n    var tooltip = this.control.tooltip;\n\n    if (tooltip.displayMode === 'OnDemand') {\n      stopTimer(this.toolTipInterval);\n\n      if (this.rightTooltip) {\n        this.toolTipInterval = setTimeout(function () {\n          _this.leftTooltip.fadeOut();\n\n          _this.rightTooltip.fadeOut();\n        }, 1000);\n      }\n    }\n  };\n  /**\n   * Get module name.\n   */\n\n\n  RangeTooltip.prototype.getModuleName = function () {\n    return 'RangeTooltip';\n  };\n  /**\n   * To destroy the tooltip.\n   * @return {void}\n   * @private\n   */\n\n\n  RangeTooltip.prototype.destroy = function (chart) {// Destroy method called here\n  };\n\n  return RangeTooltip;\n}();\n\nexport { RangeTooltip };","map":null,"metadata":{},"sourceType":"module"}