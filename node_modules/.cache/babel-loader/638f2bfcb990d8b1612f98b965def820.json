{"ast":null,"code":"import { ChartElement, TextBox, Box } from '../../core';\nimport { FADEIN, INITIAL_ANIMATION_DURATION, INSIDE_END, INSIDE_BASE, OUTSIDE_END } from '../constants';\nimport { CENTER, TOP, BOTTOM, LEFT, RIGHT, X, Y, BLACK } from '../../common/constants';\nimport { getSpacing, setDefaultOptions } from '../../common';\n\nvar BarLabel = function (ChartElement) {\n  function BarLabel(content, options, pointData) {\n    ChartElement.call(this, options);\n    this.textBox = new TextBox(content, this.options, pointData);\n    this.append(this.textBox);\n  }\n\n  if (ChartElement) BarLabel.__proto__ = ChartElement;\n  BarLabel.prototype = Object.create(ChartElement && ChartElement.prototype);\n  BarLabel.prototype.constructor = BarLabel;\n\n  BarLabel.prototype.createVisual = function createVisual() {\n    this.textBox.options.noclip = this.options.noclip;\n  };\n\n  BarLabel.prototype.reflow = function reflow(targetBox) {\n    var options = this.options;\n    var vertical = options.vertical;\n    var aboveAxis = options.aboveAxis;\n    var text = this.children[0];\n    var textOptions = text.options;\n    var box = text.box;\n    var padding = text.options.padding;\n    var labelBox = targetBox;\n    textOptions.align = vertical ? CENTER : LEFT;\n    textOptions.vAlign = vertical ? TOP : CENTER;\n\n    if (options.position === INSIDE_END) {\n      if (vertical) {\n        textOptions.vAlign = TOP;\n\n        if (!aboveAxis && box.height() < targetBox.height()) {\n          textOptions.vAlign = BOTTOM;\n        }\n      } else {\n        textOptions.align = aboveAxis ? RIGHT : LEFT;\n      }\n    } else if (options.position === CENTER) {\n      textOptions.vAlign = CENTER;\n      textOptions.align = CENTER;\n    } else if (options.position === INSIDE_BASE) {\n      if (vertical) {\n        textOptions.vAlign = aboveAxis ? BOTTOM : TOP;\n      } else {\n        textOptions.align = aboveAxis ? LEFT : RIGHT;\n      }\n    } else if (options.position === OUTSIDE_END) {\n      if (vertical) {\n        if (aboveAxis) {\n          labelBox = new Box(targetBox.x1, targetBox.y1 - box.height(), targetBox.x2, targetBox.y1);\n        } else {\n          labelBox = new Box(targetBox.x1, targetBox.y2, targetBox.x2, targetBox.y2 + box.height());\n        }\n      } else {\n        textOptions.align = CENTER;\n\n        if (aboveAxis) {\n          labelBox = new Box(targetBox.x2, targetBox.y1, targetBox.x2 + box.width(), targetBox.y2);\n        } else {\n          labelBox = new Box(targetBox.x1 - box.width(), targetBox.y1, targetBox.x1, targetBox.y2);\n        }\n      }\n    }\n\n    if (!options.rotation) {\n      if (vertical) {\n        padding.left = padding.right = (labelBox.width() - text.contentBox.width()) / 2;\n      } else {\n        padding.top = padding.bottom = (labelBox.height() - text.contentBox.height()) / 2;\n      }\n    }\n\n    text.reflow(labelBox);\n  };\n\n  BarLabel.prototype.alignToClipBox = function alignToClipBox(clipBox) {\n    var vertical = this.options.vertical;\n    var field = vertical ? Y : X;\n    var start = field + \"1\";\n    var end = field + \"2\";\n    var text = this.children[0];\n    var parentBox = this.parent.box;\n\n    if (parentBox[start] < clipBox[start] || clipBox[end] < parentBox[end]) {\n      var targetBox = text.paddingBox.clone();\n      targetBox[start] = Math.max(parentBox[start], clipBox[start]);\n      targetBox[end] = Math.min(parentBox[end], clipBox[end]);\n      this.reflow(targetBox);\n    }\n  };\n\n  return BarLabel;\n}(ChartElement);\n\nsetDefaultOptions(BarLabel, {\n  position: OUTSIDE_END,\n  margin: getSpacing(3),\n  padding: getSpacing(4),\n  color: BLACK,\n  background: \"\",\n  border: {\n    width: 1,\n    color: \"\"\n  },\n  aboveAxis: true,\n  vertical: false,\n  animation: {\n    type: FADEIN,\n    delay: INITIAL_ANIMATION_DURATION\n  },\n  zIndex: 2\n});\nexport default BarLabel;","map":null,"metadata":{},"sourceType":"module"}