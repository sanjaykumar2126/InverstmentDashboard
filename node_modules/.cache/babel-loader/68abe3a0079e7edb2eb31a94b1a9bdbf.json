{"ast":null,"code":"import { ChartElement, BoxElement, Title, Box } from '../core';\nimport { ChartPane } from './api-elements';\nimport ChartContainer from './chart-container';\nimport { PANE_RENDER } from './constants';\nimport { TOP, LEFT, X, Y } from '../common/constants';\nimport { append, deepExtend, isObject, last, setDefaultOptions } from '../common';\n\nvar Pane = function (BoxElement) {\n  function Pane(options) {\n    BoxElement.call(this, options);\n    this.id = paneID();\n    this.createTitle();\n    this.content = new ChartElement();\n    this.chartContainer = new ChartContainer({}, this);\n    this.append(this.content);\n    this.axes = [];\n    this.charts = [];\n  }\n\n  if (BoxElement) Pane.__proto__ = BoxElement;\n  Pane.prototype = Object.create(BoxElement && BoxElement.prototype);\n  Pane.prototype.constructor = Pane;\n\n  Pane.prototype.createTitle = function createTitle() {\n    var titleOptions = this.options.title;\n\n    if (isObject(titleOptions)) {\n      titleOptions = deepExtend({}, titleOptions, {\n        align: titleOptions.position,\n        position: TOP\n      });\n    }\n\n    this.title = Title.buildTitle(titleOptions, this, Pane.prototype.options.title);\n  };\n\n  Pane.prototype.appendAxis = function appendAxis(axis) {\n    this.content.append(axis);\n    this.axes.push(axis);\n    axis.pane = this;\n  };\n\n  Pane.prototype.appendAxisAt = function appendAxisAt(axis, pos) {\n    this.content.append(axis);\n    this.axes.splice(pos, 0, axis);\n    axis.pane = this;\n  };\n\n  Pane.prototype.appendChart = function appendChart(chart) {\n    if (this.chartContainer.parent !== this.content) {\n      this.content.append(this.chartContainer);\n    }\n\n    this.charts.push(chart);\n    this.chartContainer.append(chart);\n    chart.pane = this;\n  };\n\n  Pane.prototype.empty = function empty() {\n    var this$1 = this;\n    var plotArea = this.parent;\n\n    if (plotArea) {\n      for (var i = 0; i < this.axes.length; i++) {\n        plotArea.removeAxis(this$1.axes[i]);\n      }\n\n      for (var i$1 = 0; i$1 < this.charts.length; i$1++) {\n        plotArea.removeChart(this$1.charts[i$1]);\n      }\n    }\n\n    this.axes = [];\n    this.charts = [];\n    this.content.destroy();\n    this.content.children = [];\n    this.chartContainer.children = [];\n  };\n\n  Pane.prototype.reflow = function reflow(targetBox) {\n    // Content (such as charts) is rendered, but excluded from reflows\n    var content;\n\n    if (last(this.children) === this.content) {\n      content = this.children.pop();\n    }\n\n    BoxElement.prototype.reflow.call(this, targetBox);\n\n    if (content) {\n      this.children.push(content);\n    }\n\n    if (this.title) {\n      this.contentBox.y1 += this.title.box.height();\n    }\n  };\n\n  Pane.prototype.visualStyle = function visualStyle() {\n    var style = BoxElement.prototype.visualStyle.call(this);\n    style.zIndex = -10;\n    return style;\n  };\n\n  Pane.prototype.renderComplete = function renderComplete() {\n    if (this.options.visible) {\n      this.createGridLines();\n    }\n  };\n\n  Pane.prototype.stackRoot = function stackRoot() {\n    return this;\n  };\n\n  Pane.prototype.clipRoot = function clipRoot() {\n    return this;\n  };\n\n  Pane.prototype.createGridLines = function createGridLines() {\n    var axes = this.axes;\n    var allAxes = axes.concat(this.parent.axes);\n    var vGridLines = [];\n    var hGridLines = []; // TODO\n    // Is full combination really necessary?\n\n    for (var i = 0; i < axes.length; i++) {\n      var axis = axes[i];\n      var vertical = axis.options.vertical;\n      var gridLines = vertical ? vGridLines : hGridLines;\n\n      for (var j = 0; j < allAxes.length; j++) {\n        if (gridLines.length === 0) {\n          var altAxis = allAxes[j];\n\n          if (vertical !== altAxis.options.vertical) {\n            append(gridLines, axis.createGridLines(altAxis));\n          }\n        }\n      }\n    }\n  };\n\n  Pane.prototype.refresh = function refresh() {\n    this.visual.clear();\n    this.content.parent = null;\n    this.content.createGradient = this.createGradient.bind(this);\n    this.content.renderVisual();\n    this.content.parent = this;\n\n    if (this.title) {\n      this.visual.append(this.title.visual);\n    }\n\n    this.visual.append(this.content.visual);\n    this.renderComplete();\n    this.notifyRender();\n  };\n\n  Pane.prototype.chartsBox = function chartsBox() {\n    var axes = this.axes;\n    var length = axes.length;\n    var chartsBox = new Box();\n\n    for (var idx = 0; idx < length; idx++) {\n      var axis = axes[idx];\n      var axisValueField = axis.options.vertical ? Y : X;\n      var lineBox = axis.lineBox();\n      chartsBox[axisValueField + 1] = lineBox[axisValueField + 1];\n      chartsBox[axisValueField + 2] = lineBox[axisValueField + 2];\n    }\n\n    if (chartsBox.x2 === 0) {\n      var allAxes = this.parent.axes;\n      var length$1 = allAxes.length;\n\n      for (var idx$1 = 0; idx$1 < length$1; idx$1++) {\n        var axis$1 = allAxes[idx$1];\n\n        if (!axis$1.options.vertical) {\n          var lineBox$1 = axis$1.lineBox();\n          chartsBox.x1 = lineBox$1.x1;\n          chartsBox.x2 = lineBox$1.x2;\n        }\n      }\n    }\n\n    return chartsBox;\n  };\n\n  Pane.prototype.clipBox = function clipBox() {\n    return this.chartContainer.clipBox;\n  };\n\n  Pane.prototype.notifyRender = function notifyRender() {\n    var service = this.getService();\n\n    if (service) {\n      service.notify(PANE_RENDER, {\n        pane: new ChartPane(this),\n        index: this.paneIndex,\n        name: this.options.name\n      });\n    }\n  };\n\n  return Pane;\n}(BoxElement);\n\nvar ID = 1;\n\nfunction paneID() {\n  return \"pane\" + ID++;\n}\n\nPane.prototype.isStackRoot = true;\nsetDefaultOptions(Pane, {\n  zIndex: -1,\n  shrinkToFit: true,\n  title: {\n    align: LEFT\n  },\n  visible: true\n});\nexport default Pane;","map":null,"metadata":{},"sourceType":"module"}