{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { withInRange, getPoint } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { MultiColoredSeries } from './multi-colored-base';\n/**\n * `MultiColoredLineSeries` used to render the line series with multi color.\n */\n\nvar MultiColoredLineSeries =\n/** @class */\nfunction (_super) {\n  __extends(MultiColoredLineSeries, _super);\n\n  function MultiColoredLineSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render Line Series.\n   * @return {void}.\n   * @private\n   */\n\n\n  MultiColoredLineSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n    var previous = null;\n    var startPoint = 'M';\n    var visiblePoints = this.enableComplexProperty(series);\n    var options = [];\n    var direction = '';\n    var segments = this.sortSegments(series, series.segments);\n\n    for (var _i = 0, visiblePoints_1 = visiblePoints; _i < visiblePoints_1.length; _i++) {\n      var point = visiblePoints_1[_i];\n      point.regions = [];\n\n      if (point.visible && withInRange(visiblePoints[point.index - 1], point, visiblePoints[point.index + 1], series)) {\n        direction += this.getLineDirection(previous, point, series, isInverted, getPoint, startPoint);\n\n        if (previous != null) {\n          if (this.setPointColor(point, previous, series, series.segmentAxis === 'X', segments)) {\n            options.push(new PathOption(series.chart.element.id + '_Series_' + series.index + '_Point_' + previous.index, 'none', series.width, series.setPointColor(previous, series.interior), series.opacity, series.dashArray, direction));\n            startPoint = 'M';\n            direction = '';\n          } else {\n            startPoint = 'L';\n          }\n        } else {\n          this.setPointColor(point, null, series, series.segmentAxis === 'X', segments);\n        }\n\n        previous = point;\n        this.storePointLocation(point, series, isInverted, getPoint);\n      } else {\n        previous = series.emptyPointSettings.mode === 'Drop' ? previous : null;\n        startPoint = series.emptyPointSettings.mode === 'Drop' ? startPoint : 'M';\n        point.symbolLocations = [];\n      }\n    }\n\n    if (direction !== '') {\n      options.push(new PathOption(series.chart.element.id + '_Series_' + series.index, 'none', series.width, series.setPointColor(visiblePoints[visiblePoints.length - 1], series.interior), series.opacity, series.dashArray, direction));\n    }\n\n    this.applySegmentAxis(series, options, segments);\n    this.renderMarker(series);\n  };\n  /**\n   * Animates the series.\n   * @param  {Series} series - Defines the series to animate.\n   * @return {void}\n   */\n\n\n  MultiColoredLineSeries.prototype.doAnimation = function (series) {\n    this.doLinearAnimation(series, series.animation);\n  };\n  /**\n   * Get module name.\n   */\n\n\n  MultiColoredLineSeries.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'MultiColoredLineSeries';\n  };\n  /**\n   * To destroy the line series.\n   * @return {void}\n   * @private\n   */\n\n\n  MultiColoredLineSeries.prototype.destroy = function (chart) {\n    /**\n     * Destroy method performed here\n     */\n  };\n\n  return MultiColoredLineSeries;\n}(MultiColoredSeries);\n\nexport { MultiColoredLineSeries };","map":null,"metadata":{},"sourceType":"module"}