{"ast":null,"code":"import { ChartElement, BoxElement, Box } from '../../core';\nimport LegendLayout from './legend-layout';\nimport LegendItem from './legend-item';\nimport { TOP, RIGHT, BOTTOM, LEFT, CENTER, X, Y, BLACK } from '../../common/constants';\nimport { deepExtend, defined, getSpacing, inArray, setDefaultOptions } from '../../common';\nvar HORIZONTAL = \"horizontal\";\nvar POINTER = \"pointer\";\nvar CUSTOM = \"custom\";\n\nvar Legend = function (ChartElement) {\n  function Legend(options, chartService) {\n    if (chartService === void 0) chartService = {};\n    ChartElement.call(this, options);\n    this.chartService = chartService;\n\n    if (!inArray(this.options.position, [TOP, RIGHT, BOTTOM, LEFT, CUSTOM])) {\n      this.options.position = RIGHT;\n    }\n\n    this.createContainer();\n    this.createItems();\n  }\n\n  if (ChartElement) Legend.__proto__ = ChartElement;\n  Legend.prototype = Object.create(ChartElement && ChartElement.prototype);\n  Legend.prototype.constructor = Legend;\n\n  Legend.prototype.createContainer = function createContainer() {\n    var options = this.options;\n    var position = options.position;\n    var userAlign = options.align;\n    var align = position;\n    var vAlign = CENTER;\n\n    if (position === CUSTOM) {\n      align = LEFT;\n    } else if (inArray(position, [TOP, BOTTOM])) {\n      if (userAlign === \"start\") {\n        align = LEFT;\n      } else if (userAlign === \"end\") {\n        align = RIGHT;\n      } else {\n        align = CENTER;\n      }\n\n      vAlign = position;\n    } else if (userAlign) {\n      if (userAlign === \"start\") {\n        vAlign = TOP;\n      } else if (userAlign === \"end\") {\n        vAlign = BOTTOM;\n      }\n    }\n\n    this.container = new BoxElement({\n      margin: options.margin,\n      padding: options.padding,\n      background: options.background,\n      border: options.border,\n      vAlign: vAlign,\n      align: align,\n      zIndex: options.zIndex,\n      shrinkToFit: true\n    });\n    this.append(this.container);\n  };\n\n  Legend.prototype.createItems = function createItems() {\n    var chartService = this.getService();\n    var options = this.options;\n    var vertical = this.isVertical();\n    var innerElement = new LegendLayout({\n      vertical: vertical,\n      spacing: options.spacing,\n      rtl: chartService.rtl\n    }, chartService);\n    var items = options.items;\n\n    if (options.reverse) {\n      items = items.slice(0).reverse();\n    }\n\n    var count = items.length;\n\n    for (var i = 0; i < count; i++) {\n      var item = items[i];\n      innerElement.append(new LegendItem(deepExtend({}, {\n        markers: options.markers,\n        labels: options.labels,\n        rtl: chartService.rtl\n      }, options.item, item)));\n    }\n\n    innerElement.render();\n    this.container.append(innerElement);\n  };\n\n  Legend.prototype.isVertical = function isVertical() {\n    var ref = this.options;\n    var orientation = ref.orientation;\n    var position = ref.position;\n    var vertical = position === CUSTOM && orientation !== HORIZONTAL || (defined(orientation) ? orientation !== HORIZONTAL : inArray(position, [LEFT, RIGHT]));\n    return vertical;\n  };\n\n  Legend.prototype.hasItems = function hasItems() {\n    return this.container.children[0].children.length > 0;\n  };\n\n  Legend.prototype.reflow = function reflow(targetBox) {\n    var options = this.options;\n    var legendBox = targetBox.clone();\n\n    if (!this.hasItems()) {\n      this.box = legendBox;\n      return;\n    }\n\n    if (options.position === CUSTOM) {\n      this.containerCustomReflow(legendBox);\n      this.box = legendBox;\n    } else {\n      this.containerReflow(legendBox);\n    }\n  };\n\n  Legend.prototype.containerReflow = function containerReflow(targetBox) {\n    var ref = this;\n    var options = ref.options;\n    var container = ref.container;\n    var position = options.position;\n    var width = options.width;\n    var height = options.height;\n    var pos = position === TOP || position === BOTTOM ? X : Y;\n    var vertical = this.isVertical();\n    var alignTarget = targetBox.clone();\n    var containerBox = targetBox.clone();\n\n    if (position === LEFT || position === RIGHT) {\n      containerBox.y1 = alignTarget.y1 = 0;\n    }\n\n    if (vertical && height) {\n      containerBox.y2 = containerBox.y1 + height;\n      containerBox.align(alignTarget, Y, container.options.vAlign);\n    } else if (!vertical && width) {\n      containerBox.x2 = containerBox.x1 + width;\n      containerBox.align(alignTarget, X, container.options.align);\n    }\n\n    container.reflow(containerBox);\n    containerBox = container.box;\n    var box = containerBox.clone();\n\n    if (options.offsetX || options.offsetY) {\n      containerBox.translate(options.offsetX, options.offsetY);\n      this.container.reflow(containerBox);\n    }\n\n    box[pos + 1] = targetBox[pos + 1];\n    box[pos + 2] = targetBox[pos + 2];\n    this.box = box;\n  };\n\n  Legend.prototype.containerCustomReflow = function containerCustomReflow(targetBox) {\n    var ref = this;\n    var options = ref.options;\n    var container = ref.container;\n    var offsetX = options.offsetX;\n    var offsetY = options.offsetY;\n    var width = options.width;\n    var height = options.height;\n    var vertical = this.isVertical();\n    var containerBox = targetBox.clone();\n\n    if (vertical && height) {\n      containerBox.y2 = containerBox.y1 + height;\n    } else if (!vertical && width) {\n      containerBox.x2 = containerBox.x1 + width;\n    }\n\n    container.reflow(containerBox);\n    containerBox = container.box;\n    container.reflow(new Box(offsetX, offsetY, offsetX + containerBox.width(), offsetY + containerBox.height()));\n  };\n\n  Legend.prototype.renderVisual = function renderVisual() {\n    if (this.hasItems()) {\n      ChartElement.prototype.renderVisual.call(this);\n    }\n  };\n\n  return Legend;\n}(ChartElement);\n\nsetDefaultOptions(Legend, {\n  position: RIGHT,\n  items: [],\n  offsetX: 0,\n  offsetY: 0,\n  margin: getSpacing(5),\n  padding: getSpacing(5),\n  border: {\n    color: BLACK,\n    width: 0\n  },\n  item: {\n    cursor: POINTER,\n    spacing: 6\n  },\n  spacing: 6,\n  background: \"\",\n  zIndex: 1,\n  markers: {\n    border: {\n      width: 0\n    },\n    width: 15,\n    height: 3,\n    type: \"rect\",\n    align: LEFT,\n    vAlign: CENTER\n  }\n});\nexport default Legend;","map":null,"metadata":{},"sourceType":"module"}