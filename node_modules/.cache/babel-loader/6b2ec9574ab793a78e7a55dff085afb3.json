{"ast":null,"code":"import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\nimport BoxElement from './box-element';\nimport { CIRCLE, TRIANGLE, CROSS, CENTER, COORD_PRECISION } from '../common/constants';\nimport { round, setDefaultOptions } from '../common';\n\nvar ShapeElement = function (BoxElement) {\n  function ShapeElement(options, pointData) {\n    BoxElement.call(this, options);\n    this.pointData = pointData;\n  }\n\n  if (BoxElement) ShapeElement.__proto__ = BoxElement;\n  ShapeElement.prototype = Object.create(BoxElement && BoxElement.prototype);\n  ShapeElement.prototype.constructor = ShapeElement;\n\n  ShapeElement.prototype.getElement = function getElement() {\n    var ref = this;\n    var options = ref.options;\n    var box = ref.paddingBox;\n    var type = options.type;\n    var rotation = options.rotation;\n    var center = box.center();\n    var halfWidth = box.width() / 2;\n\n    if (!options.visible || !this.hasBox()) {\n      return null;\n    }\n\n    var style = this.visualStyle();\n    var element;\n\n    if (type === CIRCLE) {\n      element = new draw.Circle(new geom.Circle([round(box.x1 + halfWidth, COORD_PRECISION), round(box.y1 + box.height() / 2, COORD_PRECISION)], halfWidth), style);\n    } else if (type === TRIANGLE) {\n      element = draw.Path.fromPoints([[box.x1 + halfWidth, box.y1], [box.x1, box.y2], [box.x2, box.y2]], style).close();\n    } else if (type === CROSS) {\n      element = new draw.MultiPath(style);\n      element.moveTo(box.x1, box.y1).lineTo(box.x2, box.y2);\n      element.moveTo(box.x1, box.y2).lineTo(box.x2, box.y1);\n    } else {\n      element = draw.Path.fromRect(box.toRect(), style);\n    }\n\n    if (rotation) {\n      element.transform(geom.transform().rotate(-rotation, [center.x, center.y]));\n    }\n\n    element.options.zIndex = options.zIndex;\n    return element;\n  };\n\n  ShapeElement.prototype.createElement = function createElement() {\n    var this$1 = this;\n    var customVisual = this.options.visual;\n    var pointData = this.pointData || {};\n    var visual;\n\n    if (customVisual) {\n      visual = customVisual({\n        value: pointData.value,\n        dataItem: pointData.dataItem,\n        sender: this.getSender(),\n        series: pointData.series,\n        category: pointData.category,\n        rect: this.paddingBox.toRect(),\n        options: this.visualOptions(),\n        createVisual: function () {\n          return this$1.getElement();\n        }\n      });\n    } else {\n      visual = this.getElement();\n    }\n\n    return visual;\n  };\n\n  ShapeElement.prototype.visualOptions = function visualOptions() {\n    var options = this.options;\n    return {\n      background: options.background,\n      border: options.border,\n      margin: options.margin,\n      padding: options.padding,\n      type: options.type,\n      size: options.width,\n      visible: options.visible\n    };\n  };\n\n  ShapeElement.prototype.createVisual = function createVisual() {\n    this.visual = this.createElement();\n  };\n\n  return ShapeElement;\n}(BoxElement);\n\nsetDefaultOptions(ShapeElement, {\n  type: CIRCLE,\n  align: CENTER,\n  vAlign: CENTER\n});\nexport default ShapeElement;","map":null,"metadata":{},"sourceType":"module"}