{"ast":null,"code":"import { Color } from '@progress/kendo-drawing';\nimport Candlestick from '../candlestick-chart/candlestick';\nimport PointEventsMixin from '../mixins/point-events-mixin';\nimport { ShapeElement } from '../../core';\nimport { LINE_MARKER_SIZE, BORDER_BRIGHTNESS } from '../constants';\nimport { CROSS, CIRCLE, WHITE } from '../../common/constants';\nimport { deepExtend, defined, setDefaultOptions } from '../../common';\n\nvar BoxPlot = function (Candlestick) {\n  function BoxPlot(value, options) {\n    Candlestick.call(this, value, options);\n    this.createNote();\n  }\n\n  if (Candlestick) BoxPlot.__proto__ = Candlestick;\n  BoxPlot.prototype = Object.create(Candlestick && Candlestick.prototype);\n  BoxPlot.prototype.constructor = BoxPlot;\n\n  BoxPlot.prototype.reflow = function reflow(box) {\n    var ref = this;\n    var options = ref.options;\n    var value = ref.value;\n    var chart = ref.owner;\n    var valueAxis = chart.seriesValueAxis(options);\n    var whiskerSlot, boxSlot;\n    this.boxSlot = boxSlot = valueAxis.getSlot(value.q1, value.q3);\n    this.realBody = boxSlot;\n    this.reflowBoxSlot(box);\n    this.whiskerSlot = whiskerSlot = valueAxis.getSlot(value.lower, value.upper);\n    this.reflowWhiskerSlot(box);\n    var medianSlot = valueAxis.getSlot(value.median);\n\n    if (value.mean) {\n      var meanSlot = valueAxis.getSlot(value.mean);\n      this.meanPoints = this.calcMeanPoints(box, meanSlot);\n    }\n\n    this.whiskerPoints = this.calcWhiskerPoints(boxSlot, whiskerSlot);\n    this.medianPoints = this.calcMedianPoints(box, medianSlot);\n    this.box = whiskerSlot.clone().wrap(boxSlot);\n    this.reflowNote();\n  };\n\n  BoxPlot.prototype.reflowBoxSlot = function reflowBoxSlot(box) {\n    this.boxSlot.x1 = box.x1;\n    this.boxSlot.x2 = box.x2;\n  };\n\n  BoxPlot.prototype.reflowWhiskerSlot = function reflowWhiskerSlot(box) {\n    this.whiskerSlot.x1 = box.x1;\n    this.whiskerSlot.x2 = box.x2;\n  };\n\n  BoxPlot.prototype.calcMeanPoints = function calcMeanPoints(box, meanSlot) {\n    return [[[box.x1, meanSlot.y1], [box.x2, meanSlot.y1]]];\n  };\n\n  BoxPlot.prototype.calcWhiskerPoints = function calcWhiskerPoints(boxSlot, whiskerSlot) {\n    var mid = whiskerSlot.center().x;\n    return [[[mid - 5, whiskerSlot.y1], [mid + 5, whiskerSlot.y1], [mid, whiskerSlot.y1], [mid, boxSlot.y1]], [[mid - 5, whiskerSlot.y2], [mid + 5, whiskerSlot.y2], [mid, whiskerSlot.y2], [mid, boxSlot.y2]]];\n  };\n\n  BoxPlot.prototype.calcMedianPoints = function calcMedianPoints(box, medianSlot) {\n    return [[[box.x1, medianSlot.y1], [box.x2, medianSlot.y1]]];\n  };\n\n  BoxPlot.prototype.renderOutliers = function renderOutliers(options) {\n    var this$1 = this;\n    var value = this.value;\n    var outliers = value.outliers || [];\n    var outerFence = Math.abs(value.q3 - value.q1) * 3;\n    var elements = [];\n    var markers = options.markers || {};\n\n    for (var i = 0; i < outliers.length; i++) {\n      var outlierValue = outliers[i];\n\n      if (outlierValue < value.q3 + outerFence && outlierValue > value.q1 - outerFence) {\n        markers = options.outliers;\n      } else {\n        markers = options.extremes;\n      }\n\n      var markersBorder = deepExtend({}, markers.border);\n\n      if (!defined(markersBorder.color)) {\n        if (defined(this$1.color)) {\n          markersBorder.color = this$1.color;\n        } else {\n          markersBorder.color = new Color(markers.background).brightness(BORDER_BRIGHTNESS).toHex();\n        }\n      }\n\n      var shape = new ShapeElement({\n        type: markers.type,\n        width: markers.size,\n        height: markers.size,\n        rotation: markers.rotation,\n        background: markers.background,\n        border: markersBorder,\n        opacity: markers.opacity\n      });\n      shape.value = outlierValue;\n      elements.push(shape);\n    }\n\n    this.reflowOutliers(elements);\n    return elements;\n  };\n\n  BoxPlot.prototype.reflowOutliers = function reflowOutliers(outliers) {\n    var this$1 = this;\n    var valueAxis = this.owner.seriesValueAxis(this.options);\n    var center = this.box.center();\n\n    for (var i = 0; i < outliers.length; i++) {\n      var outlierValue = outliers[i].value;\n      var markerBox = valueAxis.getSlot(outlierValue);\n\n      if (this$1.options.vertical) {\n        markerBox.move(center.x);\n      } else {\n        markerBox.move(undefined, center.y);\n      }\n\n      this$1.box = this$1.box.wrap(markerBox);\n      outliers[i].reflow(markerBox);\n    }\n  };\n\n  BoxPlot.prototype.mainVisual = function mainVisual(options) {\n    var group = Candlestick.prototype.mainVisual.call(this, options);\n    var outliers = this.renderOutliers(options);\n\n    for (var i = 0; i < outliers.length; i++) {\n      var element = outliers[i].getElement();\n\n      if (element) {\n        group.append(element);\n      }\n    }\n\n    return group;\n  };\n\n  BoxPlot.prototype.createLines = function createLines(container, options) {\n    this.drawLines(container, options, this.whiskerPoints, options.whiskers);\n    this.drawLines(container, options, this.medianPoints, options.median);\n    this.drawLines(container, options, this.meanPoints, options.mean);\n  };\n\n  BoxPlot.prototype.getBorderColor = function getBorderColor() {\n    if ((this.options.border || {}).color) {\n      return this.options.border.color;\n    }\n\n    if (this.color) {\n      return this.color;\n    }\n\n    return Candlestick.prototype.getBorderColor.call(this);\n  };\n\n  return BoxPlot;\n}(Candlestick);\n\nsetDefaultOptions(BoxPlot, {\n  border: {\n    _brightness: 0.8\n  },\n  line: {\n    width: 2\n  },\n  median: {\n    color: \"#f6f6f6\"\n  },\n  mean: {\n    width: 2,\n    dashType: \"dash\",\n    color: \"#f6f6f6\"\n  },\n  overlay: {\n    gradient: \"glass\"\n  },\n  tooltip: {\n    format: \"<table>\" + \"<tr><th colspan='2'>{6:d}</th></tr>\" + \"<tr><td>Lower:</td><td>{0:C}</td></tr>\" + \"<tr><td>Q1:</td><td>{1:C}</td></tr>\" + \"<tr><td>Median:</td><td>{2:C}</td></tr>\" + \"<tr><td>Mean:</td><td>{5:C}</td></tr>\" + \"<tr><td>Q3:</td><td>{3:C}</td></tr>\" + \"<tr><td>Upper:</td><td>{4:C}</td></tr>\" + \"</table>\"\n  },\n  highlight: {\n    opacity: 1,\n    border: {\n      width: 1,\n      opacity: 1\n    },\n    line: {\n      width: 1,\n      opacity: 1\n    }\n  },\n  notes: {\n    visible: true,\n    label: {}\n  },\n  outliers: {\n    visible: true,\n    size: LINE_MARKER_SIZE,\n    type: CROSS,\n    background: WHITE,\n    border: {\n      width: 2,\n      opacity: 1\n    },\n    opacity: 0\n  },\n  extremes: {\n    visible: true,\n    size: LINE_MARKER_SIZE,\n    type: CIRCLE,\n    background: WHITE,\n    border: {\n      width: 2,\n      opacity: 1\n    },\n    opacity: 0\n  }\n});\ndeepExtend(BoxPlot.prototype, PointEventsMixin);\nexport default BoxPlot;","map":null,"metadata":{},"sourceType":"module"}