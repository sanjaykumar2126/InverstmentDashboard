{"ast":null,"code":"import { Browser, createElement, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { RectOption } from '../../common/utils/helper';\nimport { getXLocation, getExactData, getRangeValueXByPoint, getNearestValue } from '../utils/helper';\nimport { drawSymbol, linear } from '../../chart/index';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { Animation } from '@syncfusion/ej2-base';\n/**\n * Class for slider\n */\n\nvar RangeSlider =\n/** @class */\nfunction () {\n  function RangeSlider(range) {\n    this.control = range;\n    this.points = [];\n    this.isIOS = Browser.isIos || Browser.isIos7;\n    var thumb = range.navigatorStyleSettings.thumb;\n    this.thumbVisible = range.themeStyle.thumbWidth !== 0 && range.themeStyle.thumbHeight !== 0;\n    this.elementId = range.element.id;\n    this.thumpPadding = range.themeStyle.thumbWidth / 2;\n    this.addEventListener();\n    this.thumbColor = range.disableRangeSelector ? 'transparent' : thumb.fill || range.themeStyle.thumbBackground;\n  }\n  /**\n   * Render Slider elements for range navigator\n   * @param range\n   */\n\n\n  RangeSlider.prototype.render = function (range) {\n    var renderer = range.renderer;\n    var style = range.navigatorStyleSettings;\n    var disabledColor = range.disableRangeSelector ? 'transparent' : null;\n    var sliderGroup = renderer.createGroup({\n      'id': this.elementId + '_sliders',\n      style: range.disableRangeSelector ? 'pointer-events:none;' : ''\n    });\n    var option = new RectOption(this.elementId + '_leftUnSelectedArea', disabledColor || style.unselectedRegionColor || range.themeStyle.unselectedRectColor, {\n      width: 0\n    }, 1, {\n      x: range.bounds.x,\n      y: range.bounds.y,\n      width: range.bounds.width / 3,\n      height: range.bounds.height\n    });\n    this.leftUnSelectedElement = renderer.drawRectangle(option);\n    option.id = this.elementId + '_rightUnSelectedArea';\n    this.rightUnSelectedElement = renderer.drawRectangle(option);\n    option.id = this.elementId + '_SelectedArea';\n    option.fill = disabledColor || style.selectedRegionColor || range.themeStyle.selectedRegionColor;\n    this.selectedElement = renderer.drawRectangle(option);\n    this.selectedElement.setAttribute('style', 'cursor: -webkit-grab');\n    this.leftSlider = renderer.createGroup({\n      'id': this.elementId + '_LeftSlider',\n      'style': 'cursor: ew-resize'\n    });\n    this.rightSlider = renderer.createGroup({\n      'id': this.elementId + '_RightSlider',\n      'style': 'cursor: ew-resize'\n    });\n    this.createThump(renderer, range.bounds, this.leftSlider, this.elementId + '_LeftSlider', sliderGroup);\n    this.createThump(renderer, range.bounds, this.rightSlider, this.elementId + '_RightSlider');\n    sliderGroup.appendChild(this.leftUnSelectedElement);\n    sliderGroup.appendChild(this.rightUnSelectedElement);\n    sliderGroup.appendChild(this.selectedElement);\n    sliderGroup.appendChild(this.leftSlider);\n    sliderGroup.appendChild(this.rightSlider);\n    range.svgObject.appendChild(sliderGroup);\n  };\n  /**\n   * Thumb creation performed\n   * @param render\n   * @param bounds\n   * @param parent\n   * @param id\n   */\n\n\n  RangeSlider.prototype.createThump = function (render, bounds, parent, id, sliderGroup) {\n    var control = this.control;\n    var thump = control.navigatorStyleSettings.thumb;\n    var style = control.themeStyle;\n    var y = bounds.y + bounds.height / 2;\n    var x = this.thumpPadding;\n    var tickLength = control.themeStyle.thumbHeight / 2 - 5;\n    var disabledColor = control.disableRangeSelector ? 'transparent' : null;\n    var lineColor = disabledColor || thump.border.color || style.thumpLineColor;\n    var shadowElement;\n    parent.appendChild(render.drawPath(new PathOption(id + '_ThumpLine', 'transparent', thump.border.width, control.series.length ? lineColor : 'transparent', 1, null, 'M' + ' ' + x + ' ' + bounds.y + ' ' + 'L' + ' ' + x + ' ' + (bounds.y + bounds.height) + ' ')));\n    this.thumpY = y - control.themeStyle.thumbHeight / 2;\n    this.sliderY = bounds.y > this.thumpY ? this.thumpY : bounds.y;\n\n    if (sliderGroup && !control.disableRangeSelector) {\n      shadowElement = render.createDefs();\n      shadowElement.innerHTML = '<rect xmlns=\"http://www.w3.org/2000/svg\" id=\"' + this.control.element.id + '_shadow' + '\" x=\"0\" ' + 'y=\"' + this.thumpY + '\" width=\"' + control.themeStyle.thumbWidth + '\" height=\"' + control.themeStyle.thumbHeight + '\"' + ' rx=\"' + (thump.type === 'Circle' ? '50%' : '0%') + '\"/>' + '<filter xmlns=\"http://www.w3.org/2000/svg\" x=\"-25.0%\" y=\"-20.0%\" width=\"150.0%\" height=\"150.0%\"' + ' filterUnits=\"objectBoundingBox\" id=\"ej2-range-shadow\"><feOffset dx=\"0\" dy=\"1\" in=\"SourceAlpha\"' + 'result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1.5\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/>' + '<feComposite in=\"shadowBlurOuter1\" in2=\"SourceAlpha\" operator=\"out\" result=\"shadowBlurOuter1\"/>' + '<feColorMatrix values=\"0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.16 0\" type=\"matrix\" in=\"shadowBlurOuter1\"/>' + '</filter>';\n      sliderGroup.appendChild(shadowElement);\n    }\n\n    parent.innerHTML += '<use xmlns=\"http://www.w3.org/2000/svg\" fill=\"black\" fill-opacity=\"1\" filter=\"url(#ej2-range-shadow)\"' + ' xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#path-1\"/>';\n\n    if (thump.type === 'Circle') {\n      parent.appendChild(drawSymbol({\n        x: x,\n        y: y\n      }, 'Circle', {\n        width: control.themeStyle.thumbWidth,\n        height: control.themeStyle.thumbHeight\n      }, '', new PathOption(id + '_ThumpSymbol', disabledColor || this.thumbColor, thump.border.width, lineColor, 1, null), 'Thumb'));\n    } else {\n      parent.appendChild(render.drawRectangle(new RectOption(id + '_ThumpSymbol', disabledColor || this.thumbColor, {\n        width: thump.border.width,\n        color: lineColor\n      }, 1, {\n        x: x - control.themeStyle.thumbWidth / 2,\n        y: y - control.themeStyle.thumbHeight / 2,\n        width: control.themeStyle.thumbWidth,\n        height: control.themeStyle.thumbHeight\n      }, 2, 2)));\n    }\n\n    if (this.thumbVisible) {\n      parent.appendChild(render.drawPath(new PathOption(id + '_ThumpGrip', 'transparent', 1, disabledColor || control.themeStyle.gripColor, 1, null, 'M' + ' ' + (x + 2) + ' ' + (y + tickLength) + ' ' + 'L' + ' ' + (x + 2) + ' ' + (y - tickLength) + ' ' + 'M' + ' ' + x + ' ' + (y + tickLength) + ' ' + 'L' + ' ' + x + ' ' + (y - tickLength) + ' ' + 'M' + ' ' + (x - 2) + ' ' + (y + tickLength) + ' ' + 'L' + ' ' + (x - 2) + ' ' + (y - tickLength) + ' ')));\n    }\n  };\n  /**\n   * Set slider value for range navigator\n   * @param start\n   * @param end\n   */\n\n\n  RangeSlider.prototype.setSlider = function (start, end, trigger, showTooltip) {\n    var range = this.control;\n    var padding = range.bounds.x;\n    var axisRange = range.chartSeries.xAxis.actualRange;\n    var isLeightWeight = range.series.length === 0;\n\n    if (!(end >= start)) {\n      start = [end, end = start][0];\n    }\n\n    start = end >= start ? start : [end, end = start][0];\n    start = Math.max(start, axisRange.min);\n    end = Math.min(end, axisRange.max);\n    this.startX = padding + getXLocation(start, axisRange, range.bounds.width, range.enableRtl);\n    this.endX = padding + getXLocation(end, axisRange, range.bounds.width, range.enableRtl);\n    var selectedX = range.enableRtl ? this.endX : this.startX;\n    var rightPadding = range.enableRtl ? this.startX : this.endX;\n    this.sliderWidth = Math.abs(this.endX - this.startX);\n    this.selectedElement.setAttribute('x', selectedX + '');\n    this.selectedElement.setAttribute('width', this.sliderWidth + '');\n    this.leftUnSelectedElement.setAttribute('width', selectedX - padding + '');\n    this.rightUnSelectedElement.setAttribute('x', rightPadding + '');\n    this.rightUnSelectedElement.setAttribute('width', range.bounds.width - (rightPadding - padding) + '');\n    this.leftSlider.setAttribute('transform', 'translate(' + (this.startX - this.thumpPadding) + ', 0)');\n    this.rightSlider.setAttribute('transform', 'translate(' + (this.endX - this.thumpPadding) + ', 0)');\n    var left = this.control.svgObject.getBoundingClientRect().left - this.control.element.getBoundingClientRect().left;\n    var leftX = this.control.enableRtl ? this.endX : this.startX;\n    var rightX = this.control.enableRtl ? this.startX : this.endX;\n    this.leftRect = {\n      x: isLeightWeight ? left + padding : padding,\n      y: isLeightWeight ? 0 : range.bounds.y,\n      width: isLeightWeight ? leftX - padding : leftX,\n      height: isLeightWeight ? this.thumpY : range.bounds.height\n    };\n    this.rightRect = {\n      x: isLeightWeight ? left + rightX : rightX,\n      y: isLeightWeight ? 0 : range.bounds.y,\n      width: range.bounds.width - (rightPadding - padding),\n      height: isLeightWeight ? this.thumpY : range.bounds.height\n    };\n    this.midRect = {\n      x: isLeightWeight ? leftX + left : 0,\n      y: isLeightWeight ? 0 : range.bounds.y,\n      width: isLeightWeight ? Math.abs(this.endX - this.startX) : rightX,\n      height: isLeightWeight ? this.thumpY : range.bounds.height\n    };\n    this.currentStart = start;\n    this.currentEnd = end;\n\n    if (showTooltip) {\n      this.control.rangeTooltipModule.renderLeftTooltip(this);\n      this.control.rangeTooltipModule.renderRightTooltip(this);\n    }\n\n    if (trigger) {\n      this.triggerEvent(axisRange);\n    }\n  };\n  /**\n   * Trigger changed event\n   * @param range\n   */\n\n\n  RangeSlider.prototype.triggerEvent = function (range) {\n    var argsData;\n    var xAxis = this.control.chartSeries.xAxis;\n    var valueType = xAxis.valueType;\n    argsData = {\n      cancel: false,\n      start: valueType === 'DateTime' ? new Date(this.currentStart) : valueType === 'Logarithmic' ? Math.pow(xAxis.logBase, this.currentStart) : this.currentStart,\n      end: valueType === 'DateTime' ? new Date(this.currentEnd) : valueType === 'Logarithmic' ? Math.pow(xAxis.logBase, this.currentEnd) : this.currentEnd,\n      name: 'changed',\n      selectedData: getExactData(this.points, this.currentStart, this.currentEnd),\n      zoomPosition: (this.control.enableRtl ? range.max - this.currentEnd : this.currentStart - range.min) / range.delta,\n      zoomFactor: (this.currentEnd - this.currentStart) / range.delta\n    };\n    this.control.trigger('changed', argsData);\n  };\n  /**\n   * @hidden\n   */\n\n\n  RangeSlider.prototype.addEventListener = function () {\n    if (this.control.isDestroyed) {\n      return;\n    }\n\n    this.control.on(Browser.touchMoveEvent, this.mouseMoveHandler, this);\n    this.control.on(Browser.touchStartEvent, this.mouseDownHandler, this);\n    this.control.on(Browser.touchEndEvent, this.mouseUpHandler, this);\n    this.control.on(Browser.isPointer ? 'pointerleave' : 'mouseleave', this.mouseCancelHandler, this);\n  };\n  /**\n   * @hidden\n   */\n\n\n  RangeSlider.prototype.removeEventListener = function () {\n    if (this.control.isDestroyed) {\n      return;\n    }\n\n    this.control.off(Browser.touchMoveEvent, this.mouseMoveHandler);\n    this.control.off(Browser.touchStartEvent, this.mouseDownHandler);\n    this.control.off(Browser.touchEndEvent, this.mouseUpHandler);\n    this.control.off(Browser.isPointer ? 'pointerleave' : 'mouseleave', this.mouseCancelHandler);\n  };\n  /**\n   * Move move handler perfomed here\n   * @hidden\n   * @param e\n   */\n\n\n  RangeSlider.prototype.mouseMoveHandler = function (e) {\n    var control = this.control;\n    var axisRange = control.chartSeries.xAxis.actualRange;\n    var bounds = control.bounds;\n    var start;\n    var end;\n    this.getCurrentSlider(e.target.id);\n\n    if (this.isDrag && control.mouseX >= bounds.x) {\n      switch (this.currentSlider) {\n        case 'Left':\n          control.startValue = this.getRangeValue(Math.abs(control.mouseX - bounds.x));\n          break;\n\n        case 'Right':\n          control.endValue = this.getRangeValue(Math.abs(control.mouseX - bounds.x));\n          break;\n\n        case 'Middle':\n          start = Math.max(this.getRangeValue(Math.abs(this.startX - (this.previousMoveX - control.mouseX) - bounds.x)), axisRange.min);\n          end = Math.min(this.getRangeValue(Math.abs(this.endX - (this.previousMoveX - control.mouseX) - bounds.x)), axisRange.max);\n          var currentWidth = Math.floor(Math.abs(getXLocation(end, axisRange, control.bounds.width, control.enableRtl) - getXLocation(start, axisRange, control.bounds.width, control.enableRtl)));\n\n          if (currentWidth === Math.floor(this.sliderWidth)) {\n            control.startValue = start;\n            control.endValue = end;\n          }\n\n          break;\n      }\n\n      if (e.preventDefault && this.isIOS) {\n        e.preventDefault();\n      }\n\n      this.setSlider(control.startValue, control.endValue, !control.enableDeferredUpdate, control.rangeTooltipModule && control.tooltip.enable);\n      this.previousMoveX = control.mouseX;\n    }\n  };\n  /**\n   * To get the range value\n   * @param x\n   */\n\n\n  RangeSlider.prototype.getRangeValue = function (x) {\n    var control = this.control;\n    var axisRange = control.chartSeries.xAxis.actualRange;\n    var bounds = control.bounds;\n    return getRangeValueXByPoint(x, bounds.width, axisRange, control.enableRtl);\n  };\n  /**\n   * Moused down handler for slider perform here\n   * @param e\n   */\n\n\n  RangeSlider.prototype.mouseDownHandler = function (e) {\n    this.currentSlider = this.getCurrentSlider(e.target.id);\n    this.selectedElement.setAttribute('style', 'cursor: -webkit-grabbing');\n    this.isDrag = !(this.currentSlider === 'UnSelectedArea' || !this.currentSlider);\n    this.previousMoveX = this.control.mouseDownX;\n  };\n  /**\n   * To get the current slider element\n   * @param id\n   */\n\n\n  RangeSlider.prototype.getCurrentSlider = function (id) {\n    var hoverColor = this.control.themeStyle.thumbHoverColor;\n\n    if (id.indexOf(this.elementId + '_LeftSlider') > -1) {\n      this.leftSlider.childNodes[2].setAttribute('fill', hoverColor);\n      return 'Left';\n    } else if (id.indexOf(this.elementId + '_RightSlider') > -1) {\n      this.rightSlider.childNodes[2].setAttribute('fill', hoverColor);\n      return 'Right';\n    } else if (id.indexOf(this.elementId + '_SelectedArea') > -1) {\n      return 'Middle';\n    } else if (id.indexOf('UnSelectedArea') > -1) {\n      this.leftSlider.childNodes[2].setAttribute('fill', this.thumbColor);\n      this.rightSlider.childNodes[2].setAttribute('fill', this.thumbColor);\n      return 'UnSelectedArea';\n    } else if (id.indexOf(this.elementId + '_AxisLabel_') > -1 && this.control.valueType === 'DateTime') {\n      this.labelIndex = +id.substring(id.lastIndexOf('_') + 1, id.length);\n      return 'firstLevelLabels';\n    } else if (id.indexOf(this.elementId + '_SecondaryLabel') > -1 && this.control.valueType === 'DateTime') {\n      this.labelIndex = +id.substring(id.lastIndexOf('_') + 1, id.length);\n      return 'secondLevelLabels';\n    } else {\n      this.leftSlider.childNodes[2].setAttribute('fill', this.thumbColor);\n      this.rightSlider.childNodes[2].setAttribute('fill', this.thumbColor);\n\n      if (this.control.periodSelectorModule) {\n        this.control.periodSelectorModule.triggerChange = true;\n      }\n\n      return null;\n    }\n  };\n  /**\n   * Mouse up handler performed here\n   * @param e\n   */\n\n\n  RangeSlider.prototype.mouseUpHandler = function (e) {\n    var control = this.control;\n    var range = control.chartSeries.xAxis.actualRange;\n    var trigger = control.enableDeferredUpdate;\n    var endbledTooltip = control.tooltip.enable;\n\n    if (control.stockChart) {\n      control.stockChart.zoomChange = false;\n    }\n\n    if (this.currentSlider === 'UnSelectedArea') {\n      var value = void 0;\n      var start = void 0;\n      var end = void 0;\n      var isRtl = control.enableRtl;\n      var difference = control.endValue - control.startValue;\n\n      if (control.mouseDownX < this.startX) {\n        value = Math.max(this.getRangeValue(control.mouseDownX - this.sliderWidth / 2 - control.bounds.x), range.min);\n        end = isRtl ? value : value + difference;\n        start = isRtl ? value - difference : value;\n      } else {\n        value = Math.min(this.getRangeValue(control.mouseDownX + this.sliderWidth / 2 - control.bounds.x), range.max);\n        start = isRtl ? value : value - difference;\n        end = isRtl ? value + difference : value;\n      }\n\n      this.performAnimation(start, end, control);\n      trigger = false;\n    } else if (this.currentSlider === 'firstLevelLabels' || this.currentSlider === 'secondLevelLabels') {\n      var secondLabel = control.rangeAxis[this.currentSlider][this.labelIndex + 1];\n      this.performAnimation(control.rangeAxis[this.currentSlider][this.labelIndex].value, secondLabel ? secondLabel.value : range.max, control);\n      trigger = false;\n    }\n\n    if (this.isDrag && control.allowSnapping) {\n      this.setAllowSnapping(control, this.currentStart, this.currentEnd, trigger, endbledTooltip);\n      trigger = false;\n    }\n\n    if (trigger) {\n      this.setSlider(this.currentStart, this.currentEnd, true, endbledTooltip);\n    }\n\n    if (this.currentSlider !== null) {\n      if (this.control.periodSelectorSettings.periods.length > 0) {\n        this.control.periodSelectorModule.triggerChange = false;\n        this.control.periodSelectorModule.datePicker.startDate = new Date(this.currentStart);\n        this.control.periodSelectorModule.datePicker.endDate = new Date(this.currentEnd);\n      }\n    }\n\n    this.selectedElement.setAttribute('style', 'cursor: -webkit-grab');\n    control.startValue = this.currentStart;\n    control.endValue = this.currentEnd;\n    this.isDrag = false;\n    this.labelIndex = null;\n    this.currentSlider = null;\n  };\n  /**\n   * Allow Snapping perfomed here\n   * @param control\n   * @param start\n   * @param end\n   */\n\n\n  RangeSlider.prototype.setAllowSnapping = function (control, start, end, trigger, tooltip) {\n    var values = control.rangeAxis.lowerValues;\n    values.push(control.chartSeries.xAxis.actualRange.max);\n    this.setSlider(getNearestValue(values, start), getNearestValue(values, end), trigger, tooltip);\n    control.startValue = this.currentStart;\n    control.endValue = this.currentEnd;\n  };\n  /**\n   * Animation Calculation for slider navigation\n   * @param start\n   * @param end\n   */\n\n\n  RangeSlider.prototype.performAnimation = function (start, end, control, animationDuration) {\n    var _this = this;\n\n    var currentStart = this.currentStart;\n    var currentEnd = this.currentEnd;\n    var isDeffered = control.enableDeferredUpdate;\n    var enableTooltip = control.tooltip.enable;\n    new Animation({}).animate(createElement('div'), {\n      duration: !isNullOrUndefined(animationDuration) ? animationDuration : this.control.animationDuration,\n      progress: function (args) {\n        _this.setSlider(linear(args.timeStamp, 0, start - currentStart, args.duration) + currentStart, linear(args.timeStamp, 0, end - currentEnd, args.duration) + currentEnd, !isDeffered, enableTooltip);\n      },\n      end: function (model) {\n        if (control.allowSnapping) {\n          _this.setAllowSnapping(control, start, end, true, enableTooltip);\n        } else {\n          _this.setSlider(start, end, true, enableTooltip);\n        }\n\n        _this.control.startValue = _this.currentStart;\n        _this.control.endValue = _this.currentEnd;\n\n        if (_this.control.periodSelectorSettings.periods.length > 0) {\n          _this.control.periodSelectorModule.triggerChange = false;\n          _this.control.periodSelectorModule.datePicker.startDate = new Date(_this.currentStart);\n          _this.control.periodSelectorModule.datePicker.endDate = new Date(_this.currentEnd);\n        }\n      }\n    });\n  };\n  /**\n   * Mouse Cancel Handler\n   */\n\n\n  RangeSlider.prototype.mouseCancelHandler = function () {\n    this.isDrag = false;\n    this.currentSlider = null;\n    this.control.startValue = this.currentStart;\n    this.control.endValue = this.currentEnd;\n  };\n  /**\n   * Destroy Method Calling here\n   */\n\n\n  RangeSlider.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return RangeSlider;\n}();\n\nexport { RangeSlider };","map":null,"metadata":{},"sourceType":"module"}