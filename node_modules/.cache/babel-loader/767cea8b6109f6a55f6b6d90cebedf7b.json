{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, NotifyPropertyChanges, Property, Complex } from '@syncfusion/ej2-base';\nimport { remove, L10n, Internationalization, Event, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Browser, EventHandler, Touch, Collection } from '@syncfusion/ej2-base';\nimport { SparklineBorder, SparklineTooltipSettings, ContainerArea, AxisSettings, Padding, SparklineMarkerSettings } from './model/base';\nimport { SparklineDataLabelSettings, RangeBandSettings } from './model/base';\nimport { Size, createSvg, RectOption, Rect, drawRectangle, getIdElement, withInBounds, removeElement } from './utils/helper';\nimport { SparklineRenderer } from './rendering/sparkline-renderer';\nimport { getThemeColor } from './utils/helper'; //tslint:disable: no-duplicate-lines\n\n/**\n * Represents the Sparkline control.\n * ```html\n * <div id=\"sparkline\"/>\n * <script>\n *   var sparkline = new Sparkline();\n *   sparkline.appendTo(\"#sparkline\");\n * </script>\n * ```\n */\n\nvar Sparkline =\n/** @class */\nfunction (_super) {\n  __extends(Sparkline, _super); // Sparkline rendering starts from here.\n\n  /**\n   * Constructor for creating the Sparkline widget\n   */\n\n\n  function Sparkline(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    /** @private */\n\n\n    _this.isDevice = Browser.isDevice;\n    return _this;\n  }\n  /**\n   * Initializing pre-required values for sparkline.\n   */\n\n\n  Sparkline.prototype.preRender = function () {\n    var blazor = 'Blazor';\n    this.isBlazor = window[blazor];\n    this.unWireEvents();\n    this.trigger('load', {\n      sparkline: this\n    });\n    this.sparkTheme = getThemeColor(this.theme);\n    this.sparklineRenderer = new SparklineRenderer(this);\n    this.createSVG();\n    this.wireEvents();\n    this.setCulture();\n  };\n  /**\n   * Sparkline Elements rendering starting.\n   */\n\n\n  Sparkline.prototype.render = function () {\n    // Sparkline rendering splitted into rendering and calculations\n    this.sparklineRenderer.processDataManager();\n    this.renderComplete();\n  };\n  /**\n   * @private\n   */\n\n\n  Sparkline.prototype.processSparklineData = function () {\n    this.sparklineRenderer.processData();\n    this.renderSparkline();\n    this.element.appendChild(this.svgObject);\n    this.setSecondaryElementPosition();\n    this.trigger('loaded', {\n      sparkline: this.isBlazor ? null : this\n    });\n  };\n  /**\n   * To render sparkline elements\n   */\n\n\n  Sparkline.prototype.renderSparkline = function () {\n    // To render the sparkline elements\n    this.renderBorder();\n    this.createDiv();\n    this.sparklineRenderer.renderSeries();\n  };\n  /**\n   * Create secondary element for the tooltip\n   */\n\n\n  Sparkline.prototype.createDiv = function () {\n    var tooltipDiv = document.createElement('div');\n    tooltipDiv.id = this.element.id + '_Secondary_Element';\n    tooltipDiv.setAttribute('style', 'position: relative');\n    this.element.appendChild(tooltipDiv);\n    this.element.style.display = 'block';\n    this.element.style.position = 'relative';\n  };\n  /**\n   * To set the left and top position for data label template for sparkline\n   */\n\n\n  Sparkline.prototype.setSecondaryElementPosition = function () {\n    var element = getIdElement(this.element.id + '_Secondary_Element');\n\n    if (!element) {\n      return;\n    }\n\n    var rect = this.element.getBoundingClientRect();\n    var svgRect = getIdElement(this.element.id + '_svg').getBoundingClientRect();\n    element.style.left = Math.max(svgRect.left - rect.left, 0) + 'px';\n    element.style.top = Math.max(svgRect.top - rect.top, 0) + 'px';\n  };\n  /**\n   * @private\n   * Render the sparkline border\n   */\n\n\n  Sparkline.prototype.renderBorder = function () {\n    var width = this.containerArea.border.width;\n    var borderRect;\n\n    if (width > 0 || this.containerArea.background !== 'transparent') {\n      borderRect = new RectOption(this.element.id + '_SparklineBorder', this.sparkTheme.background, this.containerArea.border, 1, new Rect(width / 2, width / 2, this.availableSize.width - width, this.availableSize.height - width));\n      this.svgObject.appendChild(drawRectangle(this, borderRect));\n    } // Used to create clip path sparkline\n\n\n    var padding = this.padding;\n    borderRect = new RectOption(this.element.id + '_sparkline_clip_rect', 'transparent', {\n      color: 'transparent',\n      width: 0\n    }, 1, new Rect(padding.left, padding.top, this.availableSize.width - (padding.left + padding.right), this.availableSize.height - (padding.top + padding.bottom)));\n    var clipPath = this.renderer.createClipPath({\n      id: this.element.id + '_sparkline_clip_path'\n    });\n    drawRectangle(this, borderRect, clipPath);\n    this.svgObject.appendChild(clipPath);\n  };\n  /**\n   * To create svg element for sparkline\n   */\n\n\n  Sparkline.prototype.createSVG = function () {\n    this.removeSvg();\n    createSvg(this);\n  };\n  /**\n   * To Remove the Sparkline SVG object\n   */\n\n\n  Sparkline.prototype.removeSvg = function () {\n    if (this.svgObject) {\n      while (this.svgObject.childNodes.length > 0) {\n        this.svgObject.removeChild(this.svgObject.firstChild);\n      }\n\n      if (!this.svgObject.hasChildNodes() && this.svgObject.parentNode) {\n        remove(this.svgObject);\n      }\n    }\n\n    removeElement(this.element.id + '_Secondary_Element');\n\n    if (this.sparklineTooltipModule) {\n      this.sparklineTooltipModule.removeTooltipElements();\n    }\n  };\n  /**\n   * Method to set culture for sparkline\n   */\n\n\n  Sparkline.prototype.setCulture = function () {\n    this.intl = new Internationalization();\n    this.localeObject = new L10n(this.getModuleName(), this.defaultLocalConstants, this.locale);\n  };\n  /**\n   * To provide the array of modules needed for sparkline rendering\n   * @return {ModuleDeclaration[]}\n   * @private\n   */\n\n\n  Sparkline.prototype.requiredModules = function () {\n    var modules = [];\n\n    if (this.tooltipSettings.visible || this.tooltipSettings.trackLineSettings.visible) {\n      modules.push({\n        member: 'SparklineTooltip',\n        args: [this]\n      });\n    }\n\n    return modules;\n  };\n  /**\n   * Method to unbind events for sparkline chart\n   */\n\n\n  Sparkline.prototype.unWireEvents = function () {\n    var move = Browser.touchMoveEvent;\n    var cancel = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    /*! UnBind the Event handler */\n\n    EventHandler.remove(this.element, Browser.touchMoveEvent, this.sparklineMove);\n    EventHandler.remove(this.element, cancel, this.sparklineMouseLeave);\n    EventHandler.remove(this.element, Browser.touchEndEvent, this.sparklineMouseEnd);\n    window.removeEventListener(Browser.isTouch && 'orientation' in window && 'onorientationchange' in window ? 'orientationchange' : 'resize', this.sparklineResize);\n  };\n  /**\n   * Method to bind events for the sparkline\n   */\n\n\n  Sparkline.prototype.wireEvents = function () {\n    var cancel = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    /*! Bind the Event handler */\n\n    EventHandler.add(this.element, Browser.touchMoveEvent, this.sparklineMove, this);\n    EventHandler.add(this.element, 'click', this.sparklineClick, this);\n    EventHandler.add(this.element, cancel, this.sparklineMouseLeave, this);\n    EventHandler.add(this.element, Browser.touchEndEvent, this.sparklineMouseEnd, this);\n    window.addEventListener(Browser.isTouch && 'orientation' in window && 'onorientationchange' in window ? 'orientationchange' : 'resize', this.sparklineResize.bind(this));\n    new Touch(this.element);\n  };\n  /**\n   * Sparkline resize event.\n   * @private\n   */\n\n\n  Sparkline.prototype.sparklineResize = function (e) {\n    var _this = this;\n\n    var args = {\n      name: 'resize',\n      previousSize: this.availableSize,\n      sparkline: this.isBlazor ? null : this,\n      currentSize: new Size(0, 0)\n    };\n\n    if (this.resizeTo) {\n      clearTimeout(this.resizeTo);\n    }\n\n    this.resizeTo = setTimeout(function () {\n      if (_this.isDestroyed) {\n        clearTimeout(_this.resizeTo);\n        return;\n      }\n\n      _this.unWireEvents();\n\n      _this.createSVG();\n\n      _this.refreshing = true;\n\n      _this.wireEvents();\n\n      args.currentSize = _this.availableSize;\n\n      _this.trigger('resize', args);\n\n      _this.render();\n    }, 500);\n    return false;\n  };\n  /**\n   * Handles the mouse move on sparkline.\n   * @return {boolean}\n   * @private\n   */\n\n\n  Sparkline.prototype.sparklineMove = function (e) {\n    this.setSparklineMouseXY(e);\n    this.notify(Browser.touchMoveEvent, e);\n    var args = {\n      name: 'sparklineMouseMove',\n      cancel: false,\n      sparkline: this.isBlazor ? null : this,\n      event: e\n    };\n    this.trigger(args.name, args);\n    var pointClick = this.isPointRegion(e);\n\n    if (pointClick.isPointRegion) {\n      var pointArgs = {\n        name: 'pointRegionMouseMove',\n        cancel: false,\n        event: e,\n        sparkline: this.isBlazor ? null : this,\n        pointIndex: pointClick.pointIndex\n      };\n      this.trigger(pointArgs.name, pointArgs);\n    }\n\n    return false;\n  };\n  /**\n   * Handles the mouse click on sparkline.\n   * @return {boolean}\n   * @private\n   */\n\n\n  Sparkline.prototype.sparklineClick = function (e) {\n    this.setSparklineMouseXY(e);\n    var args = {\n      name: 'sparklineMouseClick',\n      cancel: false,\n      sparkline: this.isBlazor ? null : this,\n      event: e\n    };\n    this.trigger(args.name, args);\n    var pointClick = this.isPointRegion(e);\n\n    if (pointClick.isPointRegion) {\n      var pointArgs = {\n        name: 'pointRegionMouseClick',\n        cancel: false,\n        event: e,\n        sparkline: this.isBlazor ? null : this,\n        pointIndex: pointClick.pointIndex\n      };\n      this.trigger(pointArgs.name, pointArgs);\n    }\n\n    return false;\n  };\n  /**\n   * To check mouse event target is point region or not.\n   */\n\n\n  Sparkline.prototype.isPointRegion = function (e) {\n    var _this = this;\n\n    var startId = this.element.id + '_';\n    var id = e.target.id.replace(startId, '').split('_');\n\n    if (id[1] === this.type.toLowerCase()) {\n      var index_1 = parseInt(id[2], 10);\n\n      if ((isNullOrUndefined(index_1) || isNaN(index_1)) && (this.type === 'Line' || this.type === 'Area')) {\n        this.sparklineRenderer.visiblePoints.forEach(function (point, i) {\n          if (withInBounds(_this.mouseX, _this.mouseY, new Rect(point.x - 5, point.y - 5, 10, 10))) {\n            index_1 = i;\n            return;\n          }\n        });\n      }\n\n      return {\n        isPointRegion: true,\n        pointIndex: index_1\n      };\n    }\n\n    return {\n      isPointRegion: false,\n      pointIndex: null\n    };\n  };\n  /**\n   * Handles the mouse end.\n   * @return {boolean}\n   * @private\n   */\n\n\n  Sparkline.prototype.sparklineMouseEnd = function (e) {\n    this.setSparklineMouseXY(e);\n    this.notify(Browser.touchEndEvent, e);\n    return false;\n  };\n  /**\n   * Handles the mouse leave on sparkline.\n   * @return {boolean}\n   * @private\n   */\n\n\n  Sparkline.prototype.sparklineMouseLeave = function (e) {\n    this.setSparklineMouseXY(e);\n    this.notify(Browser.isPointer ? 'pointerleave' : 'mouseleave', e);\n    return false;\n  };\n  /**\n   * Method to set mouse x, y from events\n   */\n\n\n  Sparkline.prototype.setSparklineMouseXY = function (e) {\n    var pageY;\n    var pageX;\n\n    if (e.type.indexOf('touch') > -1) {\n      this.isTouch = true;\n      var touchArg = e;\n      pageX = touchArg.changedTouches[0].clientX;\n      pageY = touchArg.changedTouches[0].clientY;\n    } else {\n      this.isTouch = e.pointerType === 'touch' || e.pointerType === '2';\n      pageY = e.clientY;\n      pageX = e.clientX;\n    }\n\n    var rect = this.element.getBoundingClientRect();\n    var svgRect = getIdElement(this.element.id + '_svg').getBoundingClientRect();\n    this.mouseY = pageY - rect.top - Math.max(svgRect.top - rect.top, 0);\n    this.mouseX = pageX - rect.left - Math.max(svgRect.left - rect.left, 0);\n  };\n  /**\n   * To change rendering while property value modified.\n   * @private\n   */\n\n\n  Sparkline.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var render = false;\n    var refresh = false;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'xName':\n        case 'yName':\n        case 'dataSource':\n        case 'axisSettings':\n        case 'type':\n        case 'valueType':\n        case 'enableRtl':\n          refresh = true;\n          break;\n\n        case 'border':\n        case 'markerSettings':\n        case 'dataLabelSettings':\n        case 'tooltipSettings':\n        case 'startPointColor':\n        case 'highPointColor':\n        case 'lowPointColor':\n        case 'endPointColor':\n        case 'negativePointColor':\n        case 'theme':\n          render = true;\n          break;\n      }\n    }\n\n    if (refresh) {\n      this.createSVG();\n      this.sparklineRenderer.processData();\n      this.refreshSparkline();\n    } else if (render) {\n      this.createSVG();\n      this.refreshSparkline();\n    }\n  };\n  /**\n   * To render sparkline series and appending.\n   */\n\n\n  Sparkline.prototype.refreshSparkline = function () {\n    // Issue fix. React had native render method. So OnProperty change used render method won't wrok. \n    this.renderSparkline();\n    this.element.appendChild(this.svgObject);\n    this.setSecondaryElementPosition();\n  };\n  /**\n   * Get component name\n   */\n\n\n  Sparkline.prototype.getModuleName = function () {\n    return 'sparkline';\n  };\n  /**\n   * Destroy the component\n   */\n\n\n  Sparkline.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @private\n   */\n\n\n  Sparkline.prototype.getPersistData = function () {\n    return '';\n  };\n\n  __decorate([Property(null)], Sparkline.prototype, \"width\", void 0);\n\n  __decorate([Property(null)], Sparkline.prototype, \"height\", void 0);\n\n  __decorate([Complex({}, SparklineBorder)], Sparkline.prototype, \"border\", void 0);\n\n  __decorate([Property('Line')], Sparkline.prototype, \"type\", void 0);\n\n  __decorate([Property(null)], Sparkline.prototype, \"dataSource\", void 0);\n\n  __decorate([Property(null)], Sparkline.prototype, \"query\", void 0);\n\n  __decorate([Property('Numeric')], Sparkline.prototype, \"valueType\", void 0);\n\n  __decorate([Property(null)], Sparkline.prototype, \"xName\", void 0);\n\n  __decorate([Property(null)], Sparkline.prototype, \"yName\", void 0);\n\n  __decorate([Property('#00bdae')], Sparkline.prototype, \"fill\", void 0);\n\n  __decorate([Property('')], Sparkline.prototype, \"highPointColor\", void 0);\n\n  __decorate([Property('')], Sparkline.prototype, \"lowPointColor\", void 0);\n\n  __decorate([Property('')], Sparkline.prototype, \"startPointColor\", void 0);\n\n  __decorate([Property('')], Sparkline.prototype, \"endPointColor\", void 0);\n\n  __decorate([Property('')], Sparkline.prototype, \"negativePointColor\", void 0);\n\n  __decorate([Property('')], Sparkline.prototype, \"tiePointColor\", void 0);\n\n  __decorate([Property([])], Sparkline.prototype, \"palette\", void 0);\n\n  __decorate([Property(1)], Sparkline.prototype, \"lineWidth\", void 0);\n\n  __decorate([Property(1)], Sparkline.prototype, \"opacity\", void 0);\n\n  __decorate([Property(null)], Sparkline.prototype, \"format\", void 0);\n\n  __decorate([Property(false)], Sparkline.prototype, \"useGroupingSeparator\", void 0);\n\n  __decorate([Complex({}, SparklineTooltipSettings)], Sparkline.prototype, \"tooltipSettings\", void 0);\n\n  __decorate([Complex({}, ContainerArea)], Sparkline.prototype, \"containerArea\", void 0);\n\n  __decorate([Collection([], RangeBandSettings)], Sparkline.prototype, \"rangeBandSettings\", void 0);\n\n  __decorate([Complex({}, AxisSettings)], Sparkline.prototype, \"axisSettings\", void 0);\n\n  __decorate([Complex({}, SparklineMarkerSettings)], Sparkline.prototype, \"markerSettings\", void 0);\n\n  __decorate([Complex({}, SparklineDataLabelSettings)], Sparkline.prototype, \"dataLabelSettings\", void 0);\n\n  __decorate([Complex({}, Padding)], Sparkline.prototype, \"padding\", void 0);\n\n  __decorate([Property('Material')], Sparkline.prototype, \"theme\", void 0);\n\n  __decorate([Event()], Sparkline.prototype, \"loaded\", void 0);\n\n  __decorate([Event()], Sparkline.prototype, \"load\", void 0);\n\n  __decorate([Event()], Sparkline.prototype, \"tooltipInitialize\", void 0);\n\n  __decorate([Event()], Sparkline.prototype, \"seriesRendering\", void 0);\n\n  __decorate([Event()], Sparkline.prototype, \"axisRendering\", void 0);\n\n  __decorate([Event()], Sparkline.prototype, \"pointRendering\", void 0);\n\n  __decorate([Event()], Sparkline.prototype, \"pointRegionMouseMove\", void 0);\n\n  __decorate([Event()], Sparkline.prototype, \"pointRegionMouseClick\", void 0);\n\n  __decorate([Event()], Sparkline.prototype, \"sparklineMouseMove\", void 0);\n\n  __decorate([Event()], Sparkline.prototype, \"sparklineMouseClick\", void 0);\n\n  __decorate([Event()], Sparkline.prototype, \"dataLabelRendering\", void 0);\n\n  __decorate([Event()], Sparkline.prototype, \"markerRendering\", void 0);\n\n  __decorate([Event()], Sparkline.prototype, \"resize\", void 0);\n\n  Sparkline = __decorate([NotifyPropertyChanges], Sparkline);\n  return Sparkline;\n}(Component);\n\nexport { Sparkline };","map":null,"metadata":{},"sourceType":"module"}