{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { extend } from '@syncfusion/ej2-base';\nimport { ChartLocation } from '../../common/utils/helper';\nimport { stopTimer, removeElement } from '../../common/utils/helper';\nimport { ChartData } from '../../chart/utils/get-data';\nimport { Tooltip as SVGTooltip } from '@syncfusion/ej2-svg-base';\n/**\n * Tooltip Module used to render the tooltip for series.\n */\n\nvar BaseTooltip =\n/** @class */\nfunction (_super) {\n  __extends(BaseTooltip, _super);\n  /**\n   * Constructor for tooltip module.\n   * @private.\n   */\n\n\n  function BaseTooltip(chart) {\n    var _this = _super.call(this, chart) || this;\n\n    _this.element = _this.chart.element;\n    _this.textStyle = chart.tooltip.textStyle;\n    _this.control = chart;\n    return _this;\n  }\n\n  BaseTooltip.prototype.getElement = function (id) {\n    return document.getElementById(id);\n  };\n  /**\n   * Renders the tooltip.\n   * @return {void}\n   * @private\n   */\n\n\n  BaseTooltip.prototype.getTooltipElement = function (isTooltip) {\n    this.inverted = this.chart.requireInvertedAxis;\n    this.header = this.control.tooltip.header === null ? this.control.tooltip.shared ? '<b>${point.x}</b>' : '<b>${series.name}</b>' : this.control.tooltip.header;\n    this.formattedText = [];\n    var tooltipDiv = document.getElementById(this.chart.element.id + '_tooltip');\n    var isStockChart = this.chart.element.id.indexOf('stockChart') > -1;\n\n    if (!isTooltip && !tooltipDiv || isStockChart) {\n      return this.createElement();\n    }\n\n    return null;\n  };\n\n  BaseTooltip.prototype.createElement = function () {\n    var tooltipDiv = document.createElement('div');\n    tooltipDiv.id = this.element.id + '_tooltip';\n    tooltipDiv.className = 'ejSVGTooltip';\n    tooltipDiv.setAttribute('style', 'pointer-events:none; position:absolute;z-index: 1');\n    return tooltipDiv;\n  };\n\n  BaseTooltip.prototype.pushData = function (data, isFirst, tooltipDiv, isChart) {\n    if (data.series.enableTooltip) {\n      if (isChart) {\n        this.currentPoints.push(data);\n      } else {\n        this.currentPoints.push(data);\n      }\n\n      this.stopAnimation();\n\n      if (tooltipDiv && !document.getElementById(tooltipDiv.id)) {\n        if (!this.chart.stockChart) {\n          document.getElementById(this.element.id + '_Secondary_Element').appendChild(tooltipDiv);\n        } else {\n          document.getElementById(this.chart.stockChart.element.id + '_Secondary_Element').appendChild(tooltipDiv);\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  BaseTooltip.prototype.removeHighlight = function (chart) {\n    var item;\n    var series;\n\n    for (var i = 0, len = this.previousPoints.length; i < len; i++) {\n      item = this.previousPoints[i];\n\n      if (item.series.isRectSeries) {\n        if (item.series.visible) {\n          this.highlightPoint(item.series, item.point.index, false);\n        }\n\n        continue;\n      }\n\n      series = item.series;\n\n      if (!series.marker.visible && item.series.type !== 'Scatter' && item.series.type !== 'Bubble') {\n        this.previousPoints.shift();\n        len -= 1;\n      }\n    }\n  };\n\n  BaseTooltip.prototype.highlightPoint = function (series, pointIndex, highlight) {\n    var element = this.getElement(this.element.id + '_Series_' + series.index + '_Point_' + pointIndex);\n\n    if (element) {\n      element.setAttribute('opacity', (highlight ? series.opacity / 2 : series.opacity).toString());\n    }\n  };\n\n  BaseTooltip.prototype.highlightPoints = function () {\n    for (var _i = 0, _a = this.currentPoints; _i < _a.length; _i++) {\n      var item = _a[_i];\n\n      if (item.series.isRectSeries && item.series.category === 'Series') {\n        this.highlightPoint(item.series, item.point.index, true);\n      }\n    }\n  };\n\n  BaseTooltip.prototype.createTooltip = function (chart, isFirst, location, clipLocation, point, shapes, offset, bounds, extraPoints, templatePoint) {\n    if (extraPoints === void 0) {\n      extraPoints = null;\n    }\n\n    if (templatePoint === void 0) {\n      templatePoint = null;\n    }\n\n    var series = this.currentPoints[0].series;\n    var module = chart.tooltipModule || chart.accumulationTooltipModule;\n\n    if (isFirst) {\n      this.svgTooltip = new SVGTooltip({\n        opacity: chart.tooltip.opacity,\n        header: this.headerText,\n        content: this.text,\n        fill: chart.tooltip.fill,\n        border: chart.tooltip.border,\n        enableAnimation: chart.tooltip.enableAnimation,\n        location: location,\n        shared: chart.tooltip.shared,\n        shapes: shapes,\n        clipBounds: this.chart.chartAreaType === 'PolarRadar' ? new ChartLocation(0, 0) : clipLocation,\n        areaBounds: bounds,\n        palette: this.findPalette(),\n        template: chart.tooltip.template,\n        data: templatePoint,\n        theme: chart.theme,\n        offset: offset,\n        textStyle: chart.tooltip.textStyle,\n        isNegative: series.isRectSeries && series.type !== 'Waterfall' && point && point.y < 0,\n        inverted: this.chart.requireInvertedAxis && series.isRectSeries,\n        arrowPadding: this.text.length > 1 || this.chart.stockChart ? 0 : 12,\n        availableSize: chart.availableSize,\n        isCanvas: this.chart.enableCanvas,\n        tooltipRender: function () {\n          module.removeHighlight(module.control);\n          module.highlightPoints();\n          module.updatePreviousPoint(extraPoints);\n        },\n        animationComplete: function (args) {\n          if (args.tooltip.fadeOuted) {\n            module.fadeOut(module.previousPoints, chart);\n          }\n        }\n      }, '#' + this.element.id + '_tooltip');\n    } else {\n      if (this.svgTooltip) {\n        this.svgTooltip.location = location;\n        this.svgTooltip.content = this.text;\n        this.svgTooltip.header = this.headerText;\n        this.svgTooltip.offset = offset;\n        this.svgTooltip.palette = this.findPalette();\n        this.svgTooltip.shapes = shapes;\n        this.svgTooltip.data = templatePoint;\n        this.svgTooltip.template = chart.tooltip.template;\n        this.svgTooltip.textStyle = chart.tooltip.textStyle;\n        this.svgTooltip.isNegative = series.isRectSeries && series.type !== 'Waterfall' && point && point.y < 0;\n        this.svgTooltip.clipBounds = this.chart.chartAreaType === 'PolarRadar' ? new ChartLocation(0, 0) : clipLocation;\n        this.svgTooltip.arrowPadding = this.text.length > 1 || this.chart.stockChart ? 0 : 12;\n        this.svgTooltip.dataBind();\n      }\n    }\n  };\n\n  BaseTooltip.prototype.findPalette = function () {\n    var colors = [];\n\n    for (var _i = 0, _a = this.currentPoints; _i < _a.length; _i++) {\n      var data = _a[_i];\n      colors.push(this.findColor(data, data.series));\n    }\n\n    return colors;\n  };\n\n  BaseTooltip.prototype.findColor = function (data, series) {\n    if (series.isRectSeries && (series.type === 'Candle' || series.type === 'Hilo' || series.type === 'HiloOpenClose')) {\n      return data.point.color;\n    } else {\n      return (data.point.color && data.point.color !== '#ffffff' ? data.point.color : data.point.interior) || series.marker.fill || series.interior;\n    }\n  };\n\n  BaseTooltip.prototype.updatePreviousPoint = function (extraPoints) {\n    if (extraPoints) {\n      this.currentPoints = this.currentPoints.concat(extraPoints);\n    }\n\n    this.previousPoints = extend([], this.currentPoints, null, true);\n  };\n\n  BaseTooltip.prototype.fadeOut = function (data, chart) {\n    var svgElement = this.chart.enableCanvas ? this.getElement(this.element.id + '_tooltip_group') : this.getElement(this.element.id + '_tooltip_svg');\n    var isTooltip = svgElement && parseInt(svgElement.getAttribute('opacity'), 10) > 0;\n\n    if (!isTooltip) {\n      this.valueX = null;\n      this.valueY = null;\n      this.currentPoints = [];\n      this.removeHighlight(chart);\n      this.removeHighlightedMarker(data);\n      this.svgTooltip = null;\n      this.control.trigger('animationComplete', {});\n    }\n  };\n  /*\n  * @hidden\n  */\n\n\n  BaseTooltip.prototype.removeHighlightedMarker = function (data) {\n    if (this.chart.markerRender) {\n      for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n        var item = data_1[_i];\n        removeElement(this.element.id + '_Series_' + item.series.index + '_Point_' + item.point.index + '_Trackball');\n      }\n\n      this.chart.markerRender.removeHighlightedMarker();\n    }\n\n    this.previousPoints = [];\n  }; // public triggerEvent(point: PointData | AccPointData, isFirst: boolean, textCollection: string, firstText: boolean = true): boolean {\n  //     let argsData: ITooltipRenderEventArgs = {\n  //         cancel: false, name: tooltipRender, text: textCollection,\n  //         point: point.point, series: point.series, textStyle: this.textStyle\n  //     };\n  //     this.chart.trigger(tooltipRender, argsData);\n  //     if (!argsData.cancel) {\n  //         if (point.series.type === 'BoxAndWhisker') {\n  //             this.removeText();\n  //             isFirst = true;\n  //         }\n  //         this.formattedText = this.formattedText.concat(argsData.text);\n  //         this.text = this.formattedText;\n  //     }\n  //     return !argsData.cancel;\n  // }\n\n\n  BaseTooltip.prototype.removeText = function () {\n    this.textElements = [];\n    var element = this.getElement(this.element.id + '_tooltip_group');\n\n    if (element && element.childNodes.length > 0) {\n      while (element.lastChild && element.childNodes.length !== 1) {\n        element.removeChild(element.lastChild);\n      }\n    }\n  };\n\n  BaseTooltip.prototype.stopAnimation = function () {\n    stopTimer(this.toolTipInterval);\n  };\n  /**\n   * Removes the tooltip on mouse leave.\n   * @return {void}\n   * @private\n   */\n\n\n  BaseTooltip.prototype.removeTooltip = function (duration) {\n    var _this = this;\n\n    var tooltipElement = this.getElement(this.element.id + '_tooltip');\n    this.stopAnimation();\n\n    if (tooltipElement && this.previousPoints.length > 0) {\n      this.toolTipInterval = setTimeout(function () {\n        if (_this.svgTooltip) {\n          _this.svgTooltip.fadeOut();\n        }\n      }, duration);\n    }\n  };\n\n  return BaseTooltip;\n}(ChartData);\n\nexport { BaseTooltip };","map":null,"metadata":{},"sourceType":"module"}