{"ast":null,"code":"import BaseTooltip from '../tooltip/base-tooltip';\nimport { HIDE_TOOLTIP } from '../constants';\nimport { TOP, BOTTOM, LEFT, RIGHT, CENTER, DATE } from '../../common/constants';\nimport { setDefaultOptions } from '../../common';\n\nvar CrosshairTooltip = function (BaseTooltip) {\n  function CrosshairTooltip(chartService, crosshair, options) {\n    BaseTooltip.call(this, chartService, options);\n    this.crosshair = crosshair;\n    this.formatService = chartService.format;\n    this.initAxisName();\n  }\n\n  if (BaseTooltip) CrosshairTooltip.__proto__ = BaseTooltip;\n  CrosshairTooltip.prototype = Object.create(BaseTooltip && BaseTooltip.prototype);\n  CrosshairTooltip.prototype.constructor = CrosshairTooltip;\n\n  CrosshairTooltip.prototype.initAxisName = function initAxisName() {\n    var axis = this.crosshair.axis;\n    var plotArea = axis.plotArea;\n    var name;\n\n    if (plotArea.categoryAxis) {\n      name = axis.getCategory ? \"categoryAxis\" : \"valueAxis\";\n    } else {\n      name = axis.options.vertical ? \"yAxis\" : \"xAxis\";\n    }\n\n    this.axisName = name;\n  };\n\n  CrosshairTooltip.prototype.showAt = function showAt(point) {\n    var ref = this;\n    var axis = ref.crosshair.axis;\n    var options = ref.options;\n    var value = axis[options.stickyMode ? \"getCategory\" : \"getValue\"](point);\n    var formattedValue = value;\n\n    if (options.format) {\n      formattedValue = this.formatService.auto(options.format, value);\n    } else if (axis.options.type === DATE) {\n      formattedValue = this.formatService.auto(axis.options.labels.dateFormats[axis.options.baseUnit], value);\n    }\n\n    this.show({\n      point: point,\n      anchor: this.getAnchor(),\n      crosshair: this.crosshair,\n      value: formattedValue,\n      axisName: this.axisName,\n      axisIndex: this.crosshair.axis.axisIndex\n    }, this.options);\n  };\n\n  CrosshairTooltip.prototype.hide = function hide() {\n    this.chartService.notify(HIDE_TOOLTIP, {\n      crosshair: this.crosshair,\n      axisName: this.axisName,\n      axisIndex: this.crosshair.axis.axisIndex\n    });\n  };\n\n  CrosshairTooltip.prototype.getAnchor = function getAnchor() {\n    var ref = this;\n    var crosshair = ref.crosshair;\n    var ref_options = ref.options;\n    var position = ref_options.position;\n    var padding = ref_options.padding;\n    var vertical = !crosshair.axis.options.vertical;\n    var lineBox = crosshair.line.bbox();\n    var horizontalAlign, verticalAlign, point;\n\n    if (vertical) {\n      horizontalAlign = CENTER;\n\n      if (position === BOTTOM) {\n        verticalAlign = TOP;\n        point = lineBox.bottomLeft().translate(0, padding);\n      } else {\n        verticalAlign = BOTTOM;\n        point = lineBox.topLeft().translate(0, -padding);\n      }\n    } else {\n      verticalAlign = CENTER;\n\n      if (position === LEFT) {\n        horizontalAlign = RIGHT;\n        point = lineBox.topLeft().translate(-padding, 0);\n      } else {\n        horizontalAlign = LEFT;\n        point = lineBox.topRight().translate(padding, 0);\n      }\n    }\n\n    return {\n      point: point,\n      align: {\n        horizontal: horizontalAlign,\n        vertical: verticalAlign\n      }\n    };\n  };\n\n  return CrosshairTooltip;\n}(BaseTooltip);\n\nsetDefaultOptions(CrosshairTooltip, {\n  padding: 10\n});\nexport default CrosshairTooltip;","map":null,"metadata":{},"sourceType":"module"}