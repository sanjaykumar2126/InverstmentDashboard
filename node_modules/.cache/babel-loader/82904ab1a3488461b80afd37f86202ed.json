{"ast":null,"code":"import { geometry as geom, drawing as draw } from '@progress/kendo-drawing';\nimport { append, map } from '../../common';\nvar GridLinesMixin = {\n  createGridLines: function (altAxis) {\n    var options = this.options;\n    var radius = Math.abs(this.box.center().y - altAxis.lineBox().y1);\n    var gridLines = [];\n    var skipMajor = false;\n    var majorAngles, minorAngles;\n\n    if (options.majorGridLines.visible) {\n      majorAngles = this.majorGridLineAngles(altAxis);\n      skipMajor = true;\n      gridLines = this.renderMajorGridLines(majorAngles, radius, options.majorGridLines);\n    }\n\n    if (options.minorGridLines.visible) {\n      minorAngles = this.minorGridLineAngles(altAxis, skipMajor);\n      append(gridLines, this.renderMinorGridLines(minorAngles, radius, options.minorGridLines, altAxis, skipMajor));\n    }\n\n    return gridLines;\n  },\n  renderMajorGridLines: function (angles, radius, options) {\n    return this.renderGridLines(angles, radius, options);\n  },\n  renderMinorGridLines: function (angles, radius, options, altAxis, skipMajor) {\n    var radiusCallback = this.radiusCallback && this.radiusCallback(radius, altAxis, skipMajor);\n    return this.renderGridLines(angles, radius, options, radiusCallback);\n  },\n  renderGridLines: function (angles, radius, options, radiusCallback) {\n    var style = {\n      stroke: {\n        width: options.width,\n        color: options.color,\n        dashType: options.dashType\n      }\n    };\n    var center = this.box.center();\n    var circle = new geom.Circle([center.x, center.y], radius);\n    var container = this.gridLinesVisual();\n\n    for (var i = 0; i < angles.length; i++) {\n      var line = new draw.Path(style);\n\n      if (radiusCallback) {\n        circle.radius = radiusCallback(angles[i]);\n      }\n\n      line.moveTo(circle.center).lineTo(circle.pointAt(angles[i] + 180));\n      container.append(line);\n    }\n\n    return container.children;\n  },\n  gridLineAngles: function (altAxis, size, skip, step, skipAngles) {\n    var this$1 = this;\n    var divs = this.intervals(size, skip, step, skipAngles);\n    var options = altAxis.options;\n    var altAxisVisible = options.visible && (options.line || {}).visible !== false;\n    return map(divs, function (d) {\n      var alpha = this$1.intervalAngle(d);\n\n      if (!altAxisVisible || alpha !== 90) {\n        return alpha;\n      }\n    });\n  }\n};\nexport default GridLinesMixin;","map":null,"metadata":{},"sourceType":"module"}