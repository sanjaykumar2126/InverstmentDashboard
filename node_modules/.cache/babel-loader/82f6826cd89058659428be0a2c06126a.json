{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { BaseChart } from './BaseChart';\nimport { StockChart as KendoStockChart } from '@progress/kendo-charts';\nvar NAVIGATOR_DEFAULTS = {\n  autoBindElements: true,\n  liveDrag: false,\n  partialRedraw: true\n};\n/**\n * The root StockChart component.\n *\n * @example\n * {% embed_file stock-chart/default/main.jsx %}\n * {% embed_file stock-chart/stock-data.json %}\n */\n\nvar StockChart =\n/** @class */\nfunction (_super) {\n  __extends(StockChart, _super);\n\n  function StockChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.deriveOptionsFromParent = function (options) {\n      var navigator = Object.assign({}, options.navigator || {}, NAVIGATOR_DEFAULTS);\n      return Object.assign({}, options, {\n        navigator: navigator\n      });\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onRefresh = function (chartOptions, themeOptions, chartInstance) {\n      if (_this.props.partialRedraw) {\n        chartInstance.applyOptions(chartOptions);\n        chartInstance.bindCategories();\n        chartInstance.navigator.redrawSlaves();\n      } else {\n        chartInstance.setOptions(chartOptions, themeOptions);\n      }\n    };\n\n    _this.getTarget = function () {\n      return _this;\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(StockChart.prototype, \"chartInstance\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      if (this._baseChart !== null) {\n        return this._baseChart.chartInstance;\n      }\n\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StockChart.prototype, \"surface\", {\n    /**\n     * The Drawing `Surface` of the StockChart.\n     */\n    get: function () {\n      if (this._baseChart !== null) {\n        return this._baseChart.surface;\n      }\n\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StockChart.prototype, \"element\", {\n    /**\n     * The DOM element of the StockChart.\n     */\n    get: function () {\n      if (this._baseChart !== null) {\n        return this._baseChart.element;\n      }\n\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  StockChart.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        children = _a.children,\n        baseChartProps = __rest(_a, [\"children\"]);\n\n    return React.createElement(BaseChart, __assign({}, baseChartProps, {\n      ref: function (baseChart) {\n        return _this._baseChart = baseChart;\n      },\n      chartConstructor: KendoStockChart,\n      getTarget: this.getTarget,\n      wrapper: \"div\",\n      deriveOptionsFromParent: this.deriveOptionsFromParent,\n      onRefresh: this.onRefresh,\n      wrapperClassName: \"k-stockchart k-widget\"\n    }), children);\n  };\n\n  return StockChart;\n}(React.Component);\n\nexport { StockChart };","map":null,"metadata":{},"sourceType":"module"}