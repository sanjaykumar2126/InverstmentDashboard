{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { firstToLowerCase } from '../../common/utils/helper';\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `SmaIndicator` module is used to render SMA indicator.\n */\n\nvar SmaIndicator =\n/** @class */\nfunction (_super) {\n  __extends(SmaIndicator, _super);\n\n  function SmaIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Defines the predictions based on SMA approach\n   * @private\n   */\n\n\n  SmaIndicator.prototype.initDataSource = function (indicator, chart) {\n    var smaPoints = [];\n    var points = indicator.points;\n\n    if (points && points.length) {\n      //prepare data\n      var validData = points;\n      var field = firstToLowerCase(indicator.field);\n      var xField = 'x';\n      var signalSeries = indicator.targetSeries[0];\n\n      if (validData && validData.length && validData.length >= indicator.period) {\n        //find initial average\n        var average = 0;\n        var sum = 0;\n\n        for (var i = 0; i < indicator.period; i++) {\n          sum += validData[i][field];\n        }\n\n        average = sum / indicator.period;\n        smaPoints.push(this.getDataPoint(validData[indicator.period - 1][xField], average, validData[indicator.period - 1], signalSeries, smaPoints.length));\n        var index = indicator.period;\n\n        while (index < validData.length) {\n          sum -= validData[index - indicator.period][field];\n          sum += validData[index][field];\n          average = sum / indicator.period;\n          smaPoints.push(this.getDataPoint(validData[index][xField], average, validData[index], signalSeries, smaPoints.length));\n          index++;\n        }\n      }\n\n      this.setSeriesRange(smaPoints, indicator);\n    }\n  };\n  /**\n   * To destroy the SMA indicator\n   * @return {void}\n   * @private\n   */\n\n\n  SmaIndicator.prototype.destroy = function (chart) {\n    /**\n     * Destroys the SMA indicator\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  SmaIndicator.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'SmaIndicator';\n  };\n\n  return SmaIndicator;\n}(TechnicalAnalysis);\n\nexport { SmaIndicator };","map":null,"metadata":{},"sourceType":"module"}