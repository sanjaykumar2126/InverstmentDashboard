{"ast":null,"code":"import { geometry as geom, drawing as draw } from '@progress/kendo-drawing';\nimport { Class } from '../common';\nvar DIRECTION_ANGLE = 0.001; //any value that will make the endAngle bigger than the start angle will work here.\n\nvar ShapeBuilder = function (Class) {\n  function ShapeBuilder() {\n    Class.apply(this, arguments);\n  }\n\n  if (Class) ShapeBuilder.__proto__ = Class;\n  ShapeBuilder.prototype = Object.create(Class && Class.prototype);\n  ShapeBuilder.prototype.constructor = ShapeBuilder;\n\n  ShapeBuilder.prototype.createRing = function createRing(sector, options) {\n    var startAngle = sector.startAngle + 180;\n    var endAngle = sector.angle + startAngle; //required in order to avoid reversing the arc direction in cases like 0.000000000000001 + 100 === 100\n\n    if (sector.angle > 0 && startAngle === endAngle) {\n      endAngle += DIRECTION_ANGLE;\n    }\n\n    var center = new geom.Point(sector.center.x, sector.center.y);\n    var radius = Math.max(sector.radius, 0);\n    var innerRadius = Math.max(sector.innerRadius, 0);\n    var arc = new geom.Arc(center, {\n      startAngle: startAngle,\n      endAngle: endAngle,\n      radiusX: radius,\n      radiusY: radius\n    });\n    var path = draw.Path.fromArc(arc, options).close();\n\n    if (innerRadius) {\n      arc.radiusX = arc.radiusY = innerRadius;\n      var innerEnd = arc.pointAt(endAngle);\n      path.lineTo(innerEnd.x, innerEnd.y);\n      path.arc(endAngle, startAngle, innerRadius, innerRadius, true);\n    } else {\n      path.lineTo(center.x, center.y);\n    }\n\n    return path;\n  };\n\n  return ShapeBuilder;\n}(Class);\n\nShapeBuilder.current = new ShapeBuilder();\nexport default ShapeBuilder;","map":null,"metadata":{},"sourceType":"module"}