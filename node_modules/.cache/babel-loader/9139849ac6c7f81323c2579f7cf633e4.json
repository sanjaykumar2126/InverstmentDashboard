{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Series } from '../series/chart-series';\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `MacdIndicator` module is used to render MACD indicator.\n */\n\nvar MacdIndicator =\n/** @class */\nfunction (_super) {\n  __extends(MacdIndicator, _super);\n\n  function MacdIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Defines the collection of series to represent the MACD indicator\n   * @private\n   */\n\n\n  MacdIndicator.prototype.initSeriesCollection = function (indicator, chart) {\n    _super.prototype.initSeriesCollection.call(this, indicator, chart);\n\n    if (indicator.macdType === 'Line' || indicator.macdType === 'Both') {\n      var macdSeries = new Series(indicator, 'targetSeries', {}, true);\n      this.setSeriesProperties(macdSeries, indicator, 'MacdLine', indicator.macdLine.color, indicator.macdLine.width, chart);\n    }\n\n    if (indicator.macdType === 'Histogram' || indicator.macdType === 'Both') {\n      var histogramSeries = new Series(indicator, 'targetSeries', {}, true);\n      histogramSeries.type = 'Column';\n      this.setSeriesProperties(histogramSeries, indicator, 'Histogram', indicator.macdPositiveColor, indicator.width, chart);\n    }\n  };\n  /**\n   * Defines the predictions using MACD approach\n   * @private\n   */\n\n\n  MacdIndicator.prototype.initDataSource = function (indicator, chart) {\n    var signalCollection = [];\n    var fastPeriod = indicator.fastPeriod;\n    var slowPeriod = indicator.slowPeriod;\n    var trigger = indicator.period;\n    var length = fastPeriod + trigger;\n    var macdCollection = [];\n    var histogramCollection = [];\n    var validData = indicator.points;\n    var signalSeries = indicator.targetSeries[0];\n    var histogramSeries;\n    var macdLineSeries;\n\n    if (indicator.macdType === 'Histogram') {\n      histogramSeries = indicator.targetSeries[1];\n    } else {\n      macdLineSeries = indicator.targetSeries[1];\n\n      if (indicator.macdType === 'Both') {\n        histogramSeries = indicator.targetSeries[2];\n      }\n    }\n\n    if (validData && length < validData.length && slowPeriod <= fastPeriod && slowPeriod > 0 && length - 2 >= 0) {\n      var shortEMA = this.calculateEMAValues(slowPeriod, validData, 'close');\n      var longEMA = this.calculateEMAValues(fastPeriod, validData, 'close');\n      var macdValues = this.getMACDVales(indicator, shortEMA, longEMA);\n      macdCollection = this.getMACDPoints(indicator, macdValues, validData, macdLineSeries || signalSeries);\n      var signalEMA = this.calculateEMAValues(trigger, macdCollection, 'y');\n      signalCollection = this.getSignalPoints(indicator, signalEMA, validData, signalSeries);\n\n      if (histogramSeries) {\n        histogramCollection = this.getHistogramPoints(indicator, macdValues, signalEMA, validData, histogramSeries);\n      }\n    }\n\n    this.setSeriesRange(signalCollection, indicator, indicator.targetSeries[0]);\n\n    if (histogramSeries) {\n      this.setSeriesRange(histogramCollection, indicator, histogramSeries);\n    }\n\n    if (macdLineSeries) {\n      this.setSeriesRange(macdCollection, indicator, macdLineSeries);\n    }\n  };\n  /**\n   * Calculates the EMA values for the given period\n   */\n\n\n  MacdIndicator.prototype.calculateEMAValues = function (period, validData, field) {\n    var sum = 0;\n    var initialEMA = 0;\n    var emaValues = [];\n    var emaPercent = 2 / (period + 1);\n\n    for (var i = 0; i < period; i++) {\n      sum += Number(validData[i][field]);\n    }\n\n    initialEMA = sum / period;\n    emaValues.push(initialEMA);\n    var emaAvg = initialEMA;\n\n    for (var j = period; j < validData.length; j++) {\n      emaAvg = (Number(validData[j][field]) - emaAvg) * emaPercent + emaAvg;\n      emaValues.push(emaAvg);\n    }\n\n    return emaValues;\n  };\n  /**\n   * Defines the MACD Points\n   */\n\n\n  MacdIndicator.prototype.getMACDPoints = function (indicator, macdPoints, validData, series) {\n    var macdCollection = [];\n    var dataMACDIndex = indicator.fastPeriod - 1;\n    var macdIndex = 0;\n\n    while (dataMACDIndex < validData.length) {\n      macdCollection.push(this.getDataPoint(validData[dataMACDIndex].x, macdPoints[macdIndex], validData[dataMACDIndex], series, macdCollection.length));\n      dataMACDIndex++;\n      macdIndex++;\n    }\n\n    return macdCollection;\n  };\n  /**\n   * Calculates the signal points\n   */\n\n\n  MacdIndicator.prototype.getSignalPoints = function (indicator, signalEma, validData, series) {\n    var dataSignalIndex = indicator.fastPeriod + indicator.period - 2;\n    var signalIndex = 0;\n    var signalCollection = [];\n\n    while (dataSignalIndex < validData.length) {\n      signalCollection.push(this.getDataPoint(validData[dataSignalIndex].x, signalEma[signalIndex], validData[dataSignalIndex], series, signalCollection.length));\n      dataSignalIndex++;\n      signalIndex++;\n    }\n\n    return signalCollection;\n  };\n  /**\n   * Calculates the MACD values\n   */\n\n\n  MacdIndicator.prototype.getMACDVales = function (indicator, shortEma, longEma) {\n    var macdPoints = [];\n    var diff = indicator.fastPeriod - indicator.slowPeriod;\n\n    for (var i = 0; i < longEma.length; i++) {\n      macdPoints.push(shortEma[i + diff] - longEma[i]);\n    }\n\n    return macdPoints;\n  };\n  /**\n   * Calculates the Histogram Points\n   */\n\n\n  MacdIndicator.prototype.getHistogramPoints = function (indicator, macdPoints, signalEma, validData, series) {\n    var dataHistogramIndex = indicator.fastPeriod + indicator.period - 2;\n    var histogramIndex = 0;\n    var histogramCollection = [];\n\n    while (dataHistogramIndex < validData.length) {\n      histogramCollection.push(this.getDataPoint(validData[dataHistogramIndex].x, macdPoints[histogramIndex + (indicator.period - 1)] - signalEma[histogramIndex], validData[dataHistogramIndex], series, histogramCollection.length, indicator));\n      dataHistogramIndex++;\n      histogramIndex++;\n    }\n\n    return histogramCollection;\n  };\n  /**\n   * To destroy the MACD Indicator.\n   * @return {void}\n   * @private\n   */\n\n\n  MacdIndicator.prototype.destroy = function (chart) {\n    /**\n     * Destroys the MACD indicator\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  MacdIndicator.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'MacdIndicator';\n  };\n\n  return MacdIndicator;\n}(TechnicalAnalysis);\n\nexport { MacdIndicator };","map":null,"metadata":{},"sourceType":"module"}