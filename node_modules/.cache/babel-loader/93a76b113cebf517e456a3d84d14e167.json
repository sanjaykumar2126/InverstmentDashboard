{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { createElement, compile as templateComplier, remove } from '@syncfusion/ej2-base';\nimport { SvgRenderer } from '@syncfusion/ej2-svg-base';\nimport { Animation } from '@syncfusion/ej2-base';\nimport { SmithchartSize } from '../../smithchart/utils/utils';\nexport function createSvg(smithchart) {\n  smithchart.renderer = new SvgRenderer(smithchart.element.id);\n  calculateSize(smithchart);\n  smithchart.svgObject = smithchart.renderer.createSvg({\n    id: smithchart.element.id + '_svg',\n    width: smithchart.availableSize.width,\n    height: smithchart.availableSize.height\n  });\n}\nexport function getElement(id) {\n  return document.getElementById(id);\n}\n/**\n * @private\n * Trim the title text\n */\n\nexport function textTrim(maxwidth, text, font) {\n  var label = text;\n  var size = measureText(text, font).width;\n\n  if (size > maxwidth) {\n    var textLength = text.length;\n\n    for (var i = textLength - 1; i >= 0; --i) {\n      label = text.substring(0, i) + '...';\n      size = measureText(label, font).width;\n\n      if (size <= maxwidth || label.length < 4) {\n        if (label.length < 4) {\n          label = ' ';\n        }\n\n        return label;\n      }\n    }\n  }\n\n  return label;\n}\n/**\n * Function     to compile the template function for maps.\n * @returns Function\n * @private\n */\n\nexport function getTemplateFunction(templateString) {\n  var templateFn = null;\n  var e;\n\n  try {\n    if (document.querySelectorAll(templateString).length) {\n      templateFn = templateComplier(document.querySelector(templateString).innerHTML.trim());\n    }\n  } catch (e) {\n    templateFn = templateComplier(templateString);\n  }\n\n  return templateFn;\n}\nexport function convertElementFromLabel(element, labelId, data, index, smithchart) {\n  var labelEle = element[0];\n  var templateHtml = labelEle.outerHTML;\n  var properties = Object.keys(data);\n\n  for (var i = 0; i < properties.length; i++) {\n    templateHtml = templateHtml.replace(new RegExp('{{:' + properties[i] + '}}', 'g'), data[properties[i].toString()]);\n  }\n\n  return createElement('div', {\n    id: labelId,\n    innerHTML: templateHtml,\n    styles: 'position: absolute'\n  });\n}\nexport function _getEpsilonValue() {\n  var e = 1.0;\n\n  while (1.0 + 0.5 * e !== 1.0) {\n    e *= 0.5;\n  }\n\n  return e;\n}\n/**\n * Method to calculate the width and height of the smithchart\n */\n\nexport function calculateSize(smithchart) {\n  var containerWidth = smithchart.element.clientWidth;\n  var containerHeight = smithchart.element.clientHeight;\n  smithchart.availableSize = new SmithchartSize(stringToNumber(smithchart.width, containerWidth) || containerWidth || 600, stringToNumber(smithchart.height, containerHeight) || containerHeight || 450);\n}\n/**\n * Animation for template\n * @private\n */\n\nexport function templateAnimate(smithchart, element, delay, duration, name) {\n  var opacity = 0;\n  var delta;\n  var value;\n  new Animation({}).animate(element, {\n    duration: duration,\n    delay: delay,\n    name: name,\n    progress: function (args) {\n      delta = (args.timeStamp - args.delay) / args.duration;\n      value = opacity + delta * 1;\n      args.element.style.opacity = value.toString();\n    },\n    end: function (args) {\n      var opacity = 1;\n      args.element.style.opacity = opacity.toString();\n      smithchart.trigger('animationComplete', event);\n    }\n  });\n}\n/** @private */\n\nexport function stringToNumber(value, containerSize) {\n  if (value !== null && value !== undefined) {\n    return value.indexOf('%') !== -1 ? containerSize / 100 * parseInt(value, 10) : parseInt(value, 10);\n  }\n\n  return null;\n}\n/**\n * Internal use of path options\n * @private\n */\n\nvar PathOption =\n/** @class */\nfunction () {\n  function PathOption(id, fill, width, color, opacity, dashArray, d) {\n    this.id = id;\n    this.opacity = opacity;\n    this.fill = fill;\n    this.stroke = color;\n    this['stroke-width'] = width;\n    this['stroke-dasharray'] = dashArray;\n    this.d = d;\n  }\n\n  return PathOption;\n}();\n\nexport { PathOption };\n/**\n * Internal use of rectangle options\n * @private\n */\n\nvar RectOption =\n/** @class */\nfunction (_super) {\n  __extends(RectOption, _super);\n\n  function RectOption(id, fill, border, opacity, rect) {\n    var _this = _super.call(this, id, fill, border.width, border.color, opacity) || this;\n\n    _this.y = rect.y;\n    _this.x = rect.x;\n    _this.height = rect.height;\n    _this.width = rect.width;\n    return _this;\n  }\n\n  return RectOption;\n}(PathOption);\n\nexport { RectOption };\n/**\n * Internal use of circle options\n * @private\n */\n\nvar CircleOption =\n/** @class */\nfunction (_super) {\n  __extends(CircleOption, _super);\n\n  function CircleOption(id, fill, border, opacity, cx, cy, r, dashArray) {\n    var _this = _super.call(this, id, fill, border.width, border.color, opacity) || this;\n\n    _this.cy = cy;\n    _this.cx = cx;\n    _this.r = r;\n    _this['stroke-dasharray'] = dashArray;\n    return _this;\n  }\n\n  return CircleOption;\n}(PathOption);\n\nexport { CircleOption };\nexport function measureText(text, font) {\n  var htmlObject = document.getElementById('smithchartmeasuretext');\n\n  if (htmlObject === null) {\n    htmlObject = createElement('text', {\n      id: 'smithchartmeasuretext'\n    });\n    document.body.appendChild(htmlObject);\n  }\n\n  htmlObject.innerHTML = text;\n  htmlObject.style.position = 'absolute';\n  htmlObject.style.visibility = 'hidden';\n  htmlObject.style.left = '0';\n  htmlObject.style.top = '-100';\n  htmlObject.style.whiteSpace = 'nowrap';\n  htmlObject.style.fontSize = font.size;\n  htmlObject.style.fontWeight = font.fontWeight;\n  htmlObject.style.fontStyle = font.fontStyle;\n  htmlObject.style.fontFamily = font.fontFamily; // For bootstrap line height issue\n\n  htmlObject.style.lineHeight = 'normal';\n  return new SmithchartSize(htmlObject.clientWidth, htmlObject.clientHeight);\n}\n/**\n * Internal use of text options\n * @private\n */\n\nvar TextOption =\n/** @class */\nfunction () {\n  function TextOption(id, x, y, anchor, text) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.anchor = anchor;\n    this.text = text;\n  }\n\n  return TextOption;\n}();\n\nexport { TextOption };\n/**\n * To remove element by id\n */\n\nexport function removeElement(id) {\n  var element = document.getElementById(id);\n  return element ? remove(element) : null;\n}\n/**\n * Animation Effect Calculation Started Here\n * @param currentTime\n * @param startValue\n * @param endValue\n * @param duration\n * @private\n */\n\nexport function linear(currentTime, startValue, endValue, duration) {\n  return -endValue * Math.cos(currentTime / duration * (Math.PI / 2)) + endValue + startValue;\n}\nexport function reverselinear(currentTime, startValue, endValue, duration) {\n  return -startValue * Math.sin(currentTime / duration * (Math.PI / 2)) + endValue + startValue;\n}\n/** @private */\n\nexport function getAnimationFunction(effect) {\n  var functionName;\n\n  switch (effect) {\n    case 'Linear':\n      functionName = linear;\n      break;\n\n    case 'Reverse':\n      functionName = reverselinear;\n      break;\n  }\n\n  return functionName;\n}\n/**\n * Internal rendering of text\n * @private\n */\n\nexport function renderTextElement(options, font, color, parent) {\n  var renderOptions = {\n    'id': options.id,\n    'x': options.x,\n    'y': options.y,\n    'fill': color,\n    'font-size': font.size,\n    'font-style': font.fontStyle,\n    'font-family': font.fontFamily,\n    'font-weight': font.fontWeight,\n    'text-anchor': options.anchor,\n    'opacity': font.opacity\n  };\n  var text = options.text;\n  var renderer = new SvgRenderer('');\n  var height;\n  var htmlObject = renderer.createText(renderOptions, text);\n  parent.appendChild(htmlObject);\n  return htmlObject;\n}","map":null,"metadata":{},"sourceType":"module"}