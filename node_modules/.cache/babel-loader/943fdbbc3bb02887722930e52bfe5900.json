{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport { BoxElement, FloatElement, ShapeElement, TextBox } from '../../core';\nimport { LEGEND_ITEM_CLICK, LEGEND_ITEM_HOVER, LEGEND_ITEM_LEAVE } from '../constants';\nimport { CENTER, WHITE } from '../../common/constants';\nimport { deepExtend, eventElement } from '../../common';\n\nvar LegendItem = function (BoxElement) {\n  function LegendItem(options) {\n    BoxElement.call(this, options);\n    this.createContainer();\n\n    if (!options.rtl) {\n      this.createMarker();\n      this.createLabel();\n    } else {\n      this.createLabel();\n      this.createMarker();\n    }\n  }\n\n  if (BoxElement) LegendItem.__proto__ = BoxElement;\n  LegendItem.prototype = Object.create(BoxElement && BoxElement.prototype);\n  LegendItem.prototype.constructor = LegendItem;\n\n  LegendItem.prototype.createContainer = function createContainer() {\n    this.container = new FloatElement({\n      vertical: false,\n      wrap: false,\n      align: CENTER,\n      spacing: this.options.spacing\n    });\n    this.append(this.container);\n  };\n\n  LegendItem.prototype.createMarker = function createMarker() {\n    this.container.append(new ShapeElement(this.markerOptions()));\n  };\n\n  LegendItem.prototype.markerOptions = function markerOptions() {\n    var options = this.options;\n    var markerColor = options.markerColor;\n    return deepExtend({}, options.markers, {\n      background: markerColor,\n      border: {\n        color: markerColor\n      }\n    });\n  };\n\n  LegendItem.prototype.createLabel = function createLabel() {\n    var options = this.options;\n    var labelOptions = deepExtend({}, options.labels);\n    this.container.append(new TextBox(options.text, labelOptions));\n  };\n\n  LegendItem.prototype.renderComplete = function renderComplete() {\n    BoxElement.prototype.renderComplete.call(this);\n    var cursor = this.options.cursor || {};\n    var eventSink = this._itemOverlay = draw.Path.fromRect(this.container.box.toRect(), {\n      fill: {\n        color: WHITE,\n        opacity: 0\n      },\n      stroke: null,\n      cursor: cursor.style || cursor\n    });\n    this.appendVisual(eventSink);\n  };\n\n  LegendItem.prototype.click = function click(widget, e) {\n    var args = this.eventArgs(e);\n\n    if (!widget.trigger(LEGEND_ITEM_CLICK, args) && e && e.type === 'contextmenu') {\n      e.preventDefault();\n    }\n  };\n\n  LegendItem.prototype.over = function over(widget, e) {\n    var args = this.eventArgs(e);\n\n    if (!widget.trigger(LEGEND_ITEM_HOVER, args)) {\n      widget._legendItemHover(args.seriesIndex, args.pointIndex);\n    } // Don't trigger point hover for legend items\n\n\n    return true;\n  };\n\n  LegendItem.prototype.out = function out(widget, e) {\n    widget._unsetActivePoint();\n\n    widget.trigger(LEGEND_ITEM_LEAVE, this.eventArgs(e));\n  };\n\n  LegendItem.prototype.eventArgs = function eventArgs(e) {\n    var options = this.options;\n    return {\n      element: eventElement(e),\n      text: options.text,\n      series: options.series,\n      seriesIndex: options.series.index,\n      pointIndex: options.pointIndex\n    };\n  };\n\n  LegendItem.prototype.renderVisual = function renderVisual() {\n    var this$1 = this;\n    var options = this.options;\n    var customVisual = options.visual;\n\n    if (customVisual) {\n      this.visual = customVisual({\n        active: options.active,\n        series: options.series,\n        sender: this.getSender(),\n        pointIndex: options.pointIndex,\n        options: {\n          markers: this.markerOptions(),\n          labels: options.labels\n        },\n        createVisual: function () {\n          this$1.createVisual();\n          this$1.renderChildren();\n          this$1.renderComplete();\n          var defaultVisual = this$1.visual;\n          delete this$1.visual;\n          return defaultVisual;\n        }\n      });\n      this.addVisual();\n    } else {\n      BoxElement.prototype.renderVisual.call(this);\n    }\n  };\n\n  return LegendItem;\n}(BoxElement);\n\nexport default LegendItem;","map":null,"metadata":{},"sourceType":"module"}