{"ast":null,"code":"import BarChart from '../bar-chart/bar-chart';\nimport SeriesBinder from '../series-binder';\nimport WaterfallSegment from './waterfall-segment';\nimport categoriesCount from '../utils/categories-count';\nimport { isNumber } from '../../common';\n\nvar WaterfallChart = function (BarChart) {\n  function WaterfallChart() {\n    BarChart.apply(this, arguments);\n  }\n\n  if (BarChart) WaterfallChart.__proto__ = BarChart;\n  WaterfallChart.prototype = Object.create(BarChart && BarChart.prototype);\n  WaterfallChart.prototype.constructor = WaterfallChart;\n\n  WaterfallChart.prototype.render = function render() {\n    BarChart.prototype.render.call(this);\n    this.createSegments();\n  };\n\n  WaterfallChart.prototype.traverseDataPoints = function traverseDataPoints(callback) {\n    var this$1 = this;\n    var series = this.options.series;\n    var totalCategories = categoriesCount(series);\n    var isVertical = !this.options.invertAxes;\n\n    for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n      var currentSeries = series[seriesIx];\n      var total = 0;\n      var runningTotal = 0;\n\n      for (var categoryIx = 0; categoryIx < totalCategories; categoryIx++) {\n        var data = SeriesBinder.current.bindPoint(currentSeries, categoryIx);\n        var value = data.valueFields.value;\n        var summary = data.fields.summary;\n        var from = total;\n        var to = void 0;\n\n        if (summary) {\n          if (summary.toLowerCase() === \"total\") {\n            data.valueFields.value = total;\n            from = 0;\n            to = total;\n          } else {\n            data.valueFields.value = runningTotal;\n            to = from - runningTotal;\n            runningTotal = 0;\n          }\n        } else if (isNumber(value)) {\n          runningTotal += value;\n          total += value;\n          to = total;\n        }\n\n        callback(data, {\n          category: this$1.categoryAxis.categoryAt(categoryIx),\n          categoryIx: categoryIx,\n          series: currentSeries,\n          seriesIx: seriesIx,\n          total: total,\n          runningTotal: runningTotal,\n          from: from,\n          to: to,\n          isVertical: isVertical\n        });\n      }\n    }\n  };\n\n  WaterfallChart.prototype.updateRange = function updateRange(value, fields) {\n    BarChart.prototype.updateRange.call(this, {\n      value: fields.to\n    }, fields);\n  };\n\n  WaterfallChart.prototype.aboveAxis = function aboveAxis(point) {\n    return point.value >= 0;\n  };\n\n  WaterfallChart.prototype.plotRange = function plotRange(point) {\n    return [point.from, point.to];\n  };\n\n  WaterfallChart.prototype.createSegments = function createSegments() {\n    var this$1 = this;\n    var series = this.options.series;\n    var seriesPoints = this.seriesPoints;\n    var segments = this.segments = [];\n\n    for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n      var currentSeries = series[seriesIx];\n      var points = seriesPoints[seriesIx];\n\n      if (points) {\n        var prevPoint = void 0;\n\n        for (var pointIx = 0; pointIx < points.length; pointIx++) {\n          var point = points[pointIx];\n\n          if (point && prevPoint) {\n            var segment = new WaterfallSegment(prevPoint, point, currentSeries);\n            segments.push(segment);\n            this$1.append(segment);\n          }\n\n          prevPoint = point;\n        }\n      }\n    }\n  };\n\n  return WaterfallChart;\n}(BarChart);\n\nexport default WaterfallChart;","map":null,"metadata":{},"sourceType":"module"}