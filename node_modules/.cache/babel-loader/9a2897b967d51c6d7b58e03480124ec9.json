{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { valueToCoefficient, textElement, firstToLowerCase } from '../../common/utils/helper';\nimport { PathOption, Rect, measureText, TextOption } from '@syncfusion/ej2-svg-base';\nimport { DateTime } from '../../chart/index';\nimport { VisibleLabels } from '../../chart/index';\n/**\n * class for axis\n */\n\nvar RangeNavigatorAxis =\n/** @class */\nfunction (_super) {\n  __extends(RangeNavigatorAxis, _super);\n\n  function RangeNavigatorAxis(range) {\n    var _this = _super.call(this) || this;\n\n    _this.firstLevelLabels = [];\n    _this.secondLevelLabels = [];\n    _this.rangeNavigator = range;\n    return _this;\n  }\n  /**\n   * To render grid lines of axis\n   */\n\n\n  RangeNavigatorAxis.prototype.renderGridLines = function () {\n    var pointX = 0;\n    var control = this.rangeNavigator;\n    var majorGridLines = control.majorGridLines;\n    var majorTickLines = control.majorTickLines;\n    var majorGrid = '';\n    var majorTick = '';\n    var rect = control.bounds;\n    var chartAxis = control.chartSeries.xAxis;\n    var labelLength;\n    var range = chartAxis.visibleRange;\n    var disabledColor = control.disableRangeSelector ? 'transparent' : null;\n    this.gridLines = control.renderer.createGroup({\n      id: control.element.id + '_GridLines'\n    });\n    var tick = control.tickPosition === 'Outside' || control.series.length === 0 ? rect.y + rect.height + majorTickLines.height : rect.y + rect.height - majorTickLines.height; //Gridlines\n\n    this.firstLevelLabels = [];\n    chartAxis.labelStyle = control.labelStyle;\n    chartAxis.skeleton = control.skeleton;\n    chartAxis.skeletonType = control.skeletonType;\n    chartAxis.isChart = false;\n\n    if (control.valueType === 'DateTime') {\n      this.calculateDateTimeNiceInterval(chartAxis, rect, chartAxis.doubleRange.start, chartAxis.doubleRange.end, chartAxis.isChart);\n      this.actualIntervalType = chartAxis.actualIntervalType;\n      this.findAxisLabels(chartAxis);\n    }\n\n    this.firstLevelLabels = chartAxis.visibleLabels;\n    this.lowerValues = [];\n    labelLength = chartAxis.visibleLabels.length;\n\n    for (var i = 0; i < labelLength; i++) {\n      this.lowerValues.push(this.firstLevelLabels[i].value);\n      pointX = valueToCoefficient(this.firstLevelLabels[i].value, chartAxis) * rect.width + rect.x;\n\n      if (pointX >= rect.x && rect.x + rect.width >= pointX) {\n        majorGrid = majorGrid.concat('M ' + pointX + ' ' + (control.bounds.y + control.bounds.height) + ' L ' + pointX + ' ' + control.bounds.y + ' ');\n        majorTick = majorTick.concat('M ' + pointX + ' ' + (rect.y + rect.height) + ' L ' + pointX + ' ' + tick + ' ');\n      }\n    }\n\n    var options = new PathOption(control.element.id + '_MajorGridLine', 'transparent', majorGridLines.width, control.series.length ? disabledColor || majorGridLines.color || control.themeStyle.gridLineColor : 'transparent', 1, majorGridLines.dashArray, majorGrid);\n    this.gridLines.appendChild(control.renderer.drawPath(options));\n    options = new PathOption(control.element.id + '_MajorTickLine', 'transparent', majorTickLines.width, disabledColor || majorTickLines.color || control.themeStyle.gridLineColor, 1, majorGridLines.dashArray, majorTick);\n    this.gridLines.appendChild(control.renderer.drawPath(options));\n  };\n  /**\n   * To render of axis labels\n   */\n\n\n  RangeNavigatorAxis.prototype.renderAxisLabels = function () {\n    var axis = this.rangeNavigator.chartSeries.xAxis;\n    var control = this.rangeNavigator;\n    var pointY;\n    var rect = control.bounds;\n    var labelElement = control.renderer.createGroup({\n      id: control.element.id + '_AxisLabels'\n    });\n    var firstLevelElement = control.renderer.createGroup({\n      id: control.element.id + '_FirstLevelAxisLabels'\n    });\n    var secondLevelElement = control.renderer.createGroup({\n      id: control.element.id + '_SecondLevelAxisLabels'\n    });\n    var secondaryAxis = axis;\n    pointY = this.findLabelY(control, false);\n    this.placeAxisLabels(axis, pointY, '_AxisLabel_', control, firstLevelElement);\n    secondaryAxis.intervalType = secondaryAxis.actualIntervalType = control.groupBy || this.getSecondaryLabelType(axis.actualIntervalType);\n\n    if (control.enableGrouping && control.valueType === 'DateTime' && this.actualIntervalType !== 'Years') {\n      secondaryAxis.visibleRange.interval = 1;\n      secondaryAxis.visibleLabels = [];\n      this.findAxisLabels(secondaryAxis);\n      this.secondLevelLabels = secondaryAxis.visibleLabels;\n      pointY = this.findLabelY(control, true);\n      var border = this.placeAxisLabels(secondaryAxis, pointY, '_SecondaryLabel_', control, secondLevelElement);\n      var path = new PathOption(control.element.id + '_SecondaryMajorLines', 'transparent', control.majorTickLines.width, control.majorTickLines.color || control.themeStyle.gridLineColor, 1, control.majorGridLines.dashArray, border);\n      this.gridLines.appendChild(control.renderer.drawPath(path));\n    }\n\n    control.chartSeries.xAxis.visibleLabels = control.chartSeries.xAxis.visibleLabels.concat(secondaryAxis.visibleLabels);\n    labelElement.appendChild(firstLevelElement);\n    labelElement.appendChild(secondLevelElement); //gridlines and axis label append to element\n\n    control.svgObject.appendChild(this.gridLines);\n    control.svgObject.appendChild(labelElement);\n  };\n  /**\n   * To find secondary level label type\n   * @param type\n   */\n\n\n  RangeNavigatorAxis.prototype.getSecondaryLabelType = function (type) {\n    var types = ['Years', 'Quarter', 'Months', 'Weeks', 'Days', 'Hours', 'Minutes', 'Seconds'];\n    return type === 'Years' ? 'Years' : types[types.indexOf(type) - 1];\n  };\n  /**\n   * To find labels for date time axis\n   * @param axis\n   */\n\n\n  RangeNavigatorAxis.prototype.findAxisLabels = function (axis) {\n    axis.visibleLabels = [];\n    var start = new Date(axis.visibleRange.min);\n    var nextInterval;\n    var text;\n    var interval = this.rangeNavigator.interval ? this.rangeNavigator.interval : 1;\n\n    switch (axis.actualIntervalType) {\n      case 'Years':\n        start = new Date(start.getFullYear().toString());\n        break;\n\n      case 'Quarter':\n        if (start.getMonth() <= 2) {\n          start = new Date(start.getFullYear(), 0, 1);\n        } else if (start.getMonth() <= 5) {\n          start = new Date(start.getFullYear(), 3, 1);\n        } else if (start.getMonth() <= 8) {\n          start = new Date(start.getFullYear(), 6, 1);\n        } else {\n          start = new Date(start.getFullYear(), 9, 1);\n        }\n\n        break;\n\n      case 'Months':\n        start = new Date(start.getFullYear(), start.getMonth());\n        break;\n\n      case 'Weeks':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate() - start.getDay());\n        break;\n\n      case 'Days':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate());\n        break;\n\n      case 'Hours':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours());\n        break;\n\n      case 'Minutes':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours(), start.getMinutes());\n        break;\n\n      case 'Seconds':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours(), start.getMinutes(), start.getSeconds());\n        break;\n    }\n\n    nextInterval = start.getTime();\n    this.rangeNavigator.format = this.rangeNavigator.intl.getDateFormat({\n      format: axis.labelFormat,\n      type: firstToLowerCase(axis.skeletonType),\n      skeleton: this.getSkeleton(axis, null, null)\n    });\n\n    while (nextInterval < axis.visibleRange.max) {\n      text = this.dateFormats(this.rangeNavigator.format(new Date(nextInterval)), axis, axis.visibleLabels.length);\n      axis.visibleLabels.push(new VisibleLabels(text, nextInterval, this.rangeNavigator.labelStyle, text));\n      nextInterval = this.increaseDateTimeInterval(axis, nextInterval, interval).getTime();\n    }\n  };\n  /**\n   * To find date time formats for Quarter and week interval type\n   * @param text\n   * @param axis\n   * @param index\n   */\n\n\n  RangeNavigatorAxis.prototype.dateFormats = function (text, axis, index) {\n    var changedText = text;\n    var isFirstLevel = this.rangeNavigator.enableGrouping && this.firstLevelLabels.length === 0;\n\n    switch (axis.actualIntervalType) {\n      case 'Quarter':\n        if (text.indexOf('Jan') > -1) {\n          changedText = !isFirstLevel ? text.replace('Jan', 'Quarter1') : 'Quarter1';\n        } else if (text.indexOf('Apr') > -1) {\n          changedText = !isFirstLevel ? text.replace('Apr', 'Quarter2') : 'Quarter2';\n        } else if (text.indexOf('Jul') > -1) {\n          changedText = !isFirstLevel ? text.replace('Jul', 'Quarter3') : 'Quarter3';\n        } else if (text.indexOf('Oct') > -1) {\n          changedText = !isFirstLevel ? text.replace('Oct', 'Quarter4') : 'Quarter4';\n        }\n\n        break;\n\n      case 'Weeks':\n        changedText = 'Week' + ++index;\n        break;\n\n      default:\n        changedText = text;\n        break;\n    }\n\n    return changedText;\n  };\n  /**\n   * To find the y co-ordinate for axis labels\n   * @param control - rangeNavigator\n   * @param isSecondary sets true if the axis is secondary axis\n   */\n\n\n  RangeNavigatorAxis.prototype.findLabelY = function (control, isSecondary) {\n    var pointY;\n    var reference = control.bounds.y + control.bounds.height;\n    var tickHeight = control.majorTickLines.height;\n    var textHeight = measureText('Quarter1 2011', control.labelStyle).height;\n    var padding = 8;\n\n    if (control.labelPosition === 'Outside' && control.tickPosition === 'Outside' || control.series.length === 0) {\n      pointY = reference + tickHeight + padding + textHeight * 0.75;\n    } else if (control.labelPosition === 'Inside' && control.tickPosition === 'Inside') {\n      pointY = reference - tickHeight - padding;\n    } else if (control.labelPosition === 'Inside' && control.tickPosition === 'Outside') {\n      pointY = reference - padding;\n    } else {\n      pointY = reference + padding + textHeight * 0.75;\n    }\n\n    if (isSecondary) {\n      padding = 15;\n\n      if (control.labelPosition === 'Outside' || control.series.length === 0) {\n        pointY += padding + textHeight * 0.75;\n      } else {\n        pointY = control.tickPosition === 'Outside' || control.series.length === 0 ? reference + tickHeight + padding + textHeight * 0.75 : reference + padding + textHeight * 0.75;\n      }\n    }\n\n    return pointY;\n  };\n  /**\n   * It places the axis labels and returns border for secondary axis labels\n   * @param axis axis for the lables placed\n   * @param pointY y co-ordinate for axis labels\n   * @param id id for the axis elements\n   * @param control range navigator\n   * @param labelElement parent element in which axis labels appended\n   */\n\n\n  RangeNavigatorAxis.prototype.placeAxisLabels = function (axis, pointY, id, control, labelElement) {\n    var maxLabels = axis.visibleLabels.length;\n    var label;\n    var prevLabel;\n    var pointX;\n    var rect = control.bounds;\n    var border = '';\n    var pointXGrid;\n    var disabledColor = control.disableRangeSelector ? 'transparent' : null;\n    var prevX = control.enableRtl ? rect.x + rect.width : rect.x;\n    var intervalType = axis.actualIntervalType;\n    var intervalInTime = control.valueType === 'DateTime' ? maxLabels > 1 ? axis.visibleLabels[1].value - axis.visibleLabels[0].value : (axis.visibleRange.max - axis.visibleLabels[0].value) / 2 : 0;\n\n    if (control.valueType === 'DateTime' && (intervalType === 'Quarter' || intervalType === 'Weeks')) {\n      this.findSuitableFormat(axis, control);\n    }\n\n    for (var i = 0, len = maxLabels; i < len; i++) {\n      label = axis.visibleLabels[i];\n      label.size = measureText(label.text, axis.labelStyle);\n\n      if (control.secondaryLabelAlignment === 'Middle') {\n        pointX = valueToCoefficient(label.value + intervalInTime / 2, axis) * rect.width + rect.x;\n      } else if (id.indexOf('Secondary') > -1) {\n        pointX = this.findAlignment(axis, i);\n      }\n\n      pointXGrid = valueToCoefficient(label.value, axis) * rect.width + rect.x; //edgelabelPlacements\n\n      if ((i === 0 || i === axis.visibleLabels.length - 1 && control.enableRtl) && pointX < rect.x) {\n        pointX = rect.x + label.size.width / 2;\n      }\n\n      if ((i === axis.visibleLabels.length - 1 || i === 0 && control.enableRtl) && pointX + label.size.width > rect.x + rect.width) {\n        pointX = rect.x + rect.width - label.size.width / 2;\n      } //secondary axis grid lines\n\n\n      if (id.indexOf('_SecondaryLabel_') > -1) {\n        if (pointX >= rect.x && rect.x + rect.width >= pointX) {\n          border = border.concat('M ' + pointXGrid + ' ' + pointY + ' L ' + pointXGrid + ' ' + (pointY - label.size.height));\n        }\n      } //smart axis label position,\n\n\n      if (control.labelIntersectAction === 'Hide' && i !== 0 && this.isIntersect(axis, pointX, label.size.width, prevX, prevLabel.size.width)) {\n        continue;\n      } //labelrender event\n\n\n      var argsData = void 0;\n      var labelStyle = control.labelStyle;\n      var style = {\n        size: labelStyle.size,\n        color: disabledColor || labelStyle.color || control.themeStyle.labelFontColor,\n        fontFamily: labelStyle.fontFamily,\n        fontStyle: labelStyle.fontStyle || control.labelStyle.fontStyle,\n        fontWeight: labelStyle.fontWeight || control.labelStyle.fontWeight,\n        opacity: labelStyle.opacity || control.labelStyle.opacity,\n        textAlignment: labelStyle.textAlignment || control.labelStyle.textAlignment,\n        textOverflow: labelStyle.textOverflow || control.labelStyle.textOverflow\n      };\n      argsData = {\n        cancel: false,\n        name: 'labelRender',\n        text: label.text,\n        value: label.value,\n        labelStyle: style,\n        region: new Rect(pointX, pointY, label.size.width, label.size.height)\n      };\n      control.trigger('labelRender', argsData);\n\n      if (!argsData.cancel) {\n        control.labels.push(argsData);\n      } else {\n        continue;\n      }\n\n      textElement(this.rangeNavigator.renderer, new TextOption(this.rangeNavigator.element.id + id + i, pointX, pointY, 'middle', argsData.text), argsData.labelStyle, argsData.labelStyle.color || control.themeStyle.labelFontColor, labelElement).setAttribute('style', axis.valueType === 'DateTime' ? 'cursor: pointer' : 'cursor: default');\n      prevX = pointX;\n      prevLabel = label;\n    }\n\n    return border;\n  };\n  /**\n   * To check label is intersected with successive label or not\n   */\n\n\n  RangeNavigatorAxis.prototype.isIntersect = function (axis, currentX, currentWidth, prevX, prevWidth) {\n    return axis.isInversed ? currentX + currentWidth / 2 > prevX - prevWidth / 2 : currentX - currentWidth / 2 < prevX + prevWidth / 2;\n  };\n  /**\n   * To find suitable label format for Quarter and week Interval types\n   * @param axis\n   * @param control\n   */\n\n\n  RangeNavigatorAxis.prototype.findSuitableFormat = function (axis, control) {\n    var labels = axis.visibleLabels;\n    var labelLength = labels.length;\n    var bounds = control.bounds;\n    var prevX;\n    var currentX;\n    var interval = control.valueType === 'DateTime' ? labelLength > 1 ? labels[1].value - labels[0].value : axis.visibleRange.interval : 0;\n\n    for (var i = 0; i < labelLength; i++) {\n      currentX = valueToCoefficient(labels[i].value + interval / 2, axis) * bounds.width + bounds.x;\n      labels[i].size = measureText(labels[i].text, axis.labelStyle); //edgelabelPlacements\n\n      if (i === 0 && currentX < bounds.x) {\n        currentX = bounds.x + labels[i].size.width / 2;\n      }\n\n      if (axis.actualIntervalType === 'Quarter') {\n        if (i !== 0) {\n          if (labels[i].text.indexOf('Quarter') > -1 && this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width)) {\n            labels.every(function (label) {\n              label.text = label.text.toString().replace('Quarter', 'QTR');\n              return true;\n            });\n            axis.visibleLabels = labels;\n            this.findSuitableFormat(axis, control);\n          } else {\n            if (this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width)) {\n              labels.every(function (label) {\n                label.text = label.text.toString().replace('QTR', 'Q');\n                return true;\n              });\n              axis.visibleLabels = labels;\n            }\n          }\n        }\n      } else if (axis.actualIntervalType === 'Weeks') {\n        if (i !== 0 && labels[i].text.indexOf('Week') > -1 && this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width)) {\n          labels.every(function (label) {\n            label.text = label.text.toString().replace('Week', 'W');\n            return true;\n          });\n          axis.visibleLabels = labels;\n        }\n      }\n\n      prevX = currentX;\n    }\n  };\n  /**\n   * Alignment position for secondary level labels in date time axis\n   * @param axis\n   * @param index\n   */\n\n\n  RangeNavigatorAxis.prototype.findAlignment = function (axis, index) {\n    var label = axis.visibleLabels[index];\n    var nextLabel = axis.visibleLabels[index + 1];\n    var bounds = this.rangeNavigator.bounds;\n    return this.rangeNavigator.secondaryLabelAlignment === 'Near' ? valueToCoefficient(label.value, axis) * bounds.width + bounds.x + label.size.width / 2 : valueToCoefficient(nextLabel ? nextLabel.value : axis.visibleRange.max, axis) * bounds.width + bounds.x - label.size.width;\n  };\n\n  return RangeNavigatorAxis;\n}(DateTime);\n\nexport { RangeNavigatorAxis };","map":null,"metadata":{},"sourceType":"module"}