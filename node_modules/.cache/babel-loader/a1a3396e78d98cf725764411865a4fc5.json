{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { ChildProperty, Property, Complex } from '@syncfusion/ej2-base';\nimport { Border, Animation, Font } from '../../common/model/base';\nimport { Rect } from '@syncfusion/ej2-svg-base';\nimport { RangeNavigatorTheme } from '../utils/theme';\n/**\n * Series class for the range navigator\n */\n\nvar RangeNavigatorSeries =\n/** @class */\nfunction (_super) {\n  __extends(RangeNavigatorSeries, _super);\n\n  function RangeNavigatorSeries() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** @private */\n\n\n    _this.clipRect = new Rect(0, 0, 0, 0);\n    return _this;\n  }\n\n  __decorate([Property(null)], RangeNavigatorSeries.prototype, \"dataSource\", void 0);\n\n  __decorate([Property(null)], RangeNavigatorSeries.prototype, \"xName\", void 0);\n\n  __decorate([Property(null)], RangeNavigatorSeries.prototype, \"yName\", void 0);\n\n  __decorate([Property()], RangeNavigatorSeries.prototype, \"query\", void 0);\n\n  __decorate([Property('Line')], RangeNavigatorSeries.prototype, \"type\", void 0);\n\n  __decorate([Complex({\n    enable: false\n  }, Animation)], RangeNavigatorSeries.prototype, \"animation\", void 0);\n\n  __decorate([Complex({\n    color: 'transparent',\n    width: 2\n  }, Border)], RangeNavigatorSeries.prototype, \"border\", void 0);\n\n  __decorate([Property(null)], RangeNavigatorSeries.prototype, \"fill\", void 0);\n\n  __decorate([Property(1)], RangeNavigatorSeries.prototype, \"width\", void 0);\n\n  __decorate([Property(1)], RangeNavigatorSeries.prototype, \"opacity\", void 0);\n\n  __decorate([Property('0')], RangeNavigatorSeries.prototype, \"dashArray\", void 0);\n\n  return RangeNavigatorSeries;\n}(ChildProperty);\n\nexport { RangeNavigatorSeries };\n/**\n * Thumb settings\n */\n\nvar ThumbSettings =\n/** @class */\nfunction (_super) {\n  __extends(ThumbSettings, _super);\n\n  function ThumbSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(null)], ThumbSettings.prototype, \"width\", void 0);\n\n  __decorate([Property(null)], ThumbSettings.prototype, \"height\", void 0);\n\n  __decorate([Complex({\n    width: 1,\n    color: null\n  }, Border)], ThumbSettings.prototype, \"border\", void 0);\n\n  __decorate([Property(null)], ThumbSettings.prototype, \"fill\", void 0);\n\n  __decorate([Property('Circle')], ThumbSettings.prototype, \"type\", void 0);\n\n  return ThumbSettings;\n}(ChildProperty);\n\nexport { ThumbSettings };\n/**\n * Style settings\n */\n\nvar StyleSettings =\n/** @class */\nfunction (_super) {\n  __extends(StyleSettings, _super);\n\n  function StyleSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Complex({}, ThumbSettings)], StyleSettings.prototype, \"thumb\", void 0);\n\n  __decorate([Property(null)], StyleSettings.prototype, \"selectedRegionColor\", void 0);\n\n  __decorate([Property(null)], StyleSettings.prototype, \"unselectedRegionColor\", void 0);\n\n  return StyleSettings;\n}(ChildProperty);\n\nexport { StyleSettings };\n/*\n * Configures the ToolTips in the chart.\n */\n\nvar RangeTooltipSettings =\n/** @class */\nfunction (_super) {\n  __extends(RangeTooltipSettings, _super);\n\n  function RangeTooltipSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(false)], RangeTooltipSettings.prototype, \"enable\", void 0);\n\n  __decorate([Property(0.85)], RangeTooltipSettings.prototype, \"opacity\", void 0);\n\n  __decorate([Property(null)], RangeTooltipSettings.prototype, \"fill\", void 0);\n\n  __decorate([Property(null)], RangeTooltipSettings.prototype, \"format\", void 0);\n\n  __decorate([Complex(RangeNavigatorTheme.tooltipLabelFont, Font)], RangeTooltipSettings.prototype, \"textStyle\", void 0);\n\n  __decorate([Property(null)], RangeTooltipSettings.prototype, \"template\", void 0);\n\n  __decorate([Complex({\n    color: '#cccccc',\n    width: 0.5\n  }, Border)], RangeTooltipSettings.prototype, \"border\", void 0);\n\n  __decorate([Property('OnDemand')], RangeTooltipSettings.prototype, \"displayMode\", void 0);\n\n  return RangeTooltipSettings;\n}(ChildProperty);\n\nexport { RangeTooltipSettings };","map":null,"metadata":{},"sourceType":"module"}