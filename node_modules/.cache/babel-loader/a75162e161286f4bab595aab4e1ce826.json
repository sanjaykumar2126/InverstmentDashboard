{"ast":null,"code":"import PolarPlotAreaBase from './polar-plotarea-base';\nimport CategoricalPlotArea from './categorical-plotarea';\nimport RadarAreaChart from '../radar-area-chart/radar-area-chart';\nimport RadarLineChart from '../radar-line-chart/radar-line-chart';\nimport RadarBarChart from '../radar-bar-chart/radar-bar-chart';\nimport PlotAreaEventsMixin from '../mixins/plotarea-events-mixin';\nimport { RadarCategoryAxis, Point } from '../../core';\nimport { RADAR_AREA, RADAR_LINE, RADAR_COLUMN } from '../constants';\nimport filterSeriesByType from '../utils/filter-series-by-type';\nimport { ARC } from '../../common/constants';\nimport { eventElement, deepExtend, setDefaultOptions } from '../../common';\n\nvar RadarPlotArea = function (PolarPlotAreaBase) {\n  function RadarPlotArea() {\n    PolarPlotAreaBase.apply(this, arguments);\n  }\n\n  if (PolarPlotAreaBase) RadarPlotArea.__proto__ = PolarPlotAreaBase;\n  RadarPlotArea.prototype = Object.create(PolarPlotAreaBase && PolarPlotAreaBase.prototype);\n  RadarPlotArea.prototype.constructor = RadarPlotArea;\n\n  RadarPlotArea.prototype.createPolarAxis = function createPolarAxis() {\n    var categoryAxis = new RadarCategoryAxis(this.options.categoryAxis, this.chartService);\n    this.polarAxis = categoryAxis;\n    this.categoryAxis = categoryAxis;\n    this.appendAxis(categoryAxis);\n    this.aggregateCategories();\n    this.createCategoryAxesLabels();\n  };\n\n  RadarPlotArea.prototype.valueAxisOptions = function valueAxisOptions(defaults) {\n    if (this._hasBarCharts) {\n      deepExtend(defaults, {\n        majorGridLines: {\n          type: ARC\n        },\n        minorGridLines: {\n          type: ARC\n        }\n      });\n    }\n\n    if (this._isStacked100) {\n      deepExtend(defaults, {\n        roundToMajorUnit: false,\n        labels: {\n          format: \"P0\"\n        }\n      });\n    }\n\n    return deepExtend(defaults, this.options.valueAxis);\n  };\n\n  RadarPlotArea.prototype.aggregateCategories = function aggregateCategories() {\n    // No separate panes in radar charts\n    CategoricalPlotArea.prototype.aggregateCategories.call(this, this.panes);\n  };\n\n  RadarPlotArea.prototype.createCategoryAxesLabels = function createCategoryAxesLabels() {\n    CategoricalPlotArea.prototype.createCategoryAxesLabels.call(this, this.panes);\n  };\n\n  RadarPlotArea.prototype.filterSeries = function filterSeries(currentSeries) {\n    // Not supported for radar charts\n    return currentSeries;\n  };\n\n  RadarPlotArea.prototype.createCharts = function createCharts() {\n    var series = this.filterVisibleSeries(this.series);\n    var pane = this.panes[0];\n    this.createAreaChart(filterSeriesByType(series, [RADAR_AREA]), pane);\n    this.createLineChart(filterSeriesByType(series, [RADAR_LINE]), pane);\n    this.createBarChart(filterSeriesByType(series, [RADAR_COLUMN]), pane);\n  };\n\n  RadarPlotArea.prototype.chartOptions = function chartOptions(series) {\n    var options = {\n      series: series\n    };\n    var firstSeries = series[0];\n\n    if (firstSeries) {\n      var filteredSeries = this.filterVisibleSeries(series);\n      var stack = firstSeries.stack;\n      options.isStacked = stack && filteredSeries.length > 1;\n      options.isStacked100 = stack && stack.type === \"100%\" && filteredSeries.length > 1;\n\n      if (options.isStacked100) {\n        this._isStacked100 = true;\n      }\n    }\n\n    return options;\n  };\n\n  RadarPlotArea.prototype.createAreaChart = function createAreaChart(series, pane) {\n    if (series.length === 0) {\n      return;\n    }\n\n    var areaChart = new RadarAreaChart(this, this.chartOptions(series));\n    this.appendChart(areaChart, pane);\n  };\n\n  RadarPlotArea.prototype.createLineChart = function createLineChart(series, pane) {\n    if (series.length === 0) {\n      return;\n    }\n\n    var lineChart = new RadarLineChart(this, this.chartOptions(series));\n    this.appendChart(lineChart, pane);\n  };\n\n  RadarPlotArea.prototype.createBarChart = function createBarChart(series, pane) {\n    if (series.length === 0) {\n      return;\n    }\n\n    var firstSeries = series[0];\n    var options = this.chartOptions(series);\n    options.gap = firstSeries.gap;\n    options.spacing = firstSeries.spacing;\n    var barChart = new RadarBarChart(this, options);\n    this.appendChart(barChart, pane);\n    this._hasBarCharts = true;\n  };\n\n  RadarPlotArea.prototype.seriesCategoryAxis = function seriesCategoryAxis() {\n    return this.categoryAxis;\n  };\n\n  RadarPlotArea.prototype._dispatchEvent = function _dispatchEvent(chart, e, eventType) {\n    var coords = chart._eventCoordinates(e);\n\n    var point = new Point(coords.x, coords.y);\n    var category = this.categoryAxis.getCategory(point);\n    var value = this.valueAxis.getValue(point);\n\n    if (category !== null && value !== null) {\n      chart.trigger(eventType, {\n        element: eventElement(e),\n        category: category,\n        value: value\n      });\n    }\n  };\n\n  RadarPlotArea.prototype.createCrosshairs = function createCrosshairs() {};\n\n  return RadarPlotArea;\n}(PolarPlotAreaBase);\n\ndeepExtend(RadarPlotArea.prototype, PlotAreaEventsMixin, {\n  appendChart: CategoricalPlotArea.prototype.appendChart,\n  aggregateSeries: CategoricalPlotArea.prototype.aggregateSeries,\n  seriesSourcePoints: CategoricalPlotArea.prototype.seriesSourcePoints\n});\nsetDefaultOptions(RadarPlotArea, {\n  categoryAxis: {\n    categories: []\n  },\n  valueAxis: {}\n});\nexport default RadarPlotArea;","map":null,"metadata":{},"sourceType":"module"}