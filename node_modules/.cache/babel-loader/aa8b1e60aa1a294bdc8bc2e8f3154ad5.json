{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Series } from '../series/chart-series';\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `MomentumIndicator` module is used to render Momentum indicator.\n */\n\nvar MomentumIndicator =\n/** @class */\nfunction (_super) {\n  __extends(MomentumIndicator, _super);\n\n  function MomentumIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Defines the collection of series to represent a momentum indicator\n   * @private\n   */\n\n\n  MomentumIndicator.prototype.initSeriesCollection = function (indicator, chart) {\n    _super.prototype.initSeriesCollection.call(this, indicator, chart);\n\n    var upperLine = new Series(indicator, 'targetSeries', {}, true);\n\n    _super.prototype.setSeriesProperties.call(this, upperLine, indicator, 'UpperLine', indicator.upperLine.color, indicator.upperLine.width, chart);\n  };\n  /**\n   * Defines the predictions using momentum approach\n   * @private\n   */\n\n\n  MomentumIndicator.prototype.initDataSource = function (indicator, chart) {\n    var upperCollection = [];\n    var signalCollection = [];\n    var validData = indicator.points;\n\n    if (validData && validData.length) {\n      var upperSeries = indicator.targetSeries[1];\n      var signalSeries = indicator.targetSeries[0];\n      var length_1 = indicator.period;\n\n      if (validData.length >= indicator.period) {\n        for (var i = 0; i < validData.length; i++) {\n          upperCollection.push(this.getDataPoint(validData[i].x, 100, validData[i], upperSeries, upperCollection.length));\n\n          if (!(i < length_1)) {\n            signalCollection.push(this.getDataPoint(validData[i].x, Number(validData[i].close) / Number(validData[i - length_1].close) * 100, validData[i], signalSeries, signalCollection.length));\n          }\n        }\n      }\n\n      this.setSeriesRange(signalCollection, indicator, indicator.targetSeries[0]);\n      this.setSeriesRange(upperCollection, indicator, indicator.targetSeries[1]);\n    }\n  };\n  /**\n   * To destroy the momentum indicator\n   * @return {void}\n   * @private\n   */\n\n\n  MomentumIndicator.prototype.destroy = function (chart) {\n    /**\n     * Destroys the momentum indicator\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  MomentumIndicator.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'MomentumIndicator';\n  };\n\n  return MomentumIndicator;\n}(TechnicalAnalysis);\n\nexport { MomentumIndicator };","map":null,"metadata":{},"sourceType":"module"}