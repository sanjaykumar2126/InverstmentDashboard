{"ast":null,"code":"import NavigatorHint from './navigator-hint';\nimport { Selection, filterSeriesByType } from '../chart';\nimport { DRAG, DRAG_END, EQUALLY_SPACED_SERIES, ZOOM, ZOOM_END } from '../chart/constants';\nimport { DateCategoryAxis } from '../core';\nimport { addDuration, parseDate, toDate, toTime } from '../date-utils';\nimport { Class, deepExtend, defined, getTemplate, InstanceObserver, last, limitValue, valueOrDefault } from '../common';\nimport { NAVIGATOR_AXIS, NAVIGATOR_PANE } from './constants';\nvar ZOOM_ACCELERATION = 3;\n\nvar Navigator = function (Class) {\n  function Navigator(chart) {\n    var obj;\n    Class.call(this);\n    this.chart = chart;\n    var options = this.options = deepExtend({}, this.options, chart.options.navigator);\n    var select = options.select;\n\n    if (select) {\n      select.from = this.parseDate(select.from);\n      select.to = this.parseDate(select.to);\n    }\n\n    if (!defined(options.hint.visible)) {\n      options.hint.visible = options.visible;\n    }\n\n    this.chartObserver = new InstanceObserver(this, (obj = {}, obj[DRAG] = '_drag', obj[DRAG_END] = '_dragEnd', obj[ZOOM] = '_zoom', obj[ZOOM_END] = '_zoomEnd', obj));\n    chart.addObserver(this.chartObserver);\n  }\n\n  if (Class) Navigator.__proto__ = Class;\n  Navigator.prototype = Object.create(Class && Class.prototype);\n  Navigator.prototype.constructor = Navigator;\n\n  Navigator.prototype.parseDate = function parseDate$1(value) {\n    return parseDate(this.chart.chartService.intl, value);\n  };\n\n  Navigator.prototype.clean = function clean() {\n    if (this.selection) {\n      this.selection.destroy();\n      this.selection = null;\n    }\n\n    if (this.hint) {\n      this.hint.destroy();\n      this.hint = null;\n    }\n  };\n\n  Navigator.prototype.destroy = function destroy() {\n    if (this.chart) {\n      this.chart.removeObserver(this.chartObserver);\n      delete this.chart;\n    }\n\n    this.clean();\n  };\n\n  Navigator.prototype.redraw = function redraw() {\n    this._redrawSelf();\n\n    this.initSelection();\n  };\n\n  Navigator.prototype.initSelection = function initSelection() {\n    var ref = this;\n    var chart = ref.chart;\n    var options = ref.options;\n    var axis = this.mainAxis();\n    var ref$1 = axis.roundedRange();\n    var min = ref$1.min;\n    var max = ref$1.max;\n    var ref$2 = options.select;\n    var from = ref$2.from;\n    var to = ref$2.to;\n    var mousewheel = ref$2.mousewheel;\n    var axisClone = clone(axis);\n\n    if (axis.categoriesCount() === 0) {\n      return;\n    }\n\n    this.clean(); // \"Freeze\" the selection axis position until the next redraw\n\n    axisClone.box = axis.box;\n    this.selection = new Selection(chart, axisClone, {\n      min: min,\n      max: max,\n      from: from || min,\n      to: to || max,\n      mousewheel: valueOrDefault(mousewheel, {\n        zoom: \"left\"\n      }),\n      visible: options.visible\n    }, new InstanceObserver(this, {\n      selectStart: '_selectStart',\n      select: '_select',\n      selectEnd: '_selectEnd'\n    }));\n\n    if (options.hint.visible) {\n      this.hint = new NavigatorHint(chart.element, chart.chartService, {\n        min: min,\n        max: max,\n        template: getTemplate(options.hint),\n        format: options.hint.format\n      });\n    }\n  };\n\n  Navigator.prototype.setRange = function setRange() {\n    var plotArea = this.chart._createPlotArea(true);\n\n    var axis = plotArea.namedCategoryAxes[NAVIGATOR_AXIS];\n    var ref = axis.roundedRange();\n    var min = ref.min;\n    var max = ref.max;\n    var select = this.options.select || {};\n    var from = select.from || min;\n\n    if (from < min) {\n      from = min;\n    }\n\n    var to = select.to || max;\n\n    if (to > max) {\n      to = max;\n    }\n\n    this.options.select = deepExtend({}, select, {\n      from: from,\n      to: to\n    });\n    this.filterAxes();\n  };\n\n  Navigator.prototype._redrawSelf = function _redrawSelf(silent) {\n    var plotArea = this.chart._plotArea;\n\n    if (plotArea) {\n      plotArea.redraw(last(plotArea.panes), silent);\n    }\n  };\n\n  Navigator.prototype.redrawSlaves = function redrawSlaves() {\n    var chart = this.chart;\n    var plotArea = chart._plotArea;\n    var slavePanes = plotArea.panes.slice(0, -1); // Update the original series and categoryAxis before partial refresh.\n\n    plotArea.srcSeries = chart.options.series;\n    plotArea.options.categoryAxis = chart.options.categoryAxis;\n    plotArea.clearSeriesPointsCache();\n    plotArea.redraw(slavePanes);\n  };\n\n  Navigator.prototype._drag = function _drag(e) {\n    var ref = this;\n    var chart = ref.chart;\n    var selection = ref.selection;\n\n    var coords = chart._eventCoordinates(e.originalEvent);\n\n    var navigatorAxis = this.mainAxis();\n    var naviRange = navigatorAxis.roundedRange();\n    var inNavigator = navigatorAxis.pane.box.containsPoint(coords);\n    var axis = chart._plotArea.categoryAxis;\n    var range = e.axisRanges[axis.options.name];\n    var select = this.options.select;\n    var duration;\n\n    if (!range || inNavigator || !selection) {\n      return;\n    }\n\n    if (select.from && select.to) {\n      duration = toTime(select.to) - toTime(select.from);\n    } else {\n      duration = toTime(selection.options.to) - toTime(selection.options.from);\n    }\n\n    var from = toDate(limitValue(toTime(range.min), naviRange.min, toTime(naviRange.max) - duration));\n    var to = toDate(limitValue(toTime(from) + duration, toTime(naviRange.min) + duration, naviRange.max));\n    this.options.select = {\n      from: from,\n      to: to\n    };\n\n    if (this.options.liveDrag) {\n      this.filterAxes();\n      this.redrawSlaves();\n    }\n\n    selection.set(from, to);\n    this.showHint(from, to);\n  };\n\n  Navigator.prototype._dragEnd = function _dragEnd() {\n    this.filterAxes();\n    this.filter();\n    this.redrawSlaves();\n\n    if (this.hint) {\n      this.hint.hide();\n    }\n  };\n\n  Navigator.prototype.readSelection = function readSelection() {\n    var ref = this;\n    var ref_selection_options = ref.selection.options;\n    var from = ref_selection_options.from;\n    var to = ref_selection_options.to;\n    var select = ref.options.select;\n    select.from = from;\n    select.to = to;\n  };\n\n  Navigator.prototype.filterAxes = function filterAxes() {\n    var ref = this;\n    var select = ref.options.select;\n    if (select === void 0) select = {};\n    var chart = ref.chart;\n    var allAxes = chart.options.categoryAxis;\n    var from = select.from;\n    var to = select.to;\n\n    for (var idx = 0; idx < allAxes.length; idx++) {\n      var axis = allAxes[idx];\n\n      if (axis.pane !== NAVIGATOR_PANE) {\n        axis.min = from;\n        axis.max = to;\n      }\n    }\n  };\n\n  Navigator.prototype.filter = function filter() {\n    var ref = this;\n    var chart = ref.chart;\n    var select = ref.options.select;\n\n    if (!chart.requiresHandlers([\"navigatorFilter\"])) {\n      return;\n    }\n\n    var mainAxis = this.mainAxis();\n    var args = {\n      from: select.from,\n      to: select.to\n    };\n\n    if (mainAxis.options.type !== 'category') {\n      var axisOptions = new DateCategoryAxis(deepExtend({\n        baseUnit: \"fit\"\n      }, chart.options.categoryAxis[0], {\n        categories: [select.from, select.to]\n      }), chart.chartService).options;\n      args.from = addDuration(axisOptions.min, -axisOptions.baseUnitStep, axisOptions.baseUnit);\n      args.to = addDuration(axisOptions.max, axisOptions.baseUnitStep, axisOptions.baseUnit);\n    }\n\n    this.chart.trigger(\"navigatorFilter\", args);\n  };\n\n  Navigator.prototype._zoom = function _zoom(e) {\n    var ref = this;\n    var axis = ref.chart._plotArea.categoryAxis;\n    var selection = ref.selection;\n    var ref_options = ref.options;\n    var select = ref_options.select;\n    var liveDrag = ref_options.liveDrag;\n    var mainAxis = this.mainAxis();\n    var delta = e.delta;\n\n    if (!selection) {\n      return;\n    }\n\n    var fromIx = mainAxis.categoryIndex(selection.options.from);\n    var toIx = mainAxis.categoryIndex(selection.options.to);\n    e.originalEvent.preventDefault();\n\n    if (Math.abs(delta) > 1) {\n      delta *= ZOOM_ACCELERATION;\n    }\n\n    if (toIx - fromIx > 1) {\n      selection.expand(delta);\n      this.readSelection();\n    } else {\n      axis.options.min = select.from;\n      select.from = axis.scaleRange(-e.delta).min;\n    }\n\n    if (liveDrag) {\n      this.filterAxes();\n      this.redrawSlaves();\n    }\n\n    selection.set(select.from, select.to);\n    this.showHint(this.options.select.from, this.options.select.to);\n  };\n\n  Navigator.prototype._zoomEnd = function _zoomEnd(e) {\n    this._dragEnd(e);\n  };\n\n  Navigator.prototype.showHint = function showHint(from, to) {\n    var plotArea = this.chart._plotArea;\n\n    if (this.hint) {\n      this.hint.show(from, to, plotArea.backgroundBox());\n    }\n  };\n\n  Navigator.prototype._selectStart = function _selectStart(e) {\n    return this.chart._selectStart(e);\n  };\n\n  Navigator.prototype._select = function _select(e) {\n    this.showHint(e.from, e.to);\n    return this.chart._select(e);\n  };\n\n  Navigator.prototype._selectEnd = function _selectEnd(e) {\n    if (this.hint) {\n      this.hint.hide();\n    }\n\n    this.readSelection();\n    this.filterAxes();\n    this.filter();\n    this.redrawSlaves();\n    return this.chart._selectEnd(e);\n  };\n\n  Navigator.prototype.mainAxis = function mainAxis() {\n    var plotArea = this.chart._plotArea;\n\n    if (plotArea) {\n      return plotArea.namedCategoryAxes[NAVIGATOR_AXIS];\n    }\n  };\n\n  Navigator.prototype.select = function select(from, to) {\n    var select = this.options.select;\n\n    if (from && to) {\n      select.from = this.parseDate(from);\n      select.to = this.parseDate(to);\n      this.filterAxes();\n      this.filter();\n      this.redrawSlaves();\n      this.selection.set(from, to);\n    }\n\n    return {\n      from: select.from,\n      to: select.to\n    };\n  };\n\n  Navigator.setup = function setup(options, themeOptions) {\n    if (options === void 0) options = {};\n    if (themeOptions === void 0) themeOptions = {};\n\n    if (options.__navi) {\n      return;\n    }\n\n    options.__navi = true;\n    var naviOptions = deepExtend({}, themeOptions.navigator, options.navigator);\n    var panes = options.panes = [].concat(options.panes);\n    var paneOptions = deepExtend({}, naviOptions.pane, {\n      name: NAVIGATOR_PANE\n    });\n\n    if (!naviOptions.visible) {\n      paneOptions.visible = false;\n      paneOptions.height = 0.1;\n    }\n\n    panes.push(paneOptions);\n    Navigator.attachAxes(options, naviOptions);\n    Navigator.attachSeries(options, naviOptions, themeOptions);\n  };\n\n  Navigator.attachAxes = function attachAxes(options, naviOptions) {\n    var series = naviOptions.series || [];\n    var categoryAxes = options.categoryAxis = [].concat(options.categoryAxis);\n    var valueAxes = options.valueAxis = [].concat(options.valueAxis);\n    var equallySpacedSeries = filterSeriesByType(series, EQUALLY_SPACED_SERIES);\n    var justifyAxis = equallySpacedSeries.length === 0;\n    var base = deepExtend({\n      type: \"date\",\n      pane: NAVIGATOR_PANE,\n      roundToBaseUnit: !justifyAxis,\n      justified: justifyAxis,\n      _collapse: false,\n      majorTicks: {\n        visible: true\n      },\n      tooltip: {\n        visible: false\n      },\n      labels: {\n        step: 1\n      },\n      autoBind: naviOptions.autoBindElements,\n      autoBaseUnitSteps: {\n        minutes: [1],\n        hours: [1, 2],\n        days: [1, 2],\n        weeks: [],\n        months: [1],\n        years: [1]\n      }\n    });\n    var user = naviOptions.categoryAxis;\n    categoryAxes.push(deepExtend({}, base, {\n      maxDateGroups: 200\n    }, user, {\n      name: NAVIGATOR_AXIS,\n      title: null,\n      baseUnit: \"fit\",\n      baseUnitStep: \"auto\",\n      labels: {\n        visible: false\n      },\n      majorTicks: {\n        visible: false\n      }\n    }), deepExtend({}, base, user, {\n      name: NAVIGATOR_AXIS + \"_labels\",\n      maxDateGroups: 20,\n      baseUnitStep: \"auto\",\n      labels: {\n        position: \"\"\n      },\n      plotBands: [],\n      autoBaseUnitSteps: {\n        minutes: []\n      },\n      _overlap: true\n    }), deepExtend({}, base, user, {\n      name: NAVIGATOR_AXIS + \"_ticks\",\n      maxDateGroups: 200,\n      majorTicks: {\n        width: 0.5\n      },\n      plotBands: [],\n      title: null,\n      labels: {\n        visible: false,\n        mirror: true\n      },\n      _overlap: true\n    }));\n    valueAxes.push(deepExtend({\n      name: NAVIGATOR_AXIS,\n      pane: NAVIGATOR_PANE,\n      majorGridLines: {\n        visible: false\n      },\n      visible: false\n    }, naviOptions.valueAxis));\n  };\n\n  Navigator.attachSeries = function attachSeries(options, naviOptions, themeOptions) {\n    var series = options.series = options.series || [];\n    var navigatorSeries = [].concat(naviOptions.series || []);\n    var seriesColors = themeOptions.seriesColors;\n    var defaults = naviOptions.seriesDefaults;\n\n    for (var idx = 0; idx < navigatorSeries.length; idx++) {\n      series.push(deepExtend({\n        color: seriesColors[idx % seriesColors.length],\n        categoryField: naviOptions.dateField,\n        visibleInLegend: false,\n        tooltip: {\n          visible: false\n        }\n      }, defaults, navigatorSeries[idx], {\n        axis: NAVIGATOR_AXIS,\n        categoryAxis: NAVIGATOR_AXIS,\n        autoBind: naviOptions.autoBindElements\n      }));\n    }\n  };\n\n  return Navigator;\n}(Class);\n\nfunction ClonedObject() {}\n\nfunction clone(obj) {\n  ClonedObject.prototype = obj;\n  return new ClonedObject();\n}\n\nexport default Navigator;","map":null,"metadata":{},"sourceType":"module"}