{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { withInRange, pathAnimation, getElement } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { ColumnBase } from './column-base';\n/**\n * `HiloOpenCloseSeries` module is used to render the hiloOpenClose series.\n */\n\nvar HiloOpenCloseSeries =\n/** @class */\nfunction (_super) {\n  __extends(HiloOpenCloseSeries, _super);\n\n  function HiloOpenCloseSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render HiloOpenCloseSeries series.\n   * @return {void}\n   * @private\n   */\n\n\n  HiloOpenCloseSeries.prototype.render = function (series) {\n    var highLowRect;\n    var open;\n    var close;\n    var sideBySideInfo = this.getSideBySideInfo(series);\n    var argsData;\n    var borderWidth = Math.max(series.border.width, 2);\n\n    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n      var point = _a[_i];\n      point.symbolLocations = [];\n      point.regions = [];\n\n      if (point.visible && withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {\n        //highlow\n        highLowRect = this.getRectangle(point.xValue + sideBySideInfo.start, Math.max(point.high, point.low), point.xValue + sideBySideInfo.end, Math.min(point.high, point.low), series);\n        point.regions.push(this.getRectangle(point.xValue + sideBySideInfo.median, Math.max(point.high, point.low), point.xValue + sideBySideInfo.median, Math.min(point.high, point.low), series));\n        this.updateTickRegion(!series.chart.requireInvertedAxis, point.regions[0], borderWidth); //open\n\n        point.regions.push(this.getRectangle(point.xValue + sideBySideInfo.start, Math.max(point.open, point.close), point.xValue + sideBySideInfo.median, Math.max(point.open, point.close), series)); //close\n\n        point.regions.push(this.getRectangle(point.xValue + sideBySideInfo.median, Math.min(point.open, point.close), point.xValue + sideBySideInfo.end, Math.min(point.open, point.close), series));\n        argsData = this.triggerPointRenderEvent(series, point);\n\n        if (!argsData.cancel) {\n          this.updateSymbolLocation(point, point.regions[0], series);\n          var open_1 = {\n            x: point.regions[1].x,\n            y: point.regions[1].y\n          };\n          var close_1 = {\n            x: point.regions[2].x,\n            y: point.regions[2].y\n          };\n          this.drawHiloOpenClosePath(series, point, open_1, close_1, highLowRect, argsData);\n        }\n\n        this.updateTickRegion(series.chart.requireInvertedAxis, point.regions[1], borderWidth);\n        this.updateTickRegion(series.chart.requireInvertedAxis, point.regions[2], borderWidth);\n      }\n    }\n  };\n  /**\n   * Updates the tick region\n   */\n\n\n  HiloOpenCloseSeries.prototype.updateTickRegion = function (horizontal, region, borderWidth) {\n    if (horizontal) {\n      region.x -= borderWidth / 2;\n      region.width = borderWidth;\n    } else {\n      region.y -= borderWidth / 2;\n      region.height = borderWidth;\n    }\n  };\n  /**\n   * Trigger point rendering event\n   */\n\n\n  HiloOpenCloseSeries.prototype.triggerPointRenderEvent = function (series, point) {\n    var fill = point.open <= point.close ? series.bearFillColor : series.bullFillColor;\n    var border = {\n      color: series.border.color,\n      width: Math.max(series.border.width, 1)\n    };\n    return this.triggerEvent(series, point, fill, border);\n  };\n  /**\n   * To draw the rectangle for points.\n   * @return {void}\n   * @private\n   */\n\n\n  HiloOpenCloseSeries.prototype.drawHiloOpenClosePath = function (series, point, open, close, rect, argsData) {\n    // region highlow\n    var direction;\n    var options;\n\n    if (series.chart.requireInvertedAxis) {\n      direction = 'M' + ' ' + rect.x + ' ' + (rect.y + rect.height / 2) + ' ' + 'L' + ' ' + (rect.x + rect.width) + ' ' + (rect.y + rect.height / 2) + ' ';\n      direction += 'M' + ' ' + open.x + ' ' + (rect.y + rect.height / 2) + ' ' + 'L' + ' ' + open.x + ' ' + (rect.y + rect.height) + ' ';\n      direction += 'M' + ' ' + close.x + ' ' + (rect.y + rect.height / 2) + ' ' + 'L' + ' ' + close.x + ' ' + rect.y + ' ';\n    } else {\n      direction = 'M' + ' ' + (rect.x + rect.width / 2) + ' ' + (rect.y + rect.height) + ' ' + 'L' + ' ' + (rect.x + rect.width / 2) + ' ' + rect.y + ' '; //region opentick\n\n      direction += 'M' + ' ' + rect.x + ' ' + open.y + ' ' + 'L' + ' ' + (rect.x + rect.width / 2) + ' ' + open.y + ' '; //region closetick\n\n      direction += 'M' + ' ' + (rect.x + rect.width / 2) + ' ' + close.y + ' ' + 'L' + ' ' + (rect.x + rect.width) + ' ' + close.y + ' ';\n    }\n\n    options = new PathOption(series.chart.element.id + '_Series_' + series.index + '_Point_' + point.index, argsData.fill, argsData.border.width, argsData.fill, series.opacity, series.dashArray, direction);\n    pathAnimation(getElement(options.id), direction, series.chart.redraw);\n    var element = series.chart.renderer.drawPath(options, new Int32Array([series.clipRect.x, series.clipRect.y]));\n    element.setAttribute('aria-label', point.x.toString() + ':' + point.high.toString() + ':' + point.low.toString() + ':' + point.close.toString() + ':' + point.open.toString());\n\n    if (!series.chart.enableCanvas) {\n      series.seriesElement.appendChild(element);\n    }\n  };\n  /**\n   * Get module name.\n   */\n\n\n  HiloOpenCloseSeries.prototype.getModuleName = function () {\n    return 'HiloOpenCloseSeries';\n    /**\n     * return the module name\n     */\n  };\n  /**\n   * Animates the series.\n   * @param  {Series} series - Defines the series to animate.\n   * @return {void}\n   */\n\n\n  HiloOpenCloseSeries.prototype.doAnimation = function (series) {\n    this.animate(series);\n  };\n  /**\n   * To destroy the column series.\n   * @return {void}\n   * @private\n   */\n\n\n  HiloOpenCloseSeries.prototype.destroy = function (chart) {\n    /**\n     * Destroy method performed here\n     */\n  };\n\n  return HiloOpenCloseSeries;\n}(ColumnBase);\n\nexport { HiloOpenCloseSeries };","map":null,"metadata":{},"sourceType":"module"}