{"ast":null,"code":"var getTouch = function (domEvent) {\n  return {\n    x: {\n      location: domEvent.pageX\n    },\n    y: {\n      location: domEvent.pageY\n    }\n  };\n};\n\nvar eventArgs = function (e, previousArgs) {\n  var pointers = e.pointers;\n  var pointer = pointers[0];\n  var xLocation = pointer.pageX;\n  var yLocation = pointer.pageY;\n  var distance = 0;\n\n  if (pointers.length > 1) {\n    var pointer1 = pointers[0];\n    var pointer2 = pointers[1];\n    distance = Math.sqrt(Math.pow(pointer1.pageX - pointer2.pageX, 2) + Math.pow(pointer1.pageY - pointer2.pageY, 2));\n  }\n\n  return {\n    distance: distance,\n    event: e.srcEvent,\n    preventDefault: function () {\n      e.preventDefault();\n    },\n    target: e.target,\n    touches: pointers.map(getTouch),\n    type: e.type,\n    x: {\n      delta: previousArgs ? xLocation - previousArgs.x.location : 0,\n      initialDelta: e.deltaX,\n      location: xLocation,\n      startLocation: xLocation - e.deltaX\n    },\n    y: {\n      delta: previousArgs ? yLocation - previousArgs.y.location : 0,\n      initialDelta: e.deltaY,\n      location: yLocation,\n      startLocation: yLocation - e.deltaY\n    }\n  };\n};\n\nfunction shouldBindGroup(groupNames, events) {\n  for (var idx = 0; idx < groupNames.length; idx++) {\n    if (events[groupNames[idx]]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar eventGroups = [{\n  end: 'panend',\n  move: 'panmove',\n  start: 'panstart'\n}, {\n  gesturechange: 'pinchmove',\n  gestureend: 'pinchend',\n  gesturestart: 'pinchstart'\n}, {\n  press: 'press'\n}, {\n  tap: 'tap'\n}];\n/**\n * @hidden\n */\n\nvar DomEvents =\n/** @class */\nfunction () {\n  function DomEvents(hammerInstance, events) {\n    this.hammerInstance = hammerInstance;\n    this.eventHandlers = {};\n    this.tap = this.tap.bind(this);\n    this.press = this.press.bind(this);\n    this.panstart = this.panstart.bind(this);\n    this.panmove = this.panmove.bind(this);\n    this.panend = this.panend.bind(this);\n    this.pinchstart = this.pinchstart.bind(this);\n    this.pinchmove = this.pinchmove.bind(this);\n    this.pinchend = this.pinchend.bind(this);\n\n    if (events) {\n      this.bind(events);\n    }\n  }\n\n  DomEvents.prototype.tap = function (e) {\n    this.trigger('tap', e);\n  };\n\n  DomEvents.prototype.press = function (e) {\n    this.trigger('press', e);\n  };\n\n  DomEvents.prototype.panstart = function (e) {\n    delete this.previous;\n    this.previous = this.trigger('start', e);\n  };\n\n  DomEvents.prototype.panmove = function (e) {\n    this.previous = this.trigger('move', e);\n  };\n\n  DomEvents.prototype.panend = function (e) {\n    this.trigger('end', e);\n    delete this.previous;\n  };\n\n  DomEvents.prototype.pinchstart = function (e) {\n    this.trigger('gesturestart', e);\n  };\n\n  DomEvents.prototype.pinchmove = function (e) {\n    this.trigger('gesturechange', e);\n  };\n\n  DomEvents.prototype.pinchend = function (e) {\n    this.trigger('gestureend', e);\n  };\n\n  DomEvents.prototype.trigger = function (name, e) {\n    var args = eventArgs(e, this.previous);\n\n    if (this.eventHandlers[name]) {\n      this.eventHandlers[name](args);\n    }\n\n    return args;\n  };\n\n  DomEvents.prototype.bind = function (events) {\n    if (events === void 0) {\n      events = {};\n    }\n\n    this.unbind();\n    this.eventHandlers = events;\n\n    for (var idx = 0; idx < eventGroups.length; idx++) {\n      var eventGroup = eventGroups[idx];\n      var groupNames = Object.keys(eventGroup);\n\n      if (shouldBindGroup(groupNames, events)) {\n        for (var nameIdx = 0; nameIdx < groupNames.length; nameIdx++) {\n          var name_1 = eventGroup[groupNames[nameIdx]];\n          this.hammerInstance.on(name_1, this[name_1]);\n        }\n      }\n    }\n  };\n\n  DomEvents.prototype.unbind = function () {\n    if (this.hammerInstance) {\n      this.hammerInstance.off();\n    }\n\n    this.eventHandlers = {};\n  };\n\n  DomEvents.prototype.destroy = function () {\n    if (this.hammerInstance) {\n      this.hammerInstance.destroy();\n      delete this.hammerInstance;\n    }\n\n    delete this.eventHandlers;\n  };\n\n  DomEvents.prototype.toggleDrag = function (enable) {\n    this.toggle('pan', enable);\n  };\n\n  DomEvents.prototype.toggleZoom = function (enable) {\n    this.toggle('pinch', enable);\n  };\n\n  DomEvents.prototype.toggle = function (recognizer, enable) {\n    if (this.hammerInstance) {\n      var instanceRecognizer = this.hammerInstance.get(recognizer);\n      instanceRecognizer.set({\n        enable: enable\n      });\n    }\n  };\n\n  return DomEvents;\n}();\n\nexport { DomEvents };","map":null,"metadata":{},"sourceType":"module"}