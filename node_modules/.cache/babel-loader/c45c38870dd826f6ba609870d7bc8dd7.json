{"ast":null,"code":"import BaseTooltip from './base-tooltip';\nimport { Point } from '../../core';\nimport { grep, setDefaultOptions } from '../../common';\n\nvar SharedTooltip = function (BaseTooltip) {\n  function SharedTooltip(plotArea, options) {\n    BaseTooltip.call(this, plotArea.chartService, options);\n    this.plotArea = plotArea;\n    this.formatService = plotArea.chartService.format;\n  }\n\n  if (BaseTooltip) SharedTooltip.__proto__ = BaseTooltip;\n  SharedTooltip.prototype = Object.create(BaseTooltip && BaseTooltip.prototype);\n  SharedTooltip.prototype.constructor = SharedTooltip;\n\n  SharedTooltip.prototype.showAt = function showAt(points, coords) {\n    var tooltipPoints = grep(points, function (point) {\n      var tooltip = point.series.tooltip;\n      var excluded = tooltip && tooltip.visible === false;\n      return !excluded;\n    });\n\n    if (tooltipPoints.length > 0) {\n      var point = tooltipPoints[0];\n      var slot = this.plotArea.categoryAxis.getSlot(point.categoryIx);\n      var anchor = coords ? this._slotAnchor(coords, slot) : this._defaultAnchor(point, slot);\n      this.show({\n        anchor: anchor,\n        shared: true,\n        points: points,\n        category: point.category,\n        categoryText: this.formatService.auto(this.options.categoryFormat, point.category),\n        series: this.plotArea.series\n      }, this.options);\n    }\n  };\n\n  SharedTooltip.prototype._slotAnchor = function _slotAnchor(point, slot) {\n    var axis = this.plotArea.categoryAxis;\n    var align = {\n      horizontal: \"left\",\n      vertical: \"center\"\n    };\n\n    if (!axis.options.vertical) {\n      point.x = slot.center().x;\n    }\n\n    return {\n      point: point,\n      align: align\n    };\n  };\n\n  SharedTooltip.prototype._defaultAnchor = function _defaultAnchor(point, slot) {\n    var box = point.owner.pane.chartsBox();\n    var vertical = this.plotArea.categoryAxis.options.vertical;\n    var center = box.center();\n    var slotCenter = slot.center();\n    var align = {\n      horizontal: \"center\",\n      vertical: \"center\"\n    };\n    var centerPoint;\n\n    if (vertical) {\n      centerPoint = new Point(center.x, slotCenter.y);\n    } else {\n      centerPoint = new Point(slotCenter.x, center.y);\n    }\n\n    return {\n      point: centerPoint,\n      align: align\n    };\n  };\n\n  return SharedTooltip;\n}(BaseTooltip);\n\nsetDefaultOptions(SharedTooltip, {\n  categoryFormat: '{0:d}'\n});\nexport default SharedTooltip;","map":null,"metadata":{},"sourceType":"module"}