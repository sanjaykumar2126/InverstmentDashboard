{"ast":null,"code":"import { PathOption, drawPath, getIdElement, Rect, withInBounds } from '../utils/helper';\nimport { Browser, extend, isNullOrUndefined, remove, createElement, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { Tooltip } from '@syncfusion/ej2-svg-base';\n/**\n * Sparkline Tooltip Module\n */\n\nvar SparklineTooltip =\n/** @class */\nfunction () {\n  function SparklineTooltip(sparkline) {\n    this.sparkline = sparkline;\n    this.addEventListener();\n  }\n  /**\n   * @hidden\n   */\n\n\n  SparklineTooltip.prototype.addEventListener = function () {\n    if (this.sparkline.isDestroyed) {\n      return;\n    } // this.sparkline.on('mouseleave', this.mouseLeaveHandler, this);\n\n\n    this.sparkline.on(Browser.isPointer ? 'pointerleave' : 'mouseleave', this.mouseLeaveHandler, this);\n    this.sparkline.on(Browser.touchMoveEvent, this.mouseMoveHandler, this);\n    this.sparkline.on(Browser.touchEndEvent, this.mouseUpHandler, this);\n  };\n\n  SparklineTooltip.prototype.mouseLeaveHandler = function (e) {\n    this.removeTooltipElements();\n  };\n\n  SparklineTooltip.prototype.mouseUpHandler = function (e) {\n    if (!this.sparkline.isTouch) {\n      return;\n    }\n\n    this.processTooltip(e);\n    this.fadeOut();\n  };\n\n  SparklineTooltip.prototype.fadeOut = function () {\n    clearTimeout(this.clearTooltip);\n    this.clearTooltip = setTimeout(this.removeTooltipElements.bind(this), 5000);\n  };\n  /**\n   * To remove tooltip and tracker elements.\n   * @private\n   */\n\n\n  SparklineTooltip.prototype.removeTooltipElements = function () {\n    this.removeTooltip();\n    this.removeTracker();\n  };\n\n  SparklineTooltip.prototype.mouseMoveHandler = function (e) {\n    this.processTooltip(e);\n  };\n\n  SparklineTooltip.prototype.processTooltip = function (e) {\n    var pointIndex;\n    var spark = this.sparkline;\n    var visiblePoints = spark.sparklineRenderer.visiblePoints;\n    var mouseX = spark.mouseX;\n    var mouseY = spark.mouseY;\n\n    if (spark.type !== 'Pie') {\n      var locations = extend([], [], visiblePoints);\n      var trackerPositions = locations.map(function (point) {\n        return point.location.x;\n      });\n      var temp = Infinity;\n      var mousePosition = void 0;\n\n      for (var i = 0, diff = void 0, len = trackerPositions.length; i < len; i++) {\n        diff = Math.abs(mouseX - trackerPositions[i]);\n\n        if (temp > diff) {\n          temp = diff;\n          mousePosition = trackerPositions[i];\n          pointIndex = i;\n        }\n      }\n    } else {\n      var target = e.target.id;\n      pointIndex = parseInt(target.split('_pie_')[1], 10);\n    }\n\n    if (isNaN(pointIndex) || !withInBounds(mouseX, mouseY, new Rect(0, 0, spark.availableSize.width, spark.availableSize.height))) {\n      this.removeTracker();\n      this.removeTooltip();\n      return;\n    }\n\n    if (this.pointIndex === pointIndex) {\n      return;\n    }\n\n    this.pointIndex = pointIndex;\n    this.renderTrackerLine(visiblePoints[pointIndex]);\n    this.renderTooltip(visiblePoints[pointIndex]);\n  };\n  /**\n   * To render tracker line\n   */\n\n\n  SparklineTooltip.prototype.renderTrackerLine = function (points) {\n    var spark = this.sparkline;\n    var theme = spark.theme.toLowerCase();\n    var tracker = spark.tooltipSettings.trackLineSettings;\n    var color = spark.sparkTheme.trackerLineColor ? spark.sparkTheme.trackerLineColor : tracker.color;\n\n    if (!tracker.visible || spark.type === 'Pie') {\n      return;\n    }\n\n    var group = getIdElement(spark.element.id + '_sparkline_tracker_g');\n\n    if (isNullOrUndefined(group)) {\n      group = spark.renderer.createGroup({\n        id: spark.element.id + '_sparkline_tracker_g'\n      });\n      spark.svgObject.appendChild(group);\n    }\n\n    var pathEle = getIdElement(spark.element.id + '_sparkline_tracker');\n    var d = 'M ' + points.location.x + ' ' + spark.padding.top + ' L ' + points.location.x + ' ' + (spark.availableSize.height - spark.padding.bottom);\n\n    if (isNullOrUndefined(pathEle)) {\n      var pathOption = new PathOption(spark.element.id + '_sparkline_tracker', 'transparent', tracker.width, color, 1);\n      pathOption.d = d;\n      drawPath(spark, pathOption, group);\n    } else {\n      pathEle.setAttribute('d', d);\n      pathEle.setAttribute('stroke-width', tracker.width.toString());\n      pathEle.setAttribute('stroke', color);\n    }\n  };\n  /**\n   * To render line series\n   */\n\n\n  SparklineTooltip.prototype.renderTooltip = function (points) {\n    var spark = this.sparkline;\n    var tooltip = spark.tooltipSettings;\n\n    if (!tooltip.visible) {\n      return;\n    }\n\n    var div = getIdElement(spark.element.id + '_sparkline_tooltip_div');\n\n    if (isNullOrUndefined(div)) {\n      div = createElement('div', {\n        id: spark.element.id + '_sparkline_tooltip_div',\n        styles: 'pointer-events: none; position: absolute;z-index:1;'\n      });\n      getIdElement(spark.element.id + '_Secondary_Element').appendChild(div);\n    }\n\n    var size = spark.markerSettings.visible.length ? spark.markerSettings.size : 0;\n    var x = points.xVal.toString();\n\n    if (spark.valueType === 'Category') {\n      x = spark.dataSource[points.xVal][spark.xName];\n    } else if (spark.valueType === 'DateTime') {\n      x = new Date(points.xVal).toDateString();\n    }\n\n    var y = points.yVal.toString();\n    var text = this.getFormat(spark.tooltipSettings.format, spark, x, this.formatValue(points.yVal, spark).toString());\n    var location = {\n      x: points.location.x,\n      y: points.location.y\n    };\n    location = spark.type === 'Pie' ? {\n      x: points.location.x,\n      y: points.location.y\n    } : location;\n    var textColor = tooltip.textStyle.color || spark.sparkTheme.tooltipFontColor;\n    var backgroundColor = tooltip.fill === '' ? spark.sparkTheme.tooltipFill : tooltip.fill;\n    var tooltipEvent = {\n      name: 'tooltipInitialize',\n      cancel: false,\n      text: text,\n      textStyle: {\n        size: tooltip.textStyle.size,\n        opacity: spark.sparkTheme.tooltipTextOpacity || tooltip.textStyle.opacity,\n        fontWeight: tooltip.textStyle.fontWeight,\n        fontStyle: tooltip.textStyle.fontStyle,\n        fontFamily: spark.sparkTheme.fontFamily || tooltip.textStyle.fontFamily,\n        color: textColor\n      }\n    };\n    spark.trigger(tooltipEvent.name, tooltipEvent);\n\n    if (tooltipEvent.cancel) {\n      return;\n    }\n\n    var element = new Tooltip({\n      content: tooltipEvent.text,\n      border: tooltip.border,\n      template: tooltip.template,\n      data: spark.dataSource[this.pointIndex],\n      fill: backgroundColor,\n      textStyle: tooltipEvent.textStyle,\n      enableAnimation: false,\n      location: {\n        x: location.x,\n        y: location.y\n      },\n      shared: false,\n      availableSize: this.sparkline.availableSize,\n      areaBounds: new Rect(0, 0, spark.availableSize.width, spark.availableSize.height),\n      theme: spark.theme\n    });\n    element.opacity = spark.sparkTheme.tooltipFillOpacity || element.opacity;\n    element.appendTo(div);\n    updateBlazorTemplate(div.id + 'Template', 'Template');\n  };\n  /**\n   * To get tooltip format.\n   */\n\n\n  SparklineTooltip.prototype.getFormat = function (format, spark, x, y) {\n    if (isNullOrUndefined(format) || format === '') {\n      return [y];\n    }\n\n    var text = format;\n    text = text.split('${' + spark.xName + '}').join(x).split('${' + spark.yName + '}').join(y);\n    return [text];\n  };\n\n  SparklineTooltip.prototype.formatValue = function (value, sparkline) {\n    var formatValue;\n    var formatFunction;\n\n    if (sparkline.format && !isNaN(Number(value))) {\n      formatFunction = sparkline.intl.getNumberFormat({\n        format: sparkline.format,\n        useGrouping: sparkline.useGroupingSeparator\n      });\n      formatValue = formatFunction(value);\n    } else {\n      formatValue = value;\n    }\n\n    return formatValue;\n  };\n  /**\n   * To remove tracker line.\n   */\n\n\n  SparklineTooltip.prototype.removeTracker = function () {\n    var tracker = this.sparkline.element.querySelector('#' + this.sparkline.element.id + '_sparkline_tracker_g');\n    return tracker ? remove(tracker) : null;\n  };\n  /**\n   * To remove tooltip element.\n   */\n\n\n  SparklineTooltip.prototype.removeTooltip = function () {\n    this.pointIndex = null;\n    var tooltip = this.sparkline.element.querySelector('#' + this.sparkline.element.id + '_sparkline_tooltip_div');\n    return tooltip ? remove(tooltip) : null;\n  };\n  /**\n   * Get module name.\n   */\n\n\n  SparklineTooltip.prototype.getModuleName = function () {\n    return 'SparklineTooltip';\n  };\n  /**\n   * To destroy the tooltip.\n   */\n\n\n  SparklineTooltip.prototype.destroy = function (sparkline) {// To remove tooltip module\n  };\n\n  return SparklineTooltip;\n}();\n\nexport { SparklineTooltip };","map":null,"metadata":{},"sourceType":"module"}