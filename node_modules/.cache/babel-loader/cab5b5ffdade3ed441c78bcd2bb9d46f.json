{"ast":null,"code":"import { geometry as geom } from '@progress/kendo-drawing';\nimport TextBox from './text-box';\nimport Box from './box';\nimport rectToBox from './utils/rect-to-box';\nimport { AXIS_LABEL_CLICK, CENTER, TOP, BOTTOM, LEFT, DEFAULT_PRECISION, X, Y } from '../common/constants';\nimport { eventElement, round, setDefaultOptions } from '../common';\n\nvar AxisLabel = function (TextBox) {\n  function AxisLabel(value, text, index, dataItem, options) {\n    TextBox.call(this, text, options);\n    this.text = text;\n    this.value = value;\n    this.index = index;\n    this.dataItem = dataItem;\n    this.reflow(new Box());\n  }\n\n  if (TextBox) AxisLabel.__proto__ = TextBox;\n  AxisLabel.prototype = Object.create(TextBox && TextBox.prototype);\n  AxisLabel.prototype.constructor = AxisLabel;\n\n  AxisLabel.prototype.visualContext = function visualContext(targetBox) {\n    var context = TextBox.prototype.visualContext.call(this, targetBox);\n    context.value = this.value;\n    context.dataItem = this.dataItem;\n    context.format = this.options.format;\n    context.culture = this.options.culture;\n    return context;\n  };\n\n  AxisLabel.prototype.click = function click(widget, e) {\n    widget.trigger(AXIS_LABEL_CLICK, {\n      element: eventElement(e),\n      value: this.value,\n      text: this.text,\n      index: this.index,\n      dataItem: this.dataItem,\n      axis: this.parent.options\n    });\n  };\n\n  AxisLabel.prototype.rotate = function rotate() {\n    if (this.options.alignRotation !== CENTER) {\n      var box = this.normalBox.toRect();\n      var transform = this.rotationTransform();\n      this.box = rectToBox(box.bbox(transform.matrix()));\n    } else {\n      TextBox.prototype.rotate.call(this);\n    }\n\n    return this.box;\n  };\n\n  AxisLabel.prototype.rotationTransform = function rotationTransform() {\n    var options = this.options;\n    var rotation = options.rotation;\n\n    if (!rotation) {\n      return null;\n    }\n\n    if (options.alignRotation === CENTER) {\n      return TextBox.prototype.rotationTransform.call(this);\n    }\n\n    var rotationMatrix = geom.transform().rotate(rotation).matrix();\n    var box = this.normalBox.toRect();\n    var rect = this.targetBox.toRect();\n    var rotationOrigin = options.rotationOrigin || TOP;\n    var alignAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? X : Y;\n    var distanceAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? Y : X;\n    var axisAnchor = rotationOrigin === TOP || rotationOrigin === LEFT ? rect.origin : rect.bottomRight();\n    var topLeft = box.topLeft().transformCopy(rotationMatrix);\n    var topRight = box.topRight().transformCopy(rotationMatrix);\n    var bottomRight = box.bottomRight().transformCopy(rotationMatrix);\n    var bottomLeft = box.bottomLeft().transformCopy(rotationMatrix);\n    var rotatedBox = geom.Rect.fromPoints(topLeft, topRight, bottomRight, bottomLeft);\n    var translate = {};\n    translate[distanceAxis] = rect.origin[distanceAxis] - rotatedBox.origin[distanceAxis];\n    var distanceLeft = Math.abs(topLeft[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);\n    var distanceRight = Math.abs(topRight[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);\n    var alignStart, alignEnd;\n\n    if (round(distanceLeft, DEFAULT_PRECISION) === round(distanceRight, DEFAULT_PRECISION)) {\n      alignStart = topLeft;\n      alignEnd = topRight;\n    } else if (distanceRight < distanceLeft) {\n      alignStart = topRight;\n      alignEnd = bottomRight;\n    } else {\n      alignStart = topLeft;\n      alignEnd = bottomLeft;\n    }\n\n    var alignCenter = alignStart[alignAxis] + (alignEnd[alignAxis] - alignStart[alignAxis]) / 2;\n    translate[alignAxis] = rect.center()[alignAxis] - alignCenter;\n    return geom.transform().translate(translate.x, translate.y).rotate(rotation);\n  };\n\n  return AxisLabel;\n}(TextBox);\n\nsetDefaultOptions(AxisLabel, {\n  _autoReflow: false\n});\nexport default AxisLabel;","map":null,"metadata":{},"sourceType":"module"}