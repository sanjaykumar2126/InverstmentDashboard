{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { getPoint, withInRange, TransformToVisible } from '../../common/utils/helper';\nimport { PathOption, Rect } from '@syncfusion/ej2-svg-base';\nimport { LineBase } from './line-base';\n/**\n * `StackingLineSeries` module used to render the Stacking Line series.\n */\n\nvar StackingLineSeries =\n/** @class */\nfunction (_super) {\n  __extends(StackingLineSeries, _super);\n\n  function StackingLineSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render the Stacking line series.\n   * @return {void}\n   * @private\n   */\n\n\n  StackingLineSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n    var polarType = series.chart.chartAreaType === 'PolarRadar';\n    var getCoordinate = polarType ? TransformToVisible : getPoint;\n    var direction = '';\n    var visiblePts = series.points;\n    var pointsLength = visiblePts.length;\n    var stackedvalue = series.stackedValues;\n    var startPoint = 0;\n    var origin = polarType ? Math.max(series.yAxis.visibleRange.min, stackedvalue.endValues[0]) : Math.max(series.yAxis.visibleRange.min, stackedvalue.startValues[0]);\n    var options;\n    var point1;\n    var point2;\n\n    for (var i = 0; i < pointsLength; i++) {\n      visiblePts[i].regions = [];\n      visiblePts[i].symbolLocations = [];\n\n      if (visiblePts[i].visible && withInRange(visiblePts[i - 1], visiblePts[i], visiblePts[i + 1], series)) {\n        point1 = getCoordinate(visiblePts[i].xValue, stackedvalue.endValues[i], xAxis, yAxis, isInverted, series);\n        direction = direction.concat((i ? 'L' : 'M') + ' ' + point1.x + ' ' + point1.y + ' ');\n        visiblePts[i].symbolLocations.push(getCoordinate(visiblePts[i].xValue, stackedvalue.endValues[i], xAxis, yAxis, isInverted, series));\n        visiblePts[i].regions.push(new Rect(visiblePts[i].symbolLocations[0].x - series.marker.width, visiblePts[i].symbolLocations[0].y - series.marker.height, 2 * series.marker.width, 2 * series.marker.height));\n      } else {\n        if (series.emptyPointSettings.mode !== 'Drop') {\n          if (visiblePts[i + 1] && visiblePts[i + 1].visible) {\n            point1 = getCoordinate(visiblePts[i + 1].xValue, stackedvalue.endValues[i + 1], xAxis, yAxis, isInverted, series);\n            direction = direction.concat('M' + ' ' + point1.x + ' ' + point1.y + ' ');\n          }\n\n          startPoint = i + 1;\n        }\n      }\n    }\n\n    if (series.chart.chartAreaType === 'PolarRadar' && visiblePts.length > 1) {\n      point1 = {\n        'y': stackedvalue.endValues[0],\n        'x': series.points[0].xValue\n      };\n      point2 = getCoordinate(point1.x, point1.y, xAxis, yAxis, isInverted, series);\n      direction += 'L' + ' ' + point2.x + ' ' + point2.y + ' ';\n    }\n\n    options = new PathOption(series.chart.element.id + '_Series_' + series.index, 'none', series.width, series.interior, series.opacity, series.dashArray, direction);\n    this.appendLinePath(options, series, '');\n    this.renderMarker(series);\n  };\n  /**\n   * Animates the series.\n   * @param  {Series} series - Defines the series to animate.\n   * @return {void}\n   */\n\n\n  StackingLineSeries.prototype.doAnimation = function (series) {\n    var option = series.animation;\n    this.doLinearAnimation(series, option);\n  };\n  /**\n   * To destroy the stacking line.\n   * @return {void}\n   * @private\n   */\n\n\n  StackingLineSeries.prototype.destroy = function (chart) {\n    /**\n     * Destroy method calling here\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  StackingLineSeries.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'StackingLineSeries';\n  };\n\n  return StackingLineSeries;\n}(LineBase);\n\nexport { StackingLineSeries };","map":null,"metadata":{},"sourceType":"module"}