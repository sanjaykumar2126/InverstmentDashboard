{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { withInRange } from '../../common/utils/helper';\nimport { ColumnBase } from './column-base';\n/**\n * `HiloSeries` module is used to render the hilo series.\n */\n\nvar HiloSeries =\n/** @class */\nfunction (_super) {\n  __extends(HiloSeries, _super);\n\n  function HiloSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render Hiloseries.\n   * @return {void}\n   * @private\n   */\n\n\n  HiloSeries.prototype.render = function (series) {\n    var region;\n    var sideBySideInfo = this.getSideBySideInfo(series);\n    var argsData;\n\n    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n      var point = _a[_i];\n      point.symbolLocations = [];\n      point.regions = [];\n\n      if (point.visible && withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {\n        region = this.getRectangle(point.xValue + sideBySideInfo.median, point.high, point.xValue + sideBySideInfo.median, point.low, series);\n        argsData = this.triggerPointRenderEvent(series, point);\n\n        if (!argsData.cancel) {\n          if (!series.chart.requireInvertedAxis) {\n            region.width = argsData.border.width;\n            region.x = region.x - region.width / 2;\n          } else {\n            region.height = argsData.border.width;\n            region.y = region.y - region.height / 2;\n          }\n\n          argsData.border.width = 0;\n          this.updateSymbolLocation(point, region, series);\n          this.drawRectangle(series, point, region, argsData);\n        }\n      }\n    }\n  };\n  /**\n   * To trigger the point rendering event.\n   * @return {void}\n   * @private\n   */\n\n\n  HiloSeries.prototype.triggerPointRenderEvent = function (series, point) {\n    var border = {\n      color: series.fill,\n      width: Math.max(series.border.width, 2)\n    };\n    return _super.prototype.triggerEvent.call(this, series, point, series.interior, border);\n  };\n  /**\n   * Get module name.\n   */\n\n\n  HiloSeries.prototype.getModuleName = function () {\n    return 'HiloSeries';\n    /**\n     * return the module name\n     */\n  };\n  /**\n   * Animates the series.\n   * @param  {Series} series - Defines the series to animate.\n   * @return {void}\n   */\n\n\n  HiloSeries.prototype.doAnimation = function (series) {\n    this.animate(series);\n  };\n  /**\n   * To destroy the Hilo series.\n   * @return {void}\n   * @private\n   */\n\n\n  HiloSeries.prototype.destroy = function (chart) {\n    /**\n     * Destroys the Hilo Series\n     */\n  };\n\n  return HiloSeries;\n}(ColumnBase);\n\nexport { HiloSeries };","map":null,"metadata":{},"sourceType":"module"}