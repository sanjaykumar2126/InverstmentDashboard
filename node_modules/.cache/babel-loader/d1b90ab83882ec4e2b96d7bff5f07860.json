{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Series } from '../series/chart-series';\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `BollingerBands` module is used to render bollinger band indicator.\n */\n\nvar BollingerBands =\n/** @class */\nfunction (_super) {\n  __extends(BollingerBands, _super);\n\n  function BollingerBands() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Initializes the series collection to represent bollinger band\n   */\n\n\n  BollingerBands.prototype.initSeriesCollection = function (indicator, chart) {\n    indicator.targetSeries = [];\n    var rangeArea = new Series(indicator, 'targetSeries', {}, true);\n    rangeArea.type = 'RangeArea';\n\n    if (indicator.bandColor !== 'transparent' && indicator.bandColor !== 'none') {\n      this.setSeriesProperties(rangeArea, indicator, 'BollingerBand', indicator.bandColor, 0, chart);\n    }\n\n    var signalLine = new Series(indicator, 'targetSeries', {}, true);\n    this.setSeriesProperties(signalLine, indicator, 'BollingerBand', indicator.fill, indicator.width, chart);\n    var upperLine = new Series(indicator, 'targetSeries', {}, true);\n    this.setSeriesProperties(upperLine, indicator, 'UpperLine', indicator.upperLine.color, indicator.upperLine.width, chart);\n    var lowerLine = new Series(indicator, 'targetSeries', {}, true);\n    this.setSeriesProperties(lowerLine, indicator, 'LowerLine', indicator.lowerLine.color, indicator.lowerLine.width, chart);\n  };\n  /**\n   * Defines the predictions using Bollinger Band Approach\n   * @private\n   */\n\n\n  BollingerBands.prototype.initDataSource = function (indicator, chart) {\n    var enableBand = indicator.bandColor !== 'transparent' && indicator.bandColor !== 'none';\n    var start = enableBand ? 1 : 0;\n    var signalCollection = [];\n    var upperCollection = [];\n    var lowerCollection = [];\n    var bandCollection = [];\n    var upperSeries = indicator.targetSeries[start + 1];\n    var lowerSeries = indicator.targetSeries[start + 2];\n    var signalSeries = indicator.targetSeries[start];\n    var rangeAreaSeries = enableBand ? indicator.targetSeries[0] : null; //prepare data\n\n    var validData = indicator.points;\n\n    if (validData.length && validData.length >= indicator.period) {\n      var sum = 0;\n      var deviationSum = 0;\n      var multiplier = indicator.standardDeviation;\n      var limit = validData.length;\n      var length_1 = Math.round(indicator.period);\n      var smaPoints = [];\n      var deviations = [];\n      var bollingerPoints = [];\n\n      for (var i_1 = 0; i_1 < length_1; i_1++) {\n        sum += Number(validData[i_1].close);\n      }\n\n      var sma = sum / indicator.period;\n\n      for (var i_2 = 0; i_2 < limit; i_2++) {\n        var y = Number(validData[i_2].close);\n\n        if (i_2 >= length_1 - 1 && i_2 < limit) {\n          if (i_2 - indicator.period >= 0) {\n            var diff = y - Number(validData[i_2 - length_1].close);\n            sum = sum + diff;\n            sma = sum / indicator.period;\n            smaPoints[i_2] = sma;\n            deviations[i_2] = Math.pow(y - sma, 2);\n            deviationSum += deviations[i_2] - deviations[i_2 - length_1];\n          } else {\n            smaPoints[i_2] = sma;\n            deviations[i_2] = Math.pow(y - sma, 2);\n            deviationSum += deviations[i_2];\n          }\n\n          var range = Math.sqrt(deviationSum / indicator.period);\n          var lowerBand = smaPoints[i_2] - multiplier * range;\n          var upperBand = smaPoints[i_2] + multiplier * range;\n\n          if (i_2 + 1 === length_1) {\n            for (var j_1 = 0; j_1 < length_1 - 1; j_1++) {\n              bollingerPoints[j_1] = {\n                'X': validData[j_1].x,\n                'mb': smaPoints[i_2],\n                'lb': lowerBand,\n                'ub': upperBand,\n                visible: true\n              };\n            }\n          }\n\n          bollingerPoints[i_2] = {\n            'X': validData[i_2].x,\n            'mb': smaPoints[i_2],\n            'lb': lowerBand,\n            'ub': upperBand,\n            visible: true\n          };\n        } else {\n          if (i_2 < indicator.period - 1) {\n            smaPoints[i_2] = sma;\n            deviations[i_2] = Math.pow(y - sma, 2);\n            deviationSum += deviations[i_2];\n          }\n        }\n      }\n\n      var i = -1;\n      var j = -1;\n\n      for (var k = 0; k < limit; k++) {\n        if (k >= length_1 - 1) {\n          var ub = 'ub';\n          var lb = 'lb';\n          var mb = 'mb';\n          upperCollection.push(this.getDataPoint(validData[k].x, bollingerPoints[k][ub], validData[k], upperSeries, upperCollection.length));\n          lowerCollection.push(this.getDataPoint(validData[k].x, bollingerPoints[k][lb], validData[k], lowerSeries, lowerCollection.length));\n          signalCollection.push(this.getDataPoint(validData[k].x, bollingerPoints[k][mb], validData[k], signalSeries, signalCollection.length));\n\n          if (enableBand) {\n            bandCollection.push(this.getRangePoint(validData[k].x, upperCollection[++i].y, lowerCollection[++j].y, validData[k], rangeAreaSeries, bandCollection.length));\n          }\n        }\n      }\n    }\n\n    if (enableBand) {\n      this.setSeriesRange(bandCollection, indicator, indicator.targetSeries[0]);\n    }\n\n    this.setSeriesRange(signalCollection, indicator, indicator.targetSeries[start]);\n    this.setSeriesRange(upperCollection, indicator, indicator.targetSeries[start + 1]);\n    this.setSeriesRange(lowerCollection, indicator, indicator.targetSeries[start + 2]);\n  };\n  /**\n   * To destroy the Bollinger Band.\n   * @return {void}\n   * @private\n   */\n\n\n  BollingerBands.prototype.destroy = function (chart) {\n    /**\n     * Destroys the bollinger band\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  BollingerBands.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'BollingerBandsIndicator';\n  };\n\n  return BollingerBands;\n}(TechnicalAnalysis);\n\nexport { BollingerBands };","map":null,"metadata":{},"sourceType":"module"}