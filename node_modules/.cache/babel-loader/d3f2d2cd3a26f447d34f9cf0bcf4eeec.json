{"ast":null,"code":"import ScatterChart from './scatter-chart';\nimport LineChartMixin from '../mixins/line-chart-mixin';\nimport LineSegment from '../line-chart/line-segment';\nimport SplineSegment from '../line-chart/spline-segment';\nimport { SMOOTH, ZERO } from '../constants';\nimport hasValue from '../utils/has-value';\nimport { deepExtend } from '../../common';\n\nvar ScatterLineChart = function (ScatterChart) {\n  function ScatterLineChart() {\n    ScatterChart.apply(this, arguments);\n  }\n\n  if (ScatterChart) ScatterLineChart.__proto__ = ScatterChart;\n  ScatterLineChart.prototype = Object.create(ScatterChart && ScatterChart.prototype);\n  ScatterLineChart.prototype.constructor = ScatterLineChart;\n\n  ScatterLineChart.prototype.render = function render() {\n    ScatterChart.prototype.render.call(this);\n    this.renderSegments();\n  };\n\n  ScatterLineChart.prototype.createSegment = function createSegment(linePoints, currentSeries, seriesIx) {\n    var style = currentSeries.style;\n    var pointType;\n\n    if (style === SMOOTH) {\n      pointType = SplineSegment;\n    } else {\n      pointType = LineSegment;\n    }\n\n    return new pointType(linePoints, currentSeries, seriesIx);\n  };\n\n  ScatterLineChart.prototype.animationPoints = function animationPoints() {\n    var points = ScatterChart.prototype.animationPoints.call(this);\n    return points.concat(this._segments);\n  };\n\n  ScatterLineChart.prototype.createMissingValue = function createMissingValue(value, missingValues) {\n    if (missingValues === ZERO) {\n      var missingValue = {\n        x: value.x,\n        y: value.y\n      };\n\n      if (!hasValue(missingValue.x)) {\n        missingValue.x = 0;\n      }\n\n      if (!hasValue(missingValue.y)) {\n        missingValue.y = 0;\n      }\n\n      return missingValue;\n    }\n  };\n\n  return ScatterLineChart;\n}(ScatterChart);\n\ndeepExtend(ScatterLineChart.prototype, LineChartMixin);\nexport default ScatterLineChart;","map":null,"metadata":{},"sourceType":"module"}