{"ast":null,"code":"import { titlePositionX, textElement, appendChildElement } from '../../index';\nimport { getElement } from '../../index';\nimport { DropDownButton } from '@syncfusion/ej2-splitbuttons';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { Rect, TextOption, measureText, SvgRenderer } from '@syncfusion/ej2-svg-base';\nimport { remove } from '@syncfusion/ej2-base';\n/**\n * Period selector for range navigator\n */\n\n/** @private */\n\nvar ToolBarSelector =\n/** @class */\nfunction () {\n  function ToolBarSelector(chart) {\n    this.selectedSeries = '';\n    this.selectedIndicator = '';\n    this.selectedTrendLine = '';\n    this.indicators = [];\n    this.secondayIndicators = [];\n    this.stockChart = chart;\n    this.selectedSeries = this.stockChart.series[0].type;\n  }\n\n  ToolBarSelector.prototype.initializePeriodSelector = function () {\n    var periods = this.stockChart.tempPeriods;\n    this.stockChart.periods = periods;\n    this.stockChart.periodSelector.rootControl = this.stockChart;\n    var rect = this.stockChart.chart.chartAxisLayoutPanel.seriesClipRect;\n    var htmlElement = getElement(this.stockChart.element.id + '_Secondary_Element');\n    var height = this.stockChart.toolbarHeight;\n    this.stockChart.periodSelector.appendSelector({\n      thumbSize: 0,\n      element: htmlElement,\n      width: rect.width,\n      height: height\n    }, rect.x);\n    this.initializeSeriesSelector();\n    this.initializeIndicatorSelector();\n    this.initializeTrendlineSelector();\n    this.exportButton();\n    this.printButton();\n    this.resetButton();\n  };\n  /**\n   * This method returns itemModel for dropdown button\n   * @param type\n   */\n\n\n  ToolBarSelector.prototype.getDropDownItems = function (type) {\n    var result = [];\n\n    if (type === this.stockChart.seriesType) {\n      for (var i = 0; i < type.length; i++) {\n        result.push({\n          text: '&nbsp;&nbsp;&nbsp;' + type[i].toString()\n        });\n      }\n\n      for (var i = 0; i < this.stockChart.series.length; i++) {\n        for (var j = 0; j < result.length; j++) {\n          var text = result[j].text.replace('&nbsp;&nbsp;&nbsp;', '');\n          text = text === 'OHLC' ? 'HiloOpenClose' : text;\n\n          if (text === this.stockChart.series[i].type) {\n            result[j].text = result[j].text.replace('&nbsp;&nbsp;&nbsp;', '&#10004&nbsp;');\n          }\n        }\n      }\n    } else if (type === this.stockChart.exportType) {\n      for (var i = 0; i < type.length; i++) {\n        result.push({\n          text: type[i].toString()\n        });\n      }\n    } else {\n      for (var i = 0; i < type.length; i++) {\n        if (type[i].toString() !== 'Print') {\n          result.push({\n            text: '&nbsp;&nbsp;&nbsp;' + type[i].toString()\n          });\n        }\n      }\n    }\n\n    return result;\n  };\n  /**\n   * This method changes the type of series while selectind series in dropdown button\n   */\n\n\n  ToolBarSelector.prototype.addedSeries = function (seriesType) {\n    var series = this.stockChart.series;\n\n    for (var i = 0; i < series.length; i++) {\n      if (series[i].yName === 'volume') {\n        continue;\n      }\n\n      series[i].type = seriesType.indexOf('Candle') > -1 ? 'Candle' : seriesType.indexOf('OHLC') > -1 ? 'HiloOpenClose' : seriesType;\n      series[i].enableSolidCandles = seriesType === 'Candle';\n      series[i].trendlines.forEach(function (trendLine) {\n        trendLine.animation.enable = false;\n        trendLine.enableTooltip = false;\n      });\n    }\n  };\n\n  ToolBarSelector.prototype.initializeSeriesSelector = function () {\n    var _this = this;\n\n    var seriesType = new DropDownButton({\n      items: this.getDropDownItems(this.stockChart.seriesType),\n      select: function (args) {\n        _this.selectedSeries = args.item.text;\n\n        var text = _this.tickMark(args);\n\n        _this.addedSeries(text);\n\n        _this.stockChart.cartesianChart.initializeChart();\n      }\n    });\n    seriesType.appendTo('#' + this.stockChart.element.id + '_seriesType');\n  };\n\n  ToolBarSelector.prototype.resetButton = function () {\n    var _this = this;\n\n    var reset = new Button();\n    reset.appendTo('#' + this.stockChart.element.id + '_reset');\n\n    document.getElementById(this.stockChart.element.id + '_reset').onclick = function () {\n      var indicatorlength = _this.indicators.length;\n\n      while (indicatorlength) {\n        _this.stockChart.indicators.pop();\n\n        indicatorlength--;\n      }\n\n      _this.indicators = [];\n      _this.secondayIndicators = [];\n\n      if (!_this.stockChart.isSingleAxis) {\n        if (_this.stockChart.rows.length > 2) {\n          _this.stockChart.rows.splice(2, _this.stockChart.rows.length - 1);\n        }\n\n        if (_this.stockChart.axes.length > 2) {\n          _this.stockChart.axes.splice(1, _this.stockChart.axes.length - 1);\n\n          _this.stockChart.axes[0].rowIndex = 1;\n        }\n      } else {\n        _this.stockChart.rows = [{}];\n      }\n\n      for (var i = 0; i < _this.stockChart.series.length; i++) {\n        if (_this.stockChart.series[i].yName === 'volume') {\n          continue;\n        }\n\n        _this.stockChart.series[i].type = _this.stockChart.tempSeriesType[i];\n\n        if (_this.stockChart.series[i].trendlines.length !== 0) {\n          _this.stockChart.series[i].trendlines[0].width = 0;\n        }\n      }\n\n      _this.stockChart.indicatorElements = null;\n      _this.stockChart.resizeTo = null;\n      _this.stockChart.zoomChange = false;\n\n      _this.stockChart.refresh();\n    };\n  };\n\n  ToolBarSelector.prototype.initializeTrendlineSelector = function () {\n    var _this = this;\n\n    this.trendlineDropDown = new DropDownButton({\n      items: this.stockChart.resizeTo ? this.trendlineDropDown.items : this.getDropDownItems(this.stockChart.trendlineType),\n      select: function (args) {\n        var text = _this.tickMark(args);\n\n        text = text.split(' ')[0].toLocaleLowerCase() + (text.split(' ')[1] ? text.split(' ')[1] : '');\n        text = text.substr(0, 1).toUpperCase() + text.substr(1);\n        var type = text;\n        _this.selectedTrendLine = _this.selectedTrendLine === '' ? type : _this.selectedTrendLine + ',' + type;\n\n        if (_this.trendline !== type) {\n          _this.trendline = type;\n\n          for (var i = 0; i < _this.stockChart.series.length; i++) {\n            if (_this.stockChart.series[i].yName === 'volume') {\n              continue;\n            }\n\n            if (_this.stockChart.series[0].trendlines.length === 0) {\n              var trendlines = void 0;\n\n              if (_this.stockChart.trendlinetriggered) {\n                trendlines = [{\n                  type: type,\n                  width: 1,\n                  enableTooltip: false\n                }];\n                _this.stockChart.trendlinetriggered = false;\n              }\n\n              _this.stockChart.series[0].trendlines = trendlines;\n            } else {\n              _this.stockChart.series[0].trendlines[0].width = 1;\n              _this.stockChart.series[0].trendlines[0].type = type;\n              _this.stockChart.series[0].trendlines[0].animation.enable = _this.stockChart.trendlinetriggered ? true : false;\n            }\n          }\n\n          _this.stockChart.cartesianChart.initializeChart();\n        } else {\n          args.item.text = '&nbsp;&nbsp;&nbsp;' + args.item.text.replace('&#10004&nbsp;', '');\n          _this.stockChart.series[0].trendlines[0].width = 0;\n          _this.trendline = null;\n\n          _this.stockChart.cartesianChart.initializeChart();\n        }\n      }\n    });\n    this.trendlineDropDown.appendTo('#' + this.stockChart.element.id + '_trendType');\n  };\n\n  ToolBarSelector.prototype.initializeIndicatorSelector = function () {\n    var _this = this;\n\n    this.indicatorDropDown = new DropDownButton({\n      items: this.stockChart.resizeTo ? this.indicatorDropDown.items : this.getDropDownItems(this.stockChart.indicatorType),\n      select: function (args) {\n        for (var l = 0; l < _this.stockChart.series.length; l++) {\n          if (_this.stockChart.series[l].trendlines.length !== 0) {\n            _this.stockChart.series[l].trendlines[0].animation.enable = false;\n          }\n        }\n\n        args.item.text = args.item.text.indexOf('&#10004&nbsp;') >= 0 ? args.item.text.substr(args.item.text.indexOf(';') + 1) : args.item.text;\n        var text = args.item.text.replace('&nbsp;&nbsp;&nbsp;', '');\n        text = text.split(' ')[0].toLocaleLowerCase() + (text.split(' ')[1] ? text.split(' ')[1] : '');\n        text = text.substr(0, 1).toUpperCase() + text.substr(1);\n        var type = text;\n        _this.selectedIndicator = _this.selectedIndicator.indexOf(type) === -1 ? _this.selectedIndicator + ' ' + type : _this.selectedIndicator.replace(type, '');\n\n        if (type === 'Tma' || type === 'BollingerBands' || type === 'Sma' || type === 'Ema') {\n          if (_this.indicators.indexOf(type) === -1) {\n            args.item.text = '&#10004&nbsp;' + args.item.text.replace('&nbsp;&nbsp;&nbsp;', '');\n\n            var indicator = _this.getIndicator(type, _this.stockChart.series[0].yAxisName);\n\n            _this.indicators.push(type);\n\n            _this.stockChart.indicators = _this.stockChart.indicators.concat(indicator);\n\n            _this.stockChart.cartesianChart.initializeChart();\n          } else {\n            args.item.text = '&nbsp;&nbsp;&nbsp;' + args.item.text;\n\n            for (var z = 0; z < _this.stockChart.indicators.length; z++) {\n              if (_this.stockChart.indicators[z].type === type) {\n                _this.stockChart.indicators.splice(z, 1);\n              }\n            }\n\n            _this.indicators.splice(_this.indicators.indexOf(type), 1);\n\n            _this.stockChart.cartesianChart.initializeChart();\n          }\n        } else {\n          _this.createIndicatorAxes(type, args);\n        }\n      }\n    });\n    this.indicatorDropDown.appendTo('#' + this.stockChart.element.id + '_indicatorType');\n  };\n\n  ToolBarSelector.prototype.getIndicator = function (type, yAxisName) {\n    var currentSeries = this.stockChart.series[0];\n    var indicator = [{\n      type: type,\n      period: 3,\n      yAxisName: yAxisName,\n      dataSource: currentSeries.localData,\n      xName: currentSeries.xName,\n      open: currentSeries.open,\n      close: currentSeries.close,\n      high: currentSeries.high,\n      low: currentSeries.low,\n      volume: currentSeries.volume,\n      fill: type === 'Sma' ? '#32CD32' : '#6063ff',\n      animation: {\n        enable: false\n      },\n      upperLine: {\n        color: '#FFE200',\n        width: 1\n      },\n      periodLine: {\n        width: 2\n      },\n      lowerLine: {\n        color: '#FAA512',\n        width: 1\n      },\n      fastPeriod: 8,\n      slowPeriod: 5,\n      macdType: 'Both',\n      width: 1,\n      macdPositiveColor: '#6EC992',\n      macdNegativeColor: '#FF817F',\n      bandColor: 'rgba(245, 203, 35, 0.12)'\n    }];\n    return indicator;\n  };\n\n  ToolBarSelector.prototype.createIndicatorAxes = function (type, args) {\n    if (this.indicators.indexOf(type) === -1) {\n      args.item.text = '&#10004&nbsp;' + args.item.text.replace('&nbsp;&nbsp;&nbsp;', '');\n      this.indicators.push(type);\n      var axis = void 0;\n      var row = void 0;\n      var indicator = void 0;\n      var len = this.stockChart.rows.length;\n      this.stockChart.rows[this.stockChart.rows.length - 1].height = '15%';\n      row = [{\n        height: '' + (100 - len * 15) + 'px'\n      }];\n\n      if (this.stockChart.rows.length === 1) {\n        this.stockChart.isSingleAxis = true;\n      }\n\n      this.stockChart.rows = this.stockChart.rows.concat(row);\n\n      if (!this.stockChart.isSingleAxis) {\n        this.stockChart.axes[0].rowIndex += 1;\n      } else {\n        for (var i = 0; i < this.stockChart.axes.length; i++) {\n          this.stockChart.axes[i].rowIndex += 1;\n        }\n      }\n\n      axis = [{\n        plotOffset: 10,\n        opposedPosition: true,\n        rowIndex: !this.stockChart.isSingleAxis ? this.stockChart.axes.length : 0,\n        desiredIntervals: 1,\n        labelFormat: 'n2',\n        majorGridLines: this.stockChart.primaryYAxis.majorGridLines,\n        lineStyle: this.stockChart.primaryYAxis.lineStyle,\n        labelPosition: this.stockChart.primaryYAxis.labelPosition,\n        majorTickLines: this.stockChart.primaryYAxis.majorTickLines,\n        rangePadding: 'None',\n        name: type.toString()\n      }];\n      this.stockChart.axes = this.stockChart.axes.concat(axis);\n      this.stockChart.primaryYAxis.rowIndex = !this.stockChart.isSingleAxis ? 0 : len + 1;\n      indicator = this.getIndicator(type, type.toString());\n      this.stockChart.indicators = this.stockChart.indicators.concat(indicator);\n      this.stockChart.cartesianChart.initializeChart();\n    } else {\n      args.item.text = '&nbsp;&nbsp;&nbsp;' + args.item.text;\n\n      for (var i = 0; i < this.stockChart.indicators.length; i++) {\n        if (this.stockChart.indicators[i].type === type) {\n          this.stockChart.indicators.splice(i, 1);\n        }\n      }\n\n      this.indicators.splice(this.indicators.indexOf(type), 1);\n      var removedIndex = 0;\n\n      for (var z = 0; z < this.stockChart.axes.length; z++) {\n        if (this.stockChart.axes[z].name === type) {\n          removedIndex = this.stockChart.axes[z].rowIndex;\n          this.stockChart.rows.splice(z, 1);\n          this.stockChart.axes.splice(z, 1);\n        }\n      }\n\n      for (var z = 0; z < this.stockChart.axes.length; z++) {\n        if (this.stockChart.axes[z].rowIndex !== 0 && this.stockChart.axes[z].rowIndex > removedIndex) {\n          this.stockChart.axes[z].rowIndex = this.stockChart.axes[z].rowIndex - 1;\n        }\n      }\n\n      this.stockChart.cartesianChart.initializeChart();\n    }\n  };\n\n  ToolBarSelector.prototype.tickMark = function (args) {\n    var text; // tslint:disable-next-line:no-string-literal\n\n    var items = args.item['parentObj'].items;\n\n    for (var i = 0; i < items.length; i++) {\n      items[i].text = items[i].text.indexOf('&#10004&nbsp;') >= 0 ? items[i].text.substr(items[i].text.indexOf(';') + 1) : items[i].text;\n\n      if (!(items[i].text.indexOf('&nbsp;&nbsp;&nbsp;') >= 0)) {\n        items[i].text = '&nbsp;&nbsp;&nbsp;' + items[i].text;\n      }\n    }\n\n    if (args.item.text.indexOf('&nbsp;&nbsp;&nbsp;') >= 0) {\n      text = args.item.text.replace('&nbsp;&nbsp;&nbsp;', '');\n      args.item.text = args.item.text.replace('&nbsp;&nbsp;&nbsp;', '&#10004&nbsp;');\n    } else {\n      text = args.item.text.replace('&#10004&nbsp;', '');\n    }\n\n    return text;\n  };\n\n  ToolBarSelector.prototype.printButton = function () {\n    var _this = this;\n\n    if (this.stockChart.exportType.indexOf('Print') > -1) {\n      var print_1 = new Button();\n      print_1.appendTo('#' + this.stockChart.element.id + '_print');\n\n      document.getElementById(this.stockChart.element.id + '_print').onclick = function () {\n        _this.stockChart.chart.print(_this.stockChart.element.id);\n      };\n    }\n  };\n\n  ToolBarSelector.prototype.exportButton = function () {\n    var _this = this;\n\n    var exportChart = new DropDownButton({\n      items: this.getDropDownItems(this.stockChart.exportType),\n      select: function (args) {\n        var type = args.item.text;\n        var stockChart = _this.stockChart;\n        var stockID = stockChart.element.id + '_stockChart_';\n        var additionalRect;\n        var svgHeight = stockChart.svgObject.getBoundingClientRect();\n\n        if (stockChart.chart.exportModule) {\n          _this.stockChart.svgObject.insertAdjacentElement('afterbegin', _this.addExportSettings());\n\n          additionalRect = stockChart.svgObject.firstElementChild.getBoundingClientRect();\n\n          _this.stockChart.svgObject.setAttribute('height', (svgHeight.height + additionalRect.height).toString());\n\n          getElement(stockID + 'chart').style.transform = 'translateY(' + additionalRect.height + 'px)';\n\n          if (stockChart.enableSelector) {\n            getElement(stockID + 'rangeSelector').setAttribute('transform', // tslint:disable-next-line:align\n            'translate(' + 0 + ',' + (stockChart.cartesianChart.cartesianChartSize.height + additionalRect.height) + ')');\n          }\n\n          stockChart.chart.exportModule.export(type, 'StockChart', null, [stockChart], null, stockChart.svgObject.clientHeight);\n          remove(getElement(_this.stockChart.element.id + '_additionalExport'));\n          getElement(stockID + 'chart').style.transform = 'translateY(0px)';\n\n          if (stockChart.enableSelector) {\n            getElement(stockID + 'rangeSelector').setAttribute('transform', // tslint:disable-next-line:align\n            'translate(' + 0 + ',' + stockChart.cartesianChart.cartesianChartSize.height + ')');\n          }\n\n          _this.stockChart.svgObject.setAttribute('height', svgHeight.height.toString());\n        }\n      }\n    });\n    exportChart.appendTo('#' + this.stockChart.element.id + '_export');\n  };\n\n  ToolBarSelector.prototype.calculateAutoPeriods = function () {\n    var defaultPeriods = [];\n    defaultPeriods = this.findRange(this.stockChart.seriesXMin, this.stockChart.seriesXMax);\n    defaultPeriods.push({\n      text: 'YTD',\n      selected: true\n    }, {\n      text: 'All'\n    });\n    return defaultPeriods;\n  };\n\n  ToolBarSelector.prototype.findRange = function (min, max) {\n    var defaultPeriods = [];\n\n    if ((max - min) / 3.154e+10 >= 1) {\n      defaultPeriods.push({\n        text: '1M',\n        interval: 1,\n        intervalType: 'Months'\n      }, {\n        text: '3M',\n        interval: 3,\n        intervalType: 'Months'\n      }, {\n        text: '6M',\n        interval: 6,\n        intervalType: 'Months'\n      }, {\n        text: '1Y',\n        interval: 1,\n        intervalType: 'Years'\n      });\n    } else if ((max - min) / 1.577e+10 >= 1) {\n      defaultPeriods.push({\n        text: '1M',\n        interval: 1,\n        intervalType: 'Months'\n      }, {\n        text: '3M',\n        interval: 3,\n        intervalType: 'Months'\n      }, {\n        text: '6M',\n        interval: 6,\n        intervalType: 'Months'\n      });\n    } else if ((max - min) / 2.628e+9 >= 1) {\n      defaultPeriods.push({\n        text: '1D',\n        interval: 1,\n        intervalType: 'Days'\n      }, {\n        text: '3W',\n        interval: 3,\n        intervalType: 'Weeks'\n      }, {\n        text: '1M',\n        interval: 1,\n        intervalType: 'Months'\n      });\n    } else if ((max - min) / 8.64e+7 >= 1) {\n      defaultPeriods.push({\n        text: '1H',\n        interval: 1,\n        intervalType: 'Hours'\n      }, {\n        text: '12H',\n        interval: 12,\n        intervalType: 'Hours'\n      }, {\n        text: '1D',\n        interval: 1,\n        intervalType: 'Days'\n      });\n    }\n\n    return defaultPeriods;\n  };\n  /**\n   * Text elements added to while export the chart\n   * It details about the seriesTypes, indicatorTypes and Trendlines selected in chart.\n   */\n\n\n  ToolBarSelector.prototype.addExportSettings = function () {\n    var exportElement = this.stockChart.renderer.createGroup({\n      id: this.stockChart.element.id + '_additionalExport',\n      width: this.stockChart.availableSize.width\n    });\n    var titleHeight = measureText(this.stockChart.title, this.stockChart.titleStyle).height;\n    var options = new TextOption(exportElement.id + '_Title', titlePositionX(new Rect(0, 0, this.stockChart.availableSize.width, 0), this.stockChart.titleStyle), 0, 'middle', this.stockChart.title, '', 'text-before-edge');\n    textElement(this.stockChart.renderer, options, this.stockChart.titleStyle, this.stockChart.titleStyle.color, exportElement);\n    var style = {\n      size: '15px',\n      fontWeight: '500',\n      color: null,\n      fontStyle: 'Normal',\n      fontFamily: 'Segoe UI'\n    };\n    var x = measureText('Series: ' + this.selectedSeries, style).width / 2;\n    var y = titleHeight;\n    this.textElementSpan(new TextOption(exportElement.id + '_Series', x, y, 'start', ['Series : ', this.selectedSeries], '', 'text-before-edge'), style, 'black', exportElement);\n    x += measureText('Series: ' + this.selectedSeries + ' Z', style).width;\n\n    if (this.selectedIndicator !== '') {\n      this.textElementSpan(new TextOption(exportElement.id + '_Indicator', x, y, 'start', ['Indicator :', this.selectedIndicator], '', 'text-before-edge'), style, 'black', exportElement);\n      x += measureText('Indicator: ' + this.selectedIndicator + ' Z', style).width;\n    }\n\n    if (this.selectedTrendLine !== '') {\n      this.textElementSpan(new TextOption(exportElement.id + '_TrendLine', x, y, 'start', ['Trendline :', this.selectedTrendLine], '', 'text-before-edge'), style, 'black', exportElement);\n    }\n\n    return exportElement;\n  };\n  /** @private */\n\n\n  ToolBarSelector.prototype.textElementSpan = function (options, font, color, parent, isMinus, redraw, isAnimate, forceAnimate, animateDuration) {\n    if (isMinus === void 0) {\n      isMinus = false;\n    }\n\n    if (forceAnimate === void 0) {\n      forceAnimate = false;\n    }\n\n    var renderer = new SvgRenderer('');\n    var renderOptions = {};\n    var htmlObject;\n    var text;\n    var tspanElement;\n    renderOptions = {\n      'id': options.id,\n      'font-style': font.fontStyle,\n      'font-family': font.fontFamily,\n      'font-weight': font.fontWeight,\n      'text-anchor': options.anchor,\n      'x': options.x,\n      'y': options.y,\n      'fill': color,\n      'font-size': font.size,\n      'transform': options.transform,\n      'opacity': font.opacity,\n      'dominant-baseline': options.baseLine\n    };\n    text = typeof options.text === 'string' ? options.text : isMinus ? options.text[options.text.length - 1] : options.text[0];\n    htmlObject = renderer.createText(renderOptions, text);\n\n    if (typeof options.text !== 'string' && options.text.length > 1) {\n      for (var i = 1, len = options.text.length; i < len; i++) {\n        options.text[i] = ' ' + options.text[i];\n        tspanElement = renderer.createTSpan({\n          'x': options.x + measureText(text, font).width + 5,\n          'id': options.id,\n          'y': options.y,\n          opacity: 0.5\n        }, options.text[i]);\n        htmlObject.appendChild(tspanElement);\n      }\n    }\n\n    appendChildElement(false, parent, htmlObject, redraw, isAnimate, 'x', 'y', null, null, forceAnimate, false, null, animateDuration);\n    return htmlObject;\n  };\n\n  return ToolBarSelector;\n}();\n\nexport { ToolBarSelector };","map":null,"metadata":{},"sourceType":"module"}