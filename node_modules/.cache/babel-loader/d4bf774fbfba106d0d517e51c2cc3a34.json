{"ast":null,"code":"import acceptKey from './accept-key';\nimport toChartAxisRanges from './to-chart-axis-ranges';\nimport { X, Y } from '../../common/constants';\nimport { Class, deepExtend } from '../../common';\n\nvar Pannable = function (Class) {\n  function Pannable(plotArea, options) {\n    Class.call(this);\n    this.plotArea = plotArea;\n    this.options = deepExtend({}, this.options, options);\n  }\n\n  if (Class) Pannable.__proto__ = Class;\n  Pannable.prototype = Object.create(Class && Class.prototype);\n  Pannable.prototype.constructor = Pannable;\n\n  Pannable.prototype.start = function start(e) {\n    this._active = acceptKey(e, this.options.key);\n    return this._active;\n  };\n\n  Pannable.prototype.move = function move(e) {\n    if (this._active) {\n      var axisRanges = this.axisRanges = this._panAxes(e, X).concat(this._panAxes(e, Y));\n\n      if (axisRanges.length) {\n        this.axisRanges = axisRanges;\n        return toChartAxisRanges(axisRanges);\n      }\n    }\n  };\n\n  Pannable.prototype.end = function end() {\n    var active = this._active;\n    this._active = false;\n    return active;\n  };\n\n  Pannable.prototype.pan = function pan() {\n    var ref = this;\n    var plotArea = ref.plotArea;\n    var axisRanges = ref.axisRanges;\n\n    if (axisRanges.length) {\n      for (var idx = 0; idx < axisRanges.length; idx++) {\n        var range = axisRanges[idx];\n        plotArea.updateAxisOptions(range.axis, range.range);\n      }\n\n      plotArea.redraw(plotArea.panes);\n    }\n  };\n\n  Pannable.prototype.destroy = function destroy() {\n    delete this.plotArea;\n  };\n\n  Pannable.prototype._panAxes = function _panAxes(e, position) {\n    var plotArea = this.plotArea;\n    var delta = -e[position].delta;\n    var lock = (this.options.lock || \"\").toLowerCase();\n    var updatedAxes = [];\n\n    if (delta !== 0 && (lock || \"\").toLowerCase() !== position) {\n      var axes = plotArea.axes;\n\n      for (var idx = 0; idx < axes.length; idx++) {\n        var axis = axes[idx];\n\n        if (position === X && !axis.options.vertical || position === Y && axis.options.vertical) {\n          var range = axis.pan(delta);\n\n          if (range) {\n            range.limitRange = true;\n            updatedAxes.push({\n              axis: axis,\n              range: range\n            });\n          }\n        }\n      }\n    }\n\n    return updatedAxes;\n  };\n\n  return Pannable;\n}(Class);\n\nPannable.prototype.options = {\n  key: \"none\",\n  lock: \"none\"\n};\nexport default Pannable;","map":null,"metadata":{},"sourceType":"module"}