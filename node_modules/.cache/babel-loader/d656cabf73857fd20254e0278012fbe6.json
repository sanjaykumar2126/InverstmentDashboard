{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Series } from '../series/chart-series';\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `RsiIndicator` module is used to render RSI indicator.\n */\n\nvar RsiIndicator =\n/** @class */\nfunction (_super) {\n  __extends(RsiIndicator, _super);\n\n  function RsiIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Initializes the series collection to represent the RSI Indicator\n   * @private\n   */\n\n\n  RsiIndicator.prototype.initSeriesCollection = function (indicator, chart) {\n    _super.prototype.initSeriesCollection.call(this, indicator, chart);\n\n    if (indicator.showZones) {\n      var lowerLine = new Series(indicator, 'targetSeries', {}, true);\n\n      _super.prototype.setSeriesProperties.call(this, lowerLine, indicator, 'LowerLine', indicator.lowerLine.color, indicator.lowerLine.width, chart);\n\n      var upperLine = new Series(indicator, 'targetSeries', {}, true);\n\n      _super.prototype.setSeriesProperties.call(this, upperLine, indicator, 'UpperLine', indicator.upperLine.color, indicator.upperLine.width, chart);\n    }\n  };\n  /**\n   * Defines the predictions using RSI approach\n   * @private\n   */\n\n\n  RsiIndicator.prototype.initDataSource = function (indicator, chart) {\n    var signalCollection = [];\n    var lowerCollection = [];\n    var upperCollection = [];\n    var signalSeries = indicator.targetSeries[0]; //prepare data\n\n    var validData = indicator.points;\n\n    if (validData.length && validData.length >= indicator.period) {\n      //Find upper band and lower band values\n      if (indicator.showZones) {\n        for (var i = 0; i < validData.length; i++) {\n          upperCollection.push(this.getDataPoint(validData[i].x, indicator.overBought, validData[i], indicator.targetSeries[1], upperCollection.length));\n          lowerCollection.push(this.getDataPoint(validData[i].x, indicator.overSold, validData[i], indicator.targetSeries[2], lowerCollection.length));\n        }\n      } //Find signal line value\n\n\n      var prevClose = Number(validData[0].close);\n      var gain = 0;\n      var loss = 0;\n\n      for (var i = 1; i <= indicator.period; i++) {\n        var close_1 = Number(validData[i].close);\n\n        if (close_1 > prevClose) {\n          gain += close_1 - prevClose;\n        } else {\n          loss += prevClose - close_1;\n        }\n\n        prevClose = close_1;\n      }\n\n      gain = gain / indicator.period;\n      loss = loss / indicator.period;\n      signalCollection.push(this.getDataPoint(validData[indicator.period].x, 100 - 100 / (1 + gain / loss), validData[indicator.period], signalSeries, signalCollection.length));\n\n      for (var j = indicator.period + 1; j < validData.length; j++) {\n        var close_2 = Number(validData[j].close);\n\n        if (close_2 > prevClose) {\n          gain = (gain * (indicator.period - 1) + (close_2 - prevClose)) / indicator.period;\n          loss = loss * (indicator.period - 1) / indicator.period;\n        } else if (close_2 < prevClose) {\n          loss = (loss * (indicator.period - 1) + (prevClose - close_2)) / indicator.period;\n          gain = gain * (indicator.period - 1) / indicator.period;\n        }\n\n        prevClose = close_2;\n        signalCollection.push(this.getDataPoint(validData[j].x, 100 - 100 / (1 + gain / loss), validData[j], signalSeries, signalCollection.length));\n      }\n    }\n\n    this.setSeriesRange(signalCollection, indicator, indicator.targetSeries[0]);\n\n    if (indicator.showZones) {\n      this.setSeriesRange(upperCollection, indicator, indicator.targetSeries[1]);\n      this.setSeriesRange(lowerCollection, indicator, indicator.targetSeries[2]);\n    }\n  };\n  /**\n   * To destroy the RSI Indicator.\n   * @return {void}\n   * @private\n   */\n\n\n  RsiIndicator.prototype.destroy = function (chart) {\n    /**\n     * Destroys the RSI Indicator\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  RsiIndicator.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the indicator.\n     */\n    return 'RsiIndicator';\n  };\n\n  return RsiIndicator;\n}(TechnicalAnalysis);\n\nexport { RsiIndicator };","map":null,"metadata":{},"sourceType":"module"}