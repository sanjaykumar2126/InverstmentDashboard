{"ast":null,"code":"import { Chart } from '../chart';\nimport Navigator from './navigator';\nimport { DEFAULT_WIDTH } from '../common/constants';\nimport { addClass, deepExtend, elementSize, grep, setDefaultOptions } from '../common';\nimport { NAVIGATOR_AXIS, NAVIGATOR_PANE } from './constants';\nvar AUTO_CATEGORY_WIDTH = 28;\n\nvar StockChart = function (Chart) {\n  function StockChart() {\n    Chart.apply(this, arguments);\n  }\n\n  if (Chart) StockChart.__proto__ = Chart;\n  StockChart.prototype = Object.create(Chart && Chart.prototype);\n  StockChart.prototype.constructor = StockChart;\n\n  StockChart.prototype.applyDefaults = function applyDefaults(options, themeOptions) {\n    var width = elementSize(this.element).width || DEFAULT_WIDTH;\n    var theme = themeOptions;\n    var stockDefaults = {\n      seriesDefaults: {\n        categoryField: options.dateField\n      },\n      axisDefaults: {\n        categoryAxis: {\n          name: \"default\",\n          majorGridLines: {\n            visible: false\n          },\n          labels: {\n            step: 2\n          },\n          majorTicks: {\n            visible: false\n          },\n          maxDateGroups: Math.floor(width / AUTO_CATEGORY_WIDTH)\n        }\n      }\n    };\n\n    if (theme) {\n      theme = deepExtend({}, theme, stockDefaults);\n    }\n\n    Navigator.setup(options, theme);\n    Chart.prototype.applyDefaults.call(this, options, theme);\n  };\n\n  StockChart.prototype._setElementClass = function _setElementClass(element) {\n    addClass(element, 'k-chart k-stockchart');\n  };\n\n  StockChart.prototype.setOptions = function setOptions(options) {\n    this.destroyNavigator();\n    Chart.prototype.setOptions.call(this, options);\n  };\n\n  StockChart.prototype.noTransitionsRedraw = function noTransitionsRedraw() {\n    var transitions = this.options.transitions;\n    this.options.transitions = false;\n\n    this._fullRedraw();\n\n    this.options.transitions = transitions;\n  };\n\n  StockChart.prototype._resize = function _resize() {\n    this.noTransitionsRedraw();\n  };\n\n  StockChart.prototype._redraw = function _redraw() {\n    var navigator = this.navigator;\n\n    if (!this._dirty() && navigator && navigator.options.partialRedraw) {\n      navigator.redrawSlaves();\n    } else {\n      this._fullRedraw();\n    }\n  };\n\n  StockChart.prototype._dirty = function _dirty() {\n    var options = this.options;\n    var series = [].concat(options.series, options.navigator.series);\n    var seriesCount = grep(series, function (s) {\n      return s && s.visible;\n    }).length;\n    var dirty = this._seriesCount !== seriesCount;\n    this._seriesCount = seriesCount;\n    return dirty;\n  };\n\n  StockChart.prototype._fullRedraw = function _fullRedraw() {\n    var navigator = this.navigator;\n\n    if (!navigator) {\n      navigator = this.navigator = new Navigator(this);\n      this.trigger(\"navigatorCreated\", {\n        navigator: navigator\n      });\n    }\n\n    navigator.clean();\n    navigator.setRange();\n\n    Chart.prototype._redraw.call(this);\n\n    navigator.initSelection();\n  };\n\n  StockChart.prototype._trackSharedTooltip = function _trackSharedTooltip(coords) {\n    var plotArea = this._plotArea;\n    var pane = plotArea.paneByPoint(coords);\n\n    if (pane && pane.options.name === NAVIGATOR_PANE) {\n      this._unsetActivePoint();\n    } else {\n      Chart.prototype._trackSharedTooltip.call(this, coords);\n    }\n  };\n\n  StockChart.prototype.bindCategories = function bindCategories() {\n    Chart.prototype.bindCategories.call(this);\n    this.copyNavigatorCategories();\n  };\n\n  StockChart.prototype.copyNavigatorCategories = function copyNavigatorCategories() {\n    var definitions = [].concat(this.options.categoryAxis);\n    var categories;\n\n    for (var axisIx = 0; axisIx < definitions.length; axisIx++) {\n      var axis = definitions[axisIx];\n\n      if (axis.name === NAVIGATOR_AXIS) {\n        categories = axis.categories;\n      } else if (categories && axis.pane === NAVIGATOR_PANE) {\n        axis.categories = categories;\n      }\n    }\n  };\n\n  StockChart.prototype.destroyNavigator = function destroyNavigator() {\n    if (this.navigator) {\n      this.navigator.destroy();\n      this.navigator = null;\n    }\n  };\n\n  StockChart.prototype.destroy = function destroy() {\n    this.destroyNavigator();\n    Chart.prototype.destroy.call(this);\n  };\n\n  StockChart.prototype._stopChartHandlers = function _stopChartHandlers(e) {\n    var coords = this._eventCoordinates(e);\n\n    var pane = this._plotArea.paneByPoint(coords);\n\n    return Chart.prototype._stopChartHandlers.call(this, e) || pane && pane.options.name === NAVIGATOR_PANE;\n  };\n\n  StockChart.prototype._toggleDragZoomEvents = function _toggleDragZoomEvents() {\n    if (!this._dragZoomEnabled) {\n      this.element.style.touchAction = \"none\";\n      this._dragZoomEnabled = true;\n    }\n  };\n\n  return StockChart;\n}(Chart);\n\nsetDefaultOptions(StockChart, {\n  dateField: \"date\",\n  axisDefaults: {\n    categoryAxis: {\n      type: \"date\",\n      baseUnit: \"fit\",\n      justified: true\n    },\n    valueAxis: {\n      narrowRange: true,\n      labels: {\n        format: \"C\"\n      }\n    }\n  },\n  navigator: {\n    select: {},\n    seriesDefaults: {\n      markers: {\n        visible: false\n      },\n      tooltip: {\n        visible: true\n      },\n      line: {\n        width: 2\n      }\n    },\n    hint: {},\n    visible: true\n  },\n  tooltip: {\n    visible: true\n  },\n  legend: {\n    visible: false\n  }\n});\nexport default StockChart;","map":null,"metadata":{},"sourceType":"module"}