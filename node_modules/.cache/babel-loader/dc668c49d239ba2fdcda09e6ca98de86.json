{"ast":null,"code":"import { Color } from '@progress/kendo-drawing';\nimport { Class, defined, deepExtend, setDefaultOptions, valueOrDefault, getSpacing, styleValue } from '../../common';\nimport { SHOW_TOOLTIP, HIDE_TOOLTIP } from '../constants';\n\nvar BaseTooltip = function (Class) {\n  function BaseTooltip(chartService, options) {\n    Class.call(this);\n    this.chartService = chartService;\n    this.options = deepExtend({}, this.options, options);\n  }\n\n  if (Class) BaseTooltip.__proto__ = Class;\n  BaseTooltip.prototype = Object.create(Class && Class.prototype);\n  BaseTooltip.prototype.constructor = BaseTooltip;\n\n  BaseTooltip.prototype.getStyle = function getStyle(options, point) {\n    var background = options.background;\n    var border = options.border.color;\n\n    if (point) {\n      var pointColor = point.color || point.options.color;\n      background = valueOrDefault(background, pointColor);\n      border = valueOrDefault(border, pointColor);\n    }\n\n    var padding = getSpacing(options.padding || {}, \"auto\");\n    return {\n      backgroundColor: background,\n      borderColor: border,\n      font: options.font,\n      color: options.color,\n      opacity: options.opacity,\n      borderWidth: styleValue(options.border.width),\n      paddingTop: styleValue(padding.top),\n      paddingBottom: styleValue(padding.bottom),\n      paddingLeft: styleValue(padding.left),\n      paddingRight: styleValue(padding.right)\n    };\n  };\n\n  BaseTooltip.prototype.show = function show(options, tooltipOptions, point) {\n    options.format = tooltipOptions.format;\n    var style = this.getStyle(tooltipOptions, point);\n    options.style = style;\n\n    if (!defined(tooltipOptions.color) && new Color(style.backgroundColor).percBrightness() > 180) {\n      options.className = \"k-chart-tooltip-inverse\";\n    }\n\n    this.chartService.notify(SHOW_TOOLTIP, options);\n    this.visible = true;\n  };\n\n  BaseTooltip.prototype.hide = function hide() {\n    if (this.chartService) {\n      this.chartService.notify(HIDE_TOOLTIP);\n    }\n\n    this.visible = false;\n  };\n\n  BaseTooltip.prototype.destroy = function destroy() {\n    delete this.chartService;\n  };\n\n  return BaseTooltip;\n}(Class);\n\nsetDefaultOptions(BaseTooltip, {\n  border: {\n    width: 1\n  },\n  opacity: 1\n});\nexport default BaseTooltip;","map":null,"metadata":{},"sourceType":"module"}