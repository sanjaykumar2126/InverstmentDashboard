{"ast":null,"code":"import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\nimport { ChartElement, CategoryAxis } from '../../core';\nimport CrosshairTooltip from './crosshair-tooltip';\nimport { BLACK, X, Y } from '../../common/constants';\nimport { deepExtend, setDefaultOptions } from '../../common';\n\nvar Crosshair = function (ChartElement) {\n  function Crosshair(chartService, axis, options) {\n    ChartElement.call(this, options);\n    this.axis = axis;\n    this.stickyMode = axis instanceof CategoryAxis;\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.visible) {\n      this.tooltip = new CrosshairTooltip(chartService, this, deepExtend({}, tooltipOptions, {\n        stickyMode: this.stickyMode\n      }));\n    }\n  }\n\n  if (ChartElement) Crosshair.__proto__ = ChartElement;\n  Crosshair.prototype = Object.create(ChartElement && ChartElement.prototype);\n  Crosshair.prototype.constructor = Crosshair;\n\n  Crosshair.prototype.showAt = function showAt(point) {\n    this.point = point;\n    this.moveLine();\n    this.line.visible(true);\n\n    if (this.tooltip) {\n      this.tooltip.showAt(point);\n    }\n  };\n\n  Crosshair.prototype.hide = function hide() {\n    this.line.visible(false);\n\n    if (this.tooltip) {\n      this.tooltip.hide();\n    }\n  };\n\n  Crosshair.prototype.moveLine = function moveLine() {\n    var ref = this;\n    var axis = ref.axis;\n    var point = ref.point;\n    var vertical = axis.options.vertical;\n    var box = this.getBox();\n    var dim = vertical ? Y : X;\n    var lineStart = new geom.Point(box.x1, box.y1);\n    var lineEnd;\n\n    if (vertical) {\n      lineEnd = new geom.Point(box.x2, box.y1);\n    } else {\n      lineEnd = new geom.Point(box.x1, box.y2);\n    }\n\n    if (point) {\n      if (this.stickyMode) {\n        var slot = axis.getSlot(axis.pointCategoryIndex(point));\n        lineStart[dim] = lineEnd[dim] = slot.center()[dim];\n      } else {\n        lineStart[dim] = lineEnd[dim] = point[dim];\n      }\n    }\n\n    this.box = box;\n    this.line.moveTo(lineStart).lineTo(lineEnd);\n  };\n\n  Crosshair.prototype.getBox = function getBox() {\n    var axis = this.axis;\n    var axes = axis.pane.axes;\n    var length = axes.length;\n    var vertical = axis.options.vertical;\n    var box = axis.lineBox().clone();\n    var dim = vertical ? X : Y;\n    var axisLineBox;\n\n    for (var i = 0; i < length; i++) {\n      var currentAxis = axes[i];\n\n      if (currentAxis.options.vertical !== vertical) {\n        if (!axisLineBox) {\n          axisLineBox = currentAxis.lineBox().clone();\n        } else {\n          axisLineBox.wrap(currentAxis.lineBox());\n        }\n      }\n    }\n\n    box[dim + 1] = axisLineBox[dim + 1];\n    box[dim + 2] = axisLineBox[dim + 2];\n    return box;\n  };\n\n  Crosshair.prototype.createVisual = function createVisual() {\n    ChartElement.prototype.createVisual.call(this);\n    var options = this.options;\n    this.line = new draw.Path({\n      stroke: {\n        color: options.color,\n        width: options.width,\n        opacity: options.opacity,\n        dashType: options.dashType\n      },\n      visible: false\n    });\n    this.moveLine();\n    this.visual.append(this.line);\n  };\n\n  Crosshair.prototype.destroy = function destroy() {\n    if (this.tooltip) {\n      this.tooltip.destroy();\n    }\n\n    ChartElement.prototype.destroy.call(this);\n  };\n\n  return Crosshair;\n}(ChartElement);\n\nsetDefaultOptions(Crosshair, {\n  color: BLACK,\n  width: 2,\n  zIndex: -1,\n  tooltip: {\n    visible: false\n  }\n});\nexport default Crosshair;","map":null,"metadata":{},"sourceType":"module"}