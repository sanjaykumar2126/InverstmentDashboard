{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Double } from '../axis/double-axis';\n/**\n * Common axis classes\n * @private\n */\n\nvar NiceInterval =\n/** @class */\nfunction (_super) {\n  __extends(NiceInterval, _super);\n\n  function NiceInterval() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Method to calculate numeric datetime interval\n   */\n\n\n  NiceInterval.prototype.calculateDateTimeNiceInterval = function (axis, size, start, end, isChart) {\n    if (isChart === void 0) {\n      isChart = true;\n    }\n\n    var oneDay = 24 * 60 * 60 * 1000;\n    var startDate = new Date(start);\n    var endDate = new Date(end); //var axisInterval ;\n\n    var totalDays = Math.abs((startDate.getTime() - endDate.getTime()) / oneDay);\n    var interval;\n    axis.actualIntervalType = axis.intervalType;\n    var type = axis.intervalType;\n\n    switch (type) {\n      case 'Years':\n        interval = this.calculateNumericNiceInterval(axis, totalDays / 365, size);\n        break;\n\n      case 'Quarter':\n        interval = this.calculateNumericNiceInterval(axis, totalDays / 365 * 4, size);\n        break;\n\n      case 'Months':\n        interval = this.calculateNumericNiceInterval(axis, totalDays / 30, size);\n        break;\n\n      case 'Weeks':\n        interval = this.calculateNumericNiceInterval(axis, totalDays / 7, size);\n        break;\n\n      case 'Days':\n        interval = this.calculateNumericNiceInterval(axis, totalDays, size);\n        break;\n\n      case 'Hours':\n        interval = this.calculateNumericNiceInterval(axis, totalDays * 24, size);\n        break;\n\n      case 'Minutes':\n        interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60, size);\n        break;\n\n      case 'Seconds':\n        interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60 * 60, size);\n        break;\n\n      case 'Auto':\n        interval = this.calculateNumericNiceInterval(axis, totalDays / 365, size);\n\n        if (interval >= 1) {\n          axis.actualIntervalType = 'Years';\n          return interval;\n        }\n\n        interval = this.calculateNumericNiceInterval(axis, totalDays / 365 * 4, size);\n\n        if (interval >= 1 && !isChart) {\n          axis.actualIntervalType = 'Quarter';\n          return interval;\n        }\n\n        interval = this.calculateNumericNiceInterval(axis, totalDays / 30, size);\n\n        if (interval >= 1) {\n          axis.actualIntervalType = 'Months';\n          return interval;\n        }\n\n        interval = this.calculateNumericNiceInterval(axis, totalDays / 7, size);\n\n        if (interval >= 1 && !isChart) {\n          axis.actualIntervalType = 'Weeks';\n          return interval;\n        }\n\n        interval = this.calculateNumericNiceInterval(axis, totalDays, size);\n\n        if (interval >= 1) {\n          axis.actualIntervalType = 'Days';\n          return interval;\n        }\n\n        interval = this.calculateNumericNiceInterval(axis, totalDays * 24, size);\n\n        if (interval >= 1) {\n          axis.actualIntervalType = 'Hours';\n          return interval;\n        }\n\n        interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60, size);\n\n        if (interval >= 1) {\n          axis.actualIntervalType = 'Minutes';\n          return interval;\n        }\n\n        interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60 * 60, size);\n        axis.actualIntervalType = 'Seconds';\n        return interval;\n    }\n\n    return interval;\n  };\n  /**\n   * To get the skeleton for the DateTime axis.\n   * @return {string}\n   * @private\n   */\n\n\n  NiceInterval.prototype.getSkeleton = function (axis, currentValue, previousValue) {\n    var skeleton;\n    var intervalType = axis.actualIntervalType;\n\n    if (axis.skeleton) {\n      return axis.skeleton;\n    }\n\n    if (intervalType === 'Years') {\n      skeleton = axis.isChart ? axis.valueType === 'DateTime' ? 'y' : 'yMMM' : 'y';\n    } else if (intervalType === 'Quarter') {\n      skeleton = 'yMMM';\n    } else if (intervalType === 'Months') {\n      skeleton = axis.isChart ? 'MMMd' : 'MMM';\n    } else if (intervalType === 'Weeks') {\n      skeleton = 'MEd';\n    } else if (intervalType === 'Days') {\n      skeleton = axis.isChart ? this.getDayFormat(axis, currentValue, previousValue) : 'MMMd';\n    } else if (intervalType === 'Hours') {\n      skeleton = axis.isChart ? axis.valueType === 'DateTime' ? 'Hm' : 'EHm' : 'h';\n    } else if (intervalType === 'Minutes') {\n      skeleton = axis.isChart ? 'Hms' : 'hm';\n    } else {\n      skeleton = axis.isChart ? 'Hms' : 'hms';\n    }\n\n    return skeleton;\n  };\n  /**\n   * Get intervalType month format\n   * @param currentValue\n   * @param previousValue\n   */\n\n\n  NiceInterval.prototype.getMonthFormat = function (currentValue, previousValue) {\n    return new Date(currentValue).getFullYear() === new Date(previousValue).getFullYear() ? 'MMM' : 'y MMM';\n  };\n  /**\n   * Get intervalType day label format for the axis\n   * @param axis\n   * @param currentValue\n   * @param previousValue\n   */\n\n\n  NiceInterval.prototype.getDayFormat = function (axis, currentValue, previousValue) {\n    return axis.valueType === 'DateTime' ? new Date(currentValue).getMonth() !== new Date(previousValue).getMonth() ? 'MMMd' : 'd' : 'yMd';\n  };\n  /**\n   * Find label format for axis\n   * @param axis\n   * @param currentValue\n   * @param previousValue\n   * @private\n   */\n\n\n  NiceInterval.prototype.findCustomFormats = function (axis, currentValue, previousValue) {\n    var labelFormat = axis.labelFormat ? axis.labelFormat : '';\n\n    if (axis.isChart && !axis.skeleton && axis.actualIntervalType === 'Months' && !labelFormat) {\n      labelFormat = axis.valueType === 'DateTime' ? this.getMonthFormat(currentValue, previousValue) : 'yMMM';\n    }\n\n    return labelFormat;\n  };\n\n  return NiceInterval;\n}(Double);\n\nexport { NiceInterval };","map":null,"metadata":{},"sourceType":"module"}