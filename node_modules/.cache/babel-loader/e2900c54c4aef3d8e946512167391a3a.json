{"ast":null,"code":"import { Class, setDefaultOptions, defined, deepExtend, limitValue } from '../common';\nimport { BLACK } from '../common/constants';\n\nvar Pointer = function (Class) {\n  function Pointer(scale, userOptions) {\n    Class.call(this);\n    var ref = scale.options;\n    var min = ref.min;\n    var max = ref.max;\n    var options = this.options = deepExtend({}, this.options, userOptions);\n    options.fill = options.color;\n    this.scale = scale;\n\n    if (defined(options.value)) {\n      options.value = limitValue(options.value, min, max);\n    } else {\n      options.value = min;\n    }\n  }\n\n  if (Class) Pointer.__proto__ = Class;\n  Pointer.prototype = Object.create(Class && Class.prototype);\n  Pointer.prototype.constructor = Pointer;\n\n  Pointer.prototype.value = function value(newValue) {\n    var options = this.options;\n    var value = options.value;\n\n    if (arguments.length === 0) {\n      return value;\n    }\n\n    var ref = this.scale.options;\n    var min = ref.min;\n    var max = ref.max;\n    options._oldValue = defined(options._oldValue) ? options.value : min;\n    options.value = limitValue(newValue, min, max);\n\n    if (this.elements) {\n      this.repaint();\n    }\n  };\n\n  return Pointer;\n}(Class);\n\nsetDefaultOptions(Pointer, {\n  color: BLACK\n});\nexport default Pointer;","map":null,"metadata":{},"sourceType":"module"}