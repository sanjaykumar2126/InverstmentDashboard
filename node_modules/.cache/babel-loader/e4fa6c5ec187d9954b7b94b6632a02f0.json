{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { getPoint, withInRange, TransformToVisible } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { SplineBase } from './spline-base';\n/**\n * `SplineSeries` module is used to render the spline series.\n */\n\nvar SplineSeries =\n/** @class */\nfunction (_super) {\n  __extends(SplineSeries, _super);\n\n  function SplineSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render the spline series.\n   * @return {void}\n   * @private\n   */\n\n\n  SplineSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n    var chart = series.chart;\n    var marker = series.marker;\n    var ySpline;\n    var options;\n    var firstPoint = null;\n    var secondPoint = null;\n    var direction = '';\n    var pt1;\n    var pt2;\n    var bpt1;\n    var bpt2;\n    var data;\n    var controlPointCount = 0;\n    var controlPoint1;\n    var controlPoint2;\n    var startPoint = 'M';\n    var points = this.filterEmptyPoints(series);\n    var previous;\n    var getCoordinate = series.chart.chartAreaType === 'PolarRadar' ? TransformToVisible : getPoint;\n\n    for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n      var point = points_1[_i];\n      previous = this.getPreviousIndex(points, point.index - 1, series);\n      point.symbolLocations = [];\n      point.regions = [];\n\n      if (point.visible && withInRange(points[previous], point, points[this.getNextIndex(points, point.index - 1, series)], series)) {\n        if (firstPoint !== null) {\n          data = series.drawPoints[previous];\n          controlPoint1 = data.controlPoint1;\n          controlPoint2 = data.controlPoint2;\n          pt1 = getCoordinate(firstPoint.xValue, firstPoint.yValue, xAxis, yAxis, isInverted, series);\n          pt2 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n          bpt1 = getCoordinate(controlPoint1.x, controlPoint1.y, xAxis, yAxis, isInverted, series);\n          bpt2 = getCoordinate(controlPoint2.x, controlPoint2.y, xAxis, yAxis, isInverted, series);\n          direction = direction.concat(startPoint + ' ' + pt1.x + ' ' + pt1.y + ' ' + 'C' + ' ' + bpt1.x + ' ' + bpt1.y + ' ' + bpt2.x + ' ' + bpt2.y + ' ' + pt2.x + ' ' + pt2.y + ' ');\n          startPoint = 'L';\n        }\n\n        firstPoint = point;\n        this.storePointLocation(point, series, isInverted, getCoordinate);\n      } else {\n        startPoint = 'M';\n        firstPoint = null;\n        point.symbolLocations = [];\n      }\n    }\n\n    var name = series.category === 'TrendLine' ? series.chart.element.id + '_Series_' + series.sourceIndex + '_TrendLine_' + series.index : series.chart.element.id + '_Series_' + series.index;\n    options = new PathOption(name, 'transparent', series.width, series.interior, series.opacity, series.dashArray, direction);\n    this.appendLinePath(options, series, '');\n    this.renderMarker(series);\n  };\n  /**\n   * Get module name.\n   */\n\n\n  SplineSeries.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'SplineSeries';\n  };\n  /**\n   * To destroy the spline.\n   * @return {void}\n   * @private\n   */\n\n\n  SplineSeries.prototype.destroy = function (chart) {\n    /**\n     * Destroy method calling here\n     */\n  };\n\n  return SplineSeries;\n}(SplineBase);\n\nexport { SplineSeries };","map":null,"metadata":{},"sourceType":"module"}