{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { getPoint, withInRange, ChartLocation } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { LineBase } from './line-base';\n/**\n * `StepAreaSeries` Module used to render the step area series.\n */\n\nvar StepAreaSeries =\n/** @class */\nfunction (_super) {\n  __extends(StepAreaSeries, _super);\n\n  function StepAreaSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render StepArea series.\n   * @return {void}\n   * @private\n   */\n\n\n  StepAreaSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n    var currentPoint;\n    var secondPoint;\n    var start = null;\n    var direction = '';\n    var pointsLength = series.points.length;\n    var origin = Math.max(series.yAxis.visibleRange.min, 0);\n    var options;\n    var point;\n    var xValue;\n    var lineLength;\n    var prevPoint = null;\n\n    if (xAxis.valueType === 'Category' && xAxis.labelPlacement === 'BetweenTicks') {\n      lineLength = 0.5;\n    } else {\n      lineLength = 0;\n    }\n\n    for (var i = 0; i < pointsLength; i++) {\n      point = series.points[i];\n      xValue = point.xValue;\n      point.symbolLocations = [];\n      point.regions = [];\n\n      if (point.visible && withInRange(series.points[i - 1], point, series.points[i + 1], series)) {\n        if (start === null) {\n          start = new ChartLocation(xValue, 0); // Start point for the current path\n\n          currentPoint = getPoint(xValue - lineLength, origin, xAxis, yAxis, isInverted);\n          direction += 'M' + ' ' + currentPoint.x + ' ' + currentPoint.y + ' ';\n          currentPoint = getPoint(xValue - lineLength, point.yValue, xAxis, yAxis, isInverted);\n          direction += 'L' + ' ' + currentPoint.x + ' ' + currentPoint.y + ' ';\n        } // First Point to draw the Steparea path\n\n\n        if (prevPoint != null) {\n          currentPoint = getPoint(point.xValue, point.yValue, xAxis, yAxis, isInverted);\n          secondPoint = getPoint(prevPoint.xValue, prevPoint.yValue, xAxis, yAxis, isInverted);\n          direction += 'L' + ' ' + currentPoint.x + ' ' + secondPoint.y + ' L' + ' ' + currentPoint.x + ' ' + currentPoint.y + ' ';\n        } else if (series.emptyPointSettings.mode === 'Gap') {\n          currentPoint = getPoint(point.xValue, point.yValue, xAxis, yAxis, isInverted);\n          direction += 'L' + ' ' + currentPoint.x + ' ' + currentPoint.y + ' ';\n        }\n\n        this.storePointLocation(point, series, isInverted, getPoint);\n        prevPoint = point;\n      }\n\n      if (series.points[i + 1] && !series.points[i + 1].visible && series.emptyPointSettings.mode !== 'Drop') {\n        // current start point\n        currentPoint = getPoint(xValue + lineLength, origin, xAxis, yAxis, isInverted);\n        direction += 'L' + ' ' + currentPoint.x + ' ' + currentPoint.y;\n        start = null;\n        prevPoint = null;\n      }\n    }\n\n    if (pointsLength > 1 && direction !== '') {\n      start = {\n        'x': series.points[pointsLength - 1].xValue + lineLength,\n        'y': series.points[pointsLength - 1].yValue\n      };\n      secondPoint = getPoint(start.x, start.y, xAxis, yAxis, isInverted);\n      direction += 'L' + ' ' + secondPoint.x + ' ' + secondPoint.y + ' ';\n      start = {\n        'x': series.points[pointsLength - 1].xValue + lineLength,\n        'y': origin\n      };\n      secondPoint = getPoint(start.x, start.y, xAxis, yAxis, isInverted);\n      direction += 'L' + ' ' + secondPoint.x + ' ' + secondPoint.y + ' ';\n    } else {\n      direction = '';\n    }\n\n    options = new PathOption(series.chart.element.id + '_Series_' + series.index, series.interior, series.border.width, series.border.color, series.opacity, series.dashArray, direction);\n    this.appendLinePath(options, series, '');\n    this.renderMarker(series);\n  };\n  /**\n   * Animates the series.\n   * @param  {Series} series - Defines the series to animate.\n   * @return {void}\n   */\n\n\n  StepAreaSeries.prototype.doAnimation = function (series) {\n    var option = series.animation;\n    this.doLinearAnimation(series, option);\n  };\n  /**\n   * To destroy the step Area series.\n   * @return {void}\n   * @private\n   */\n\n\n  StepAreaSeries.prototype.destroy = function (chart) {\n    /**\n     * Destroy method calling here\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  StepAreaSeries.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'StepAreaSeries';\n  };\n\n  return StepAreaSeries;\n}(LineBase);\n\nexport { StepAreaSeries };","map":null,"metadata":{},"sourceType":"module"}