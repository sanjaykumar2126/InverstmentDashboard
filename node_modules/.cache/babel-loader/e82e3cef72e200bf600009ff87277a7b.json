{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport { ChartElement, Box, Point } from '../../core';\nimport PointEventsMixin from '../mixins/point-events-mixin';\nimport { WHITE } from '../../common/constants';\nimport { deepExtend, setDefaultOptions } from '../../common';\n\nvar FunnelSegment = function (ChartElement) {\n  function FunnelSegment(value, options, segmentOptions) {\n    ChartElement.call(this, options);\n    this.value = value;\n    this.options.index = segmentOptions.index;\n  }\n\n  if (ChartElement) FunnelSegment.__proto__ = ChartElement;\n  FunnelSegment.prototype = Object.create(ChartElement && ChartElement.prototype);\n  FunnelSegment.prototype.constructor = FunnelSegment;\n\n  FunnelSegment.prototype.reflow = function reflow(chartBox) {\n    var points = this.points;\n    var label = this.children[0];\n    this.box = new Box(points[0].x, points[0].y, points[1].x, points[2].y);\n\n    if (label) {\n      label.reflow(new Box(chartBox.x1, points[0].y, chartBox.x2, points[2].y));\n    }\n  };\n\n  FunnelSegment.prototype.createVisual = function createVisual() {\n    var this$1 = this;\n    var options = this.options;\n    var visual;\n    ChartElement.prototype.createVisual.call(this);\n\n    if (options.visual) {\n      visual = options.visual({\n        category: this.category,\n        dataItem: this.dataItem,\n        value: this.value,\n        series: this.series,\n        percentage: this.percentage,\n        points: this.points,\n        options: options,\n        sender: this.getSender(),\n        createVisual: function () {\n          return this$1.createPath();\n        }\n      });\n    } else {\n      visual = this.createPath();\n    }\n\n    if (visual) {\n      this.visual.append(visual);\n    }\n  };\n\n  FunnelSegment.prototype.createPath = function createPath() {\n    var options = this.options;\n    var border = options.border;\n    var path = draw.Path.fromPoints(this.points, {\n      fill: {\n        color: options.color,\n        opacity: options.opacity\n      },\n      stroke: {\n        color: border.color,\n        opacity: border.opacity,\n        width: border.width\n      }\n    }).close();\n    return path;\n  };\n\n  FunnelSegment.prototype.createHighlight = function createHighlight(style) {\n    return draw.Path.fromPoints(this.points, style);\n  };\n\n  FunnelSegment.prototype.highlightVisual = function highlightVisual() {\n    return this.visual.children[0];\n  };\n\n  FunnelSegment.prototype.highlightVisualArgs = function highlightVisualArgs() {\n    var path = draw.Path.fromPoints(this.points).close();\n    return {\n      options: this.options,\n      path: path\n    };\n  };\n\n  FunnelSegment.prototype.tooltipAnchor = function tooltipAnchor() {\n    var box = this.box;\n    return {\n      point: new Point(box.center().x, box.y1),\n      align: {\n        horizontal: \"center\",\n        vertical: \"top\"\n      }\n    };\n  };\n\n  FunnelSegment.prototype.formatValue = function formatValue(format) {\n    var point = this;\n    return point.owner.formatPointValue(point, format);\n  };\n\n  return FunnelSegment;\n}(ChartElement);\n\nsetDefaultOptions(FunnelSegment, {\n  color: WHITE,\n  border: {\n    width: 1\n  }\n});\ndeepExtend(FunnelSegment.prototype, PointEventsMixin);\nexport default FunnelSegment;","map":null,"metadata":{},"sourceType":"module"}