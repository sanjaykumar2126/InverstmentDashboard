{"ast":null,"code":"/**\n * Cartesian chart renderer for financial chart\n */\nimport { Chart, getElement } from '../../index';\nimport { Size } from '@syncfusion/ej2-svg-base';\nimport { remove, extend } from '@syncfusion/ej2-base';\n/** @private */\n\nvar CartesianChart =\n/** @class */\nfunction () {\n  function CartesianChart(chart) {\n    this.stockChart = chart;\n  }\n\n  CartesianChart.prototype.initializeChart = function (chartArgsData) {\n    var _this = this;\n\n    var stockChart = this.stockChart;\n\n    if (!stockChart.chartObject) {\n      stockChart.chartObject = stockChart.renderer.createGroup({\n        id: stockChart.element.id + '_stockChart_chart'\n      });\n      stockChart.mainObject.appendChild(stockChart.chartObject);\n    } else {\n      var chartElement = document.getElementById(stockChart.chartObject.id);\n\n      while (chartElement.firstChild) {\n        chartElement.removeChild(chartElement.firstChild);\n      }\n\n      if (getElement(stockChart.chartObject + '_tooltip')) {\n        remove(getElement(stockChart.chartObject + '_tooltip'));\n      }\n    }\n\n    this.cartesianChartSize = this.calculateChartSize();\n    stockChart.chart = new Chart({\n      load: function (args) {\n        if (stockChart.tooltip.header === null) {\n          args.chart.tooltip.header = '<b>${point.x}</b>';\n        }\n\n        if (stockChart.tooltip.format === null) {\n          args.chart.tooltip.format = 'High : <b>${point.high}</b><br/>Low :' + ' <b>${point.low}</b><br/>Open : <b>${point.open}</b><br/>Close : <b>${point.close}</b>';\n\n          if (stockChart.series[0].volume !== '') {\n            args.chart.tooltip.format += '<br/>Volume : <b>${point.volume}</b>';\n          }\n        }\n\n        args.chart.animateSeries = false;\n      },\n      chartArea: stockChart.chartArea,\n      margin: this.findMargin(stockChart),\n      primaryXAxis: this.copyObject(stockChart.primaryXAxis),\n      primaryYAxis: this.copyObject(stockChart.primaryYAxis),\n      rows: stockChart.rows,\n      indicators: stockChart.indicators,\n      axes: stockChart.axes,\n      tooltipRender: function (args) {\n        _this.stockChart.trigger('tooltipRender', args);\n      },\n      axisLabelRender: function (args) {\n        _this.stockChart.trigger('axisLabelRender', args);\n      },\n      seriesRender: function (args) {\n        if (args.data && _this.stockChart.startValue && _this.stockChart.endValue) {\n          args.data = args.data.filter(function (data) {\n            return new Date(Date.parse(data[args.series.xName])).getTime() >= _this.stockChart.startValue && new Date(Date.parse(data[args.series.xName])).getTime() <= _this.stockChart.endValue;\n          });\n        }\n\n        args.data = chartArgsData ? chartArgsData : args.data; //args.data = this.stockChart.findCurrentData(args.data ,args.series.xName);\n\n        _this.stockChart.trigger('seriesRender', args);\n      },\n      pointClick: function (args) {\n        _this.stockChart.trigger('pointClick', args);\n      },\n      pointMove: function (args) {\n        _this.stockChart.trigger('pointMove', args);\n      },\n      dataSource: stockChart.dataSource,\n      series: this.findSeriesCollection(stockChart.series),\n      zoomSettings: this.copyObject(stockChart.zoomSettings),\n      tooltip: stockChart.tooltip,\n      crosshair: stockChart.crosshair,\n      height: this.cartesianChartSize.height.toString(),\n      selectedDataIndexes: stockChart.selectedDataIndexes,\n      selectionMode: stockChart.selectionMode,\n      isMultiSelect: stockChart.isMultiSelect,\n      annotations: stockChart.annotations,\n      theme: stockChart.theme,\n      legendSettings: {\n        visible: false\n      },\n      zoomComplete: function (args) {\n        if (args.axis.valueType === 'DateTime' && stockChart.rangeNavigator) {\n          _this.stockChart.zoomChange = true;\n\n          var newRange = _this.calculateUpdatedRange(args.currentZoomFactor, args.currentZoomPosition, args.axis);\n\n          stockChart.rangeSelector.sliderChange(newRange.start, newRange.end);\n        }\n      }\n    });\n\n    if (stockChart.indicators.length !== 0) {\n      if (stockChart.isSelect) {\n        for (var i = 0; i < stockChart.indicators.length; i++) {\n          stockChart.chart.indicators[i].animation.enable = false;\n          stockChart.chart.indicators[i].dataSource = extend([], stockChart.chart.series[0].dataSource, null, true);\n        }\n      }\n\n      stockChart.isSelect = true;\n    }\n\n    stockChart.chart.stockChart = stockChart;\n    stockChart.chart.appendTo(stockChart.chartObject);\n  };\n\n  CartesianChart.prototype.findMargin = function (stockChart) {\n    var margin = {};\n    margin.top = stockChart.margin.top * 2;\n    margin.left = stockChart.margin.left;\n    margin.right = stockChart.margin.right;\n    margin.bottom = stockChart.margin.bottom;\n    return margin;\n  };\n\n  CartesianChart.prototype.findSeriesCollection = function (series) {\n    var chartSeries = [];\n\n    for (var i = 0, len = series.length; i < len; i++) {\n      chartSeries.push(series[i]);\n      chartSeries[i].high = series[i].high;\n      chartSeries[i].low = series[i].low;\n      chartSeries[i].open = series[i].open;\n      chartSeries[i].close = series[i].close;\n      chartSeries[i].xName = series[i].xName;\n      chartSeries[i].volume = series[i].volume;\n      chartSeries[i].animation = series[i].animation;\n\n      if (series[i].localData) {\n        chartSeries[i].dataSource = series[i].localData;\n      }\n\n      if (chartSeries[i].type !== 'HiloOpenClose' && chartSeries[i].type !== 'Candle' && chartSeries[i].yName === 'volume') {\n        chartSeries[i].enableTooltip = false;\n      }\n    }\n\n    return chartSeries;\n  };\n\n  CartesianChart.prototype.calculateChartSize = function () {\n    var stockChart = this.stockChart;\n    return new Size(stockChart.availableSize.width, stockChart.enablePeriodSelector && stockChart.enableSelector ? stockChart.availableSize.height - stockChart.toolbarHeight - 80 : stockChart.enableSelector && !stockChart.enablePeriodSelector ? stockChart.availableSize.height - 80 : stockChart.enablePeriodSelector && !stockChart.enableSelector ? stockChart.availableSize.height - stockChart.toolbarHeight : stockChart.availableSize.height);\n  };\n\n  CartesianChart.prototype.calculateUpdatedRange = function (zoomFactor, zoomPosition, axis) {\n    var start;\n    var end; //if (zoomFactor < 1 || zoomPosition > 0) {\n\n    var chartRange = axis.actualRange;\n    var inversed = false;\n\n    if (!inversed) {\n      start = chartRange.min + zoomPosition * chartRange.delta;\n      end = start + zoomFactor * chartRange.delta;\n    } else {\n      start = chartRange.max - zoomPosition * chartRange.delta;\n      end = start - zoomFactor * chartRange.delta;\n    } //}\n\n\n    var result = {\n      start: start,\n      end: end\n    };\n    return result;\n  };\n  /**\n   * Cartesian chart refreshes based on start and end value\n   * @param stockChart\n   * @param start\n   * @param end\n   */\n\n\n  CartesianChart.prototype.cartesianChartRefresh = function (stockChart, start, end, data) {\n    stockChart.cartesianChart.initializeChart(data);\n  };\n\n  CartesianChart.prototype.copyObject = function (originalObject) {\n    return extend({}, originalObject, {}, true);\n  };\n\n  return CartesianChart;\n}();\n\nexport { CartesianChart };","map":null,"metadata":{},"sourceType":"module"}