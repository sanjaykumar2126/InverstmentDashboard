{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Series } from '../series/chart-series';\nimport { ColumnBase } from './column-base';\nimport { Axis } from '../axis/axis';\n/**\n * `Pareto series` module used to render the Pareto series.\n */\n\nvar ParetoSeries =\n/** @class */\nfunction (_super) {\n  __extends(ParetoSeries, _super);\n\n  function ParetoSeries() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.paretoAxes = [];\n    return _this;\n  }\n  /**\n   * Defines the Line initialization\n   */\n\n\n  ParetoSeries.prototype.initSeries = function (targetSeries, chart) {\n    var series = new Series(chart, 'series', targetSeries.properties, true);\n    series.name = 'Pareto';\n    series.yAxisName = targetSeries.yAxisName + '_CumulativeAxis';\n    series.category = 'Pareto';\n    targetSeries.category = 'Pareto';\n    series.type = 'Line';\n    series.interior = chart.themeStyle.errorBar;\n    chart.visibleSeries.push(series);\n    this.initAxis(targetSeries, series, chart);\n  };\n  /**\n   * Defines the Axis initialization for Line\n   */\n\n\n  ParetoSeries.prototype.initAxis = function (paretoSeries, targetSeries, chart) {\n    var isExist = this.paretoAxes.some(function (currentAxis) {\n      return currentAxis.name === targetSeries.yAxisName;\n    });\n\n    if (!isExist) {\n      var secondaryAxis = paretoSeries.yAxisName ? chart.axes.filter(function (axis) {\n        return axis.name === paretoSeries.yAxisName;\n      })[0] : chart.primaryYAxis;\n      var newAxis = new Axis(chart, 'axis', {\n        name: targetSeries.yAxisName,\n        majorGridLines: {\n          width: 0\n        },\n        majorTickLines: secondaryAxis.majorTickLines,\n        lineStyle: secondaryAxis.lineStyle,\n        minimum: 0,\n        maximum: 100,\n        rowIndex: secondaryAxis.rowIndex,\n        opposedPosition: true,\n        labelFormat: '{value}%'\n      });\n      this.paretoAxes.push(newAxis);\n    }\n  };\n  /**\n   * Render Pareto series.\n   * @return {void}\n   * @private\n   */\n\n\n  ParetoSeries.prototype.render = function (series) {\n    series.chart.columnSeriesModule.render(series);\n  };\n  /**\n   * To perform the cumulative calculation for pareto series.\n   */\n\n\n  ParetoSeries.prototype.performCumulativeCalculation = function (json, series) {\n    var data = json;\n    var sum = 0;\n    var count = 0;\n    var length = data.length;\n\n    for (var i = 0; i < length; i++) {\n      sum += data[i][series.yName];\n    }\n\n    for (var i = 0; i < length; i++) {\n      count = count + data[i][series.yName];\n      data[i][series.yName] = Math.round(count / sum * 100);\n    }\n\n    return data;\n  };\n  /**\n   * Animates the series.\n   * @param  {Series} series - Defines the series to animate.\n   * @return {void}\n   */\n\n\n  ParetoSeries.prototype.doAnimation = function (series) {\n    this.animate(series);\n  };\n  /**\n   * Get module name.\n   */\n\n\n  ParetoSeries.prototype.getModuleName = function () {\n    return 'ParetoSeries';\n    /**\n     * return the module name\n     */\n  };\n  /**\n   * To destroy the pareto series.\n   * @return {void}\n   * @private\n   */\n\n\n  ParetoSeries.prototype.destroy = function (chart) {\n    /**\n     * Destroy method performed here\n     */\n  };\n\n  return ParetoSeries;\n}(ColumnBase);\n\nexport { ParetoSeries };","map":null,"metadata":{},"sourceType":"module"}