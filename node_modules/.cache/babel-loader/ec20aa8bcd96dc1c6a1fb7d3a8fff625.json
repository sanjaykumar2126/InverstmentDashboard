{"ast":null,"code":"import { COORD_PRECISION } from '../common/constants';\nimport { Class, rad, round } from '../common';\n\nvar Point = function (Class) {\n  function Point(x, y) {\n    Class.call(this);\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n\n  if (Class) Point.__proto__ = Class;\n  Point.prototype = Object.create(Class && Class.prototype);\n  Point.prototype.constructor = Point;\n\n  Point.prototype.clone = function clone() {\n    return new Point(this.x, this.y);\n  };\n\n  Point.prototype.equals = function equals(point) {\n    return point && this.x === point.x && this.y === point.y;\n  };\n\n  Point.prototype.rotate = function rotate(center, degrees) {\n    var theta = rad(degrees);\n    var cosT = Math.cos(theta);\n    var sinT = Math.sin(theta);\n    var cx = center.x;\n    var cy = center.y;\n    var ref = this;\n    var x = ref.x;\n    var y = ref.y;\n    this.x = round(cx + (x - cx) * cosT + (y - cy) * sinT, COORD_PRECISION);\n    this.y = round(cy + (y - cy) * cosT - (x - cx) * sinT, COORD_PRECISION);\n    return this;\n  };\n\n  Point.prototype.multiply = function multiply(a) {\n    this.x *= a;\n    this.y *= a;\n    return this;\n  };\n\n  Point.prototype.distanceTo = function distanceTo(point) {\n    var dx = this.x - point.x;\n    var dy = this.y - point.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  Point.onCircle = function onCircle(center, angle, radius) {\n    var radians = rad(angle);\n    return new Point(center.x - radius * Math.cos(radians), center.y - radius * Math.sin(radians));\n  };\n\n  return Point;\n}(Class);\n\nexport default Point;","map":null,"metadata":{},"sourceType":"module"}