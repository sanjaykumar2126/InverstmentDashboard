{"ast":null,"code":"import { geometry as geo, drawing } from '@progress/kendo-drawing';\nimport { deepExtend, defined } from '../../common';\nimport { ARROW_POINTER } from '../constants';\nimport LinearPointer from './linear-pointer';\nimport ArrowLinearPointerAnimation from './arrow-linear-pointer-animation';\nvar Point = geo.Point;\nvar Path = drawing.Path;\n\nvar ArrowLinearPointer = function (LinearPointer) {\n  function ArrowLinearPointer(scale, options) {\n    LinearPointer.call(this, scale, options);\n\n    if (!defined(this.options.size)) {\n      this.options.size = this.scale.options.majorTicks.size * 0.6;\n    }\n  }\n\n  if (LinearPointer) ArrowLinearPointer.__proto__ = LinearPointer;\n  ArrowLinearPointer.prototype = Object.create(LinearPointer && LinearPointer.prototype);\n  ArrowLinearPointer.prototype.constructor = ArrowLinearPointer;\n\n  ArrowLinearPointer.prototype.pointerShape = function pointerShape() {\n    var ref = this;\n    var scale = ref.scale;\n    var size = ref.options.size;\n    var halfSize = size / 2;\n    var sign = scale.options.mirror ? -1 : 1;\n    var shape;\n\n    if (scale.options.vertical) {\n      shape = [new Point(0, 0 - halfSize), new Point(0 - sign * size, 0), new Point(0, 0 + halfSize)];\n    } else {\n      shape = [new Point(0 - halfSize, 0), new Point(0, 0 + sign * size), new Point(0 + halfSize, 0)];\n    }\n\n    return shape;\n  };\n\n  ArrowLinearPointer.prototype.repaint = function repaint() {\n    var ref = this;\n    var scale = ref.scale;\n    var options = ref.options;\n    var animation = new ArrowLinearPointerAnimation(this.elements, deepExtend(options.animation, {\n      vertical: scale.options.vertical,\n      mirror: scale.options.mirror,\n      margin: this._margin(options.margin),\n      from: scale.getSlot(options._oldValue),\n      to: scale.getSlot(options.value)\n    }));\n\n    if (options.animation.transitions === false) {\n      animation.options.duration = 0;\n    }\n\n    animation.setup();\n    animation.play();\n  };\n\n  ArrowLinearPointer.prototype.render = function render() {\n    var ref = this;\n    var scale = ref.scale;\n    var options = ref.options;\n    var elementOptions = this.getElementOptions();\n    var shape = this.pointerShape(options.value);\n    options.animation.type = ARROW_POINTER;\n    var elements = new Path({\n      stroke: elementOptions.stroke,\n      fill: elementOptions.fill\n    }).moveTo(shape[0]).lineTo(shape[1]).lineTo(shape[2]).close();\n    var slot = scale.getSlot(options.value);\n    elements.transform(geo.transform().translate(slot.x1, slot.y1));\n    this.elements = elements;\n    return elements;\n  };\n\n  return ArrowLinearPointer;\n}(LinearPointer);\n\nexport default ArrowLinearPointer;","map":null,"metadata":{},"sourceType":"module"}