{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; /// <reference path='../series/chart-series-model.d.ts' />\n\n\nimport { Property, Complex } from '@syncfusion/ej2-base';\nimport { Connector } from '../../common/model/base';\nimport { SeriesBase } from '../series/chart-series';\nimport { firstToLowerCase } from '../../common/utils/helper';\nimport { Rect } from '@syncfusion/ej2-svg-base';\n/**\n * Defines how to represent the market trend using technical indicators\n */\n\nvar TechnicalIndicator =\n/** @class */\nfunction (_super) {\n  __extends(TechnicalIndicator, _super);\n\n  function TechnicalIndicator() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** @private */\n\n\n    _this.clipRect = new Rect(0, 0, 0, 0);\n    return _this;\n  }\n  /** @private */\n\n\n  TechnicalIndicator.prototype.setDataSource = function (series, chart) {\n    if (series) {\n      this.xData = series.xData;\n      this.yData = series.yData;\n      this.points = series.points;\n    }\n\n    var type = firstToLowerCase(this.type);\n    chart[type + 'IndicatorModule'].initDataSource(this, chart);\n    chart.visibleSeriesCount += this.targetSeries.length;\n  };\n\n  __decorate([Property('Sma')], TechnicalIndicator.prototype, \"type\", void 0);\n\n  __decorate([Property(14)], TechnicalIndicator.prototype, \"period\", void 0);\n\n  __decorate([Property(14)], TechnicalIndicator.prototype, \"kPeriod\", void 0);\n\n  __decorate([Property(3)], TechnicalIndicator.prototype, \"dPeriod\", void 0);\n\n  __decorate([Property(80)], TechnicalIndicator.prototype, \"overBought\", void 0);\n\n  __decorate([Property(20)], TechnicalIndicator.prototype, \"overSold\", void 0);\n\n  __decorate([Property(2)], TechnicalIndicator.prototype, \"standardDeviation\", void 0);\n\n  __decorate([Property('Close')], TechnicalIndicator.prototype, \"field\", void 0);\n\n  __decorate([Property(12)], TechnicalIndicator.prototype, \"slowPeriod\", void 0);\n\n  __decorate([Property(26)], TechnicalIndicator.prototype, \"fastPeriod\", void 0);\n\n  __decorate([Property(true)], TechnicalIndicator.prototype, \"showZones\", void 0);\n\n  __decorate([Complex({\n    color: '#ff9933',\n    width: 2\n  }, Connector)], TechnicalIndicator.prototype, \"macdLine\", void 0);\n\n  __decorate([Property('Both')], TechnicalIndicator.prototype, \"macdType\", void 0);\n\n  __decorate([Property('#2ecd71')], TechnicalIndicator.prototype, \"macdPositiveColor\", void 0);\n\n  __decorate([Property('#e74c3d')], TechnicalIndicator.prototype, \"macdNegativeColor\", void 0);\n\n  __decorate([Property('rgba(211,211,211,0.25)')], TechnicalIndicator.prototype, \"bandColor\", void 0);\n\n  __decorate([Complex({\n    color: '#ffb735',\n    width: 1\n  }, Connector)], TechnicalIndicator.prototype, \"upperLine\", void 0);\n\n  __decorate([Complex({\n    color: '#f2ec2f',\n    width: 1\n  }, Connector)], TechnicalIndicator.prototype, \"lowerLine\", void 0);\n\n  __decorate([Complex({\n    color: '#f2ec2f',\n    width: 1\n  }, Connector)], TechnicalIndicator.prototype, \"periodLine\", void 0);\n\n  __decorate([Property('')], TechnicalIndicator.prototype, \"seriesName\", void 0);\n\n  return TechnicalIndicator;\n}(SeriesBase);\n\nexport { TechnicalIndicator };","map":null,"metadata":{},"sourceType":"module"}