{"ast":null,"code":"import { geometry as geom, Color } from '@progress/kendo-drawing';\nimport { ChartElement, TextBox, ShapeElement, Box, Point } from '../../core';\nimport PointEventsMixin from '../mixins/point-events-mixin';\nimport NoteMixin from '../mixins/note-mixin';\nimport { LINE_MARKER_SIZE, FADEIN, INITIAL_ANIMATION_DURATION, BORDER_BRIGHTNESS, TOOLTIP_OFFSET, ABOVE, BELOW } from '../constants';\nimport { WHITE, CIRCLE, CENTER, TOP, BOTTOM, LEFT, HIGHLIGHT_ZINDEX } from '../../common/constants';\nimport { deepExtend, defined, getTemplate, valueOrDefault, getSpacing } from '../../common';\n\nvar LinePoint = function (ChartElement) {\n  function LinePoint(value, options) {\n    ChartElement.call(this);\n    this.value = value;\n    this.options = options;\n    this.aboveAxis = valueOrDefault(this.options.aboveAxis, true);\n    this.tooltipTracking = true;\n  }\n\n  if (ChartElement) LinePoint.__proto__ = ChartElement;\n  LinePoint.prototype = Object.create(ChartElement && ChartElement.prototype);\n  LinePoint.prototype.constructor = LinePoint;\n\n  LinePoint.prototype.render = function render() {\n    var ref = this.options;\n    var markers = ref.markers;\n    var labels = ref.labels;\n\n    if (this._rendered) {\n      return;\n    }\n\n    this._rendered = true;\n\n    if (markers.visible && markers.size) {\n      this.marker = this.createMarker();\n      this.append(this.marker);\n    }\n\n    if (labels.visible) {\n      var labelTemplate = getTemplate(labels);\n      var pointData = this.pointData();\n      var labelText = this.value;\n\n      if (labelTemplate) {\n        labelText = labelTemplate(pointData);\n      } else if (labels.format) {\n        labelText = this.formatValue(labels.format);\n      }\n\n      this.label = new TextBox(labelText, deepExtend({\n        align: CENTER,\n        vAlign: CENTER,\n        margin: {\n          left: 5,\n          right: 5\n        },\n        zIndex: valueOrDefault(labels.zIndex, this.series.zIndex)\n      }, labels), pointData);\n      this.append(this.label);\n    }\n\n    this.createNote();\n\n    if (this.errorBar) {\n      this.append(this.errorBar);\n    }\n  };\n\n  LinePoint.prototype.markerBorder = function markerBorder() {\n    var options = this.options.markers;\n    var background = options.background;\n    var border = deepExtend({\n      color: this.color\n    }, options.border);\n\n    if (!defined(border.color)) {\n      border.color = new Color(background).brightness(BORDER_BRIGHTNESS).toHex();\n    }\n\n    return border;\n  };\n\n  LinePoint.prototype.createVisual = function createVisual() {};\n\n  LinePoint.prototype.createMarker = function createMarker() {\n    var options = this.options.markers;\n    var marker = new ShapeElement({\n      type: options.type,\n      width: options.size,\n      height: options.size,\n      rotation: options.rotation,\n      background: options.background,\n      border: this.markerBorder(),\n      opacity: options.opacity,\n      zIndex: valueOrDefault(options.zIndex, this.series.zIndex),\n      animation: options.animation,\n      visual: options.visual\n    }, {\n      dataItem: this.dataItem,\n      value: this.value,\n      series: this.series,\n      category: this.category\n    });\n    return marker;\n  };\n\n  LinePoint.prototype.markerBox = function markerBox() {\n    if (!this.marker) {\n      this.marker = this.createMarker();\n      this.marker.reflow(this._childBox);\n    }\n\n    return this.marker.box;\n  };\n\n  LinePoint.prototype.reflow = function reflow(targetBox) {\n    var this$1 = this;\n    var ref = this;\n    var options = ref.options;\n    var aboveAxis = ref.aboveAxis;\n    var vertical = options.vertical;\n    this.render();\n    this.box = targetBox;\n    var childBox = targetBox.clone();\n\n    if (vertical) {\n      if (aboveAxis) {\n        childBox.y1 -= childBox.height();\n      } else {\n        childBox.y2 += childBox.height();\n      }\n    } else {\n      if (aboveAxis) {\n        childBox.x1 += childBox.width();\n      } else {\n        childBox.x2 -= childBox.width();\n      }\n    }\n\n    this._childBox = childBox;\n\n    if (this.marker) {\n      this.marker.reflow(childBox);\n    }\n\n    this.reflowLabel(childBox);\n\n    if (this.errorBars) {\n      for (var i = 0; i < this.errorBars.length; i++) {\n        this$1.errorBars[i].reflow(childBox);\n      }\n    }\n\n    if (this.note) {\n      var noteTargetBox = this.markerBox();\n\n      if (!(options.markers.visible && options.markers.size)) {\n        var center = noteTargetBox.center();\n        noteTargetBox = new Box(center.x, center.y, center.x, center.y);\n      }\n\n      this.note.reflow(noteTargetBox);\n    }\n  };\n\n  LinePoint.prototype.reflowLabel = function reflowLabel(box) {\n    var ref = this;\n    var options = ref.options;\n    var label = ref.label;\n    var anchor = options.labels.position;\n\n    if (label) {\n      anchor = anchor === ABOVE ? TOP : anchor;\n      anchor = anchor === BELOW ? BOTTOM : anchor;\n      label.reflow(box);\n      label.box.alignTo(this.markerBox(), anchor);\n      label.reflow(label.box);\n    }\n  };\n\n  LinePoint.prototype.createHighlight = function createHighlight() {\n    var markers = this.options.highlight.markers;\n    var defaultColor = this.markerBorder().color;\n    var options = this.options.markers;\n    var size = options.size + (options.border.width || 0) + (markers.border.width || 0);\n    var shadow = new ShapeElement({\n      type: options.type,\n      width: size,\n      height: size,\n      rotation: options.rotation,\n      background: markers.color || defaultColor,\n      border: {\n        color: markers.border.color,\n        width: markers.border.width,\n        opacity: valueOrDefault(markers.border.opacity, 1)\n      },\n      opacity: valueOrDefault(markers.opacity, 1)\n    });\n    shadow.reflow(this._childBox);\n    return shadow.getElement();\n  };\n\n  LinePoint.prototype.highlightVisual = function highlightVisual() {\n    return (this.marker || {}).visual;\n  };\n\n  LinePoint.prototype.highlightVisualArgs = function highlightVisualArgs() {\n    var marker = this.marker;\n    var visual, rect;\n\n    if (marker) {\n      rect = marker.paddingBox.toRect();\n      visual = marker.visual;\n    } else {\n      var size = this.options.markers.size;\n      var halfSize = size / 2;\n      var center = this.box.center();\n      rect = new geom.Rect([center.x - halfSize, center.y - halfSize], [size, size]);\n    }\n\n    return {\n      options: this.options,\n      rect: rect,\n      visual: visual\n    };\n  };\n\n  LinePoint.prototype.tooltipAnchor = function tooltipAnchor() {\n    var markerBox = this.markerBox();\n    var clipBox = this.owner.pane.clipBox();\n    var showTooltip = !clipBox || clipBox.overlaps(markerBox);\n\n    if (showTooltip) {\n      var x = markerBox.x2 + TOOLTIP_OFFSET;\n      var horizontalAlign = LEFT;\n      var y, verticalAlign;\n\n      if (this.aboveAxis) {\n        y = markerBox.y1;\n        verticalAlign = BOTTOM;\n      } else {\n        y = markerBox.y2;\n        verticalAlign = TOP;\n      }\n\n      return {\n        point: new Point(x, y),\n        align: {\n          horizontal: horizontalAlign,\n          vertical: verticalAlign\n        }\n      };\n    }\n  };\n\n  LinePoint.prototype.formatValue = function formatValue(format) {\n    return this.owner.formatPointValue(this, format);\n  };\n\n  LinePoint.prototype.overlapsBox = function overlapsBox(box) {\n    var markerBox = this.markerBox();\n    return markerBox.overlaps(box);\n  };\n\n  LinePoint.prototype.unclipElements = function unclipElements() {\n    if (this.label) {\n      this.label.options.noclip = true;\n    }\n\n    if (this.note) {\n      this.note.options.noclip = true;\n    }\n  };\n\n  LinePoint.prototype.pointData = function pointData() {\n    return {\n      dataItem: this.dataItem,\n      category: this.category,\n      value: this.value,\n      percentage: this.percentage,\n      stackValue: this.stackValue,\n      series: this.series\n    };\n  };\n\n  return LinePoint;\n}(ChartElement);\n\nLinePoint.prototype.defaults = {\n  vertical: true,\n  markers: {\n    visible: true,\n    background: WHITE,\n    size: LINE_MARKER_SIZE,\n    type: CIRCLE,\n    border: {\n      width: 2\n    },\n    opacity: 1\n  },\n  labels: {\n    visible: false,\n    position: ABOVE,\n    margin: getSpacing(3),\n    padding: getSpacing(4),\n    animation: {\n      type: FADEIN,\n      delay: INITIAL_ANIMATION_DURATION\n    }\n  },\n  notes: {\n    label: {}\n  },\n  highlight: {\n    markers: {\n      border: {\n        color: \"#fff\",\n        width: 2\n      }\n    },\n    zIndex: HIGHLIGHT_ZINDEX\n  },\n  errorBars: {\n    line: {\n      width: 1\n    }\n  }\n};\ndeepExtend(LinePoint.prototype, PointEventsMixin);\ndeepExtend(LinePoint.prototype, NoteMixin);\nexport default LinePoint;","map":null,"metadata":{},"sourceType":"module"}