{"ast":null,"code":"import { CircleOption, PathOption } from '../../smithchart/utils/helper';\nimport { SmithchartSize, MarkerOptions } from '../../smithchart/utils/utils';\n/* tslint:disable:no-string-literal */\n\nvar Marker =\n/** @class */\nfunction () {\n  function Marker() {}\n\n  Marker.prototype.drawMarker = function (smithchart, seriesindex, groupElement, pointsRegion) {\n    if (smithchart.series[seriesindex].marker.visible) {\n      var marker = smithchart.series[seriesindex].marker;\n      var count = smithchart.series[seriesindex].points.length - 1;\n      var width = marker.width;\n      var height = marker.height;\n      var symbolName = marker.shape;\n      var gmEle = smithchart.renderer.createGroup({\n        'id': smithchart.element.id + '_svg' + '_series' + seriesindex + '_Marker'\n      });\n      groupElement.appendChild(gmEle);\n      var borderWidth = marker.border.width;\n      var borderColor = marker.border.color;\n      var opacity = marker.opacity;\n      var fill = marker.fill ? marker.fill : smithchart.series[seriesindex].fill || smithchart.seriesColors[seriesindex % smithchart.seriesColors.length];\n\n      for (var i = 0; i < count + 1; i++) {\n        var location_1 = pointsRegion[i]['point'];\n        var pointIndex = i;\n        var options = new MarkerOptions(smithchart.element.id + '_Series' + seriesindex + '_Points' + pointIndex + '_Marker' + pointIndex, fill, borderColor, borderWidth, opacity);\n        gmEle.appendChild(this.drawSymbol(symbolName, marker.imageUrl, location_1, new SmithchartSize(width, height), options, smithchart));\n      }\n    }\n  };\n\n  Marker.prototype.drawSymbol = function (symbolName, url, location, size, options, smithchart) {\n    var markerEle;\n    var shape = symbolName.toLowerCase();\n    var circleOptions;\n    var pathOptions;\n    var path;\n    var border = {\n      color: options['borderColor'],\n      width: options['borderWidth']\n    };\n    var opacity = options.opacity;\n    var startX = location.x;\n    var startY = location.y;\n    var radius = Math.sqrt(size.height * size.height + size.width * size.width) / 2;\n\n    switch (shape) {\n      case 'circle':\n        circleOptions = new CircleOption(options['id'], options['fill'], border, opacity, location.x, location.y, radius, null);\n        markerEle = smithchart.renderer.drawCircle(circleOptions);\n        break;\n\n      case 'rectangle':\n        path = 'M' + ' ' + (startX + -size.width / 2) + ' ' + (startY + -size.height / 2) + ' ' + 'L' + ' ' + (startX + size.width / 2) + ' ' + (startY + -size.height / 2) + ' ' + 'L' + ' ' + (startX + size.width / 2) + ' ' + (startY + size.height / 2) + ' ' + 'L' + ' ' + (startX + -size.width / 2) + ' ' + (startY + size.height / 2) + ' ' + 'L' + ' ' + (startX + -size.width / 2) + ' ' + (startY + -size.height / 2) + 'z';\n        pathOptions = new PathOption(options['id'], options['fill'], border.width, border.color, opacity, '', path);\n        markerEle = smithchart.renderer.drawPath(pathOptions);\n        break;\n\n      case 'triangle':\n        path = 'M' + ' ' + (startX + -size.width / 2) + ' ' + (startY + size.height / 2) + ' ' + 'L' + ' ' + startX + ' ' + (startY + -size.height / 2) + ' ' + 'L' + ' ' + (startX + size.width / 2) + ' ' + (startY + size.height / 2) + ' ' + 'L' + ' ' + (startX + -size.width / 2) + ' ' + (startY + size.height / 2) + 'z';\n        pathOptions = new PathOption(options['id'], options['fill'], border.width, border.color, opacity, '', path);\n        markerEle = smithchart.renderer.drawPath(pathOptions);\n        break;\n\n      case 'diamond':\n        path = 'M' + ' ' + (startX + -size.width / 2) + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + (startY + -size.height / 2) + ' ' + 'L' + ' ' + (startX + size.width / 2) + ' ' + startY + ' ' + 'L' + ' ' + startX + ' ' + (startY + size.height / 2) + ' ' + 'L' + ' ' + (startX + -size.width / 2) + ' ' + startY + 'z';\n        pathOptions = new PathOption(options['id'], options['fill'], border.width, border.color, opacity, '', path);\n        markerEle = smithchart.renderer.drawPath(pathOptions);\n        break;\n\n      case 'pentagon':\n        var eq = 72;\n\n        for (var i = 0; i <= 5; i++) {\n          var xValue = radius * Math.cos(Math.PI / 180 * (i * eq));\n          var yValue = radius * Math.sin(Math.PI / 180 * (i * eq));\n\n          if (i === 0) {\n            path = 'M' + ' ' + (startX + xValue) + ' ' + (startY + yValue) + ' ';\n          } else {\n            path = path.concat('L' + ' ' + (startX + xValue) + ' ' + (startY + yValue) + ' ');\n          }\n        }\n\n        path = path.concat('Z');\n        pathOptions = new PathOption(options['id'], options['fill'], border.width, border.color, opacity, '', path);\n        markerEle = smithchart.renderer.drawPath(pathOptions);\n        break;\n    }\n\n    return markerEle;\n  };\n\n  return Marker;\n}();\n\nexport { Marker };","map":null,"metadata":{},"sourceType":"module"}