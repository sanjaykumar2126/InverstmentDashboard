{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { withInRange, getPoint } from '../../common/utils/helper';\nimport { PathOption, Rect } from '@syncfusion/ej2-svg-base';\nimport { LineBase } from './line-base';\n/**\n * `RangeAreaSeries` module is used to render the range area series.\n */\n\nvar RangeAreaSeries =\n/** @class */\nfunction (_super) {\n  __extends(RangeAreaSeries, _super);\n\n  function RangeAreaSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render RangeArea Series.\n   * @return {void}.\n   * @private\n   */\n\n\n  RangeAreaSeries.prototype.render = function (series, xAxis, yAxis, inverted) {\n    var point;\n    var direction = '';\n    var command = 'M';\n    var closed = undefined;\n    var visiblePoints = this.enableComplexProperty(series);\n\n    for (var i = 0, length_1 = visiblePoints.length; i < length_1; i++) {\n      point = visiblePoints[i];\n      point.symbolLocations = [];\n      point.regions = [];\n      var low = Math.min(point.low, point.high);\n      var high = Math.max(point.low, point.high);\n\n      if (yAxis.isInversed) {\n        var temp = low;\n        low = high;\n        high = temp;\n      }\n\n      var lowPoint = getPoint(point.xValue, low, xAxis, yAxis, inverted);\n      var highPoint = getPoint(point.xValue, high, xAxis, yAxis, inverted);\n      point.symbolLocations.push(highPoint);\n      point.symbolLocations.push(lowPoint);\n      var rect = new Rect(Math.min(lowPoint.x, highPoint.x), Math.min(lowPoint.y, highPoint.y), Math.max(Math.abs(highPoint.x - lowPoint.x), series.marker.width), Math.max(Math.abs(highPoint.y - lowPoint.y), series.marker.width));\n\n      if (!inverted) {\n        rect.x -= series.marker.width / 2;\n      } else {\n        rect.y -= series.marker.width / 2;\n      }\n\n      point.regions.push(rect); //Path to connect the high points\n\n      if (point.visible && withInRange(visiblePoints[point.index - 1], point, visiblePoints[point.index + 1], series)) {\n        direction = direction.concat(command + ' ' + lowPoint.x + ' ' + lowPoint.y + ' ');\n        closed = false;\n\n        if (i + 1 < visiblePoints.length && !visiblePoints[i + 1].visible || i === visiblePoints.length - 1) {\n          // Path to connect the low points\n          direction = this.closeRangeAreaPath(visiblePoints, point, series, direction, i);\n          command = 'M';\n          direction = direction.concat(' ' + 'Z');\n          closed = true;\n        }\n\n        command = 'L';\n      } else {\n        if (closed === false && i !== 0) {\n          direction = this.closeRangeAreaPath(visiblePoints, point, series, direction, i);\n          closed = true;\n        }\n\n        command = 'M';\n        point.symbolLocations = [];\n      }\n    }\n\n    var name = series.category === 'Indicator' ? series.chart.element.id + '_Indicator_' + series.index + '_' + series.name : series.chart.element.id + '_Series_' + series.index;\n    var options = new PathOption(name, series.interior, series.border.width, series.border.color, series.opacity, series.dashArray, direction);\n    this.appendLinePath(options, series, '');\n    this.renderMarker(series);\n  };\n  /**\n   * path for rendering the low points\n   * @return {void}.\n   * @private\n   */\n\n\n  RangeAreaSeries.prototype.closeRangeAreaPath = function (visiblePoints, point, series, direction, i) {\n    for (var j = i; j >= 0; j--) {\n      if (visiblePoints[j].visible && visiblePoints[j].symbolLocations[0]) {\n        point = visiblePoints[j];\n        direction += 'L' + ' ' + point.symbolLocations[0].x + ' ' + point.symbolLocations[0].y + ' ';\n      } else {\n        break;\n      }\n    }\n\n    return direction;\n  };\n  /**\n   * Animates the series.\n   * @param  {Series} series - Defines the series to animate.\n   * @return {void}\n   */\n\n\n  RangeAreaSeries.prototype.doAnimation = function (series) {\n    var option = series.animation;\n    this.doLinearAnimation(series, option);\n  };\n  /**\n   * Get module name.\n   */\n\n\n  RangeAreaSeries.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'RangeAreaSeries';\n  };\n  /**\n   * To destroy the line series.\n   * @return {void}\n   * @private\n   */\n\n\n  RangeAreaSeries.prototype.destroy = function (chart) {\n    /**\n     * Destroys range area series\n     */\n  };\n\n  return RangeAreaSeries;\n}(LineBase);\n\nexport { RangeAreaSeries };","map":null,"metadata":{},"sourceType":"module"}