{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Series } from '../series/chart-series';\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `StochasticIndicator` module is used to render stochastic indicator.\n */\n\nvar StochasticIndicator =\n/** @class */\nfunction (_super) {\n  __extends(StochasticIndicator, _super);\n\n  function StochasticIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Defines the collection of series that represents the stochastic indicator\n   * @private\n   */\n\n\n  StochasticIndicator.prototype.initSeriesCollection = function (indicator, chart) {\n    _super.prototype.initSeriesCollection.call(this, indicator, chart);\n\n    var periodLine = new Series(indicator, 'targetSeries', {}, true);\n    this.setSeriesProperties(periodLine, indicator, 'PeriodLine', indicator.periodLine.color, indicator.periodLine.width, chart);\n\n    if (indicator.showZones) {\n      var upperSeries = new Series(indicator, 'targetSeries', {}, true);\n      this.setSeriesProperties(upperSeries, indicator, 'UpperLine', indicator.upperLine.color, indicator.upperLine.width, chart);\n      var lowerSeries = new Series(indicator, 'targetSeries', {}, true);\n      this.setSeriesProperties(lowerSeries, indicator, 'LowerLine', indicator.lowerLine.color, indicator.lowerLine.width, chart);\n    }\n  };\n  /**\n   * Defines the predictions based on stochastic approach\n   * @private\n   */\n\n\n  StochasticIndicator.prototype.initDataSource = function (indicator, chart) {\n    var signalCollection = [];\n    var upperCollection = [];\n    var lowerCollection = [];\n    var periodCollection = [];\n    var source = [];\n    var sourceSeries = indicator.sourceSeries;\n    var point = {}; //prepare data\n\n    var validData = indicator.points;\n\n    if (validData.length && validData.length >= indicator.period) {\n      if (indicator.showZones) {\n        for (var i = 0; i < validData.length; i++) {\n          upperCollection.push(this.getDataPoint(validData[i].x, indicator.overBought, validData[i], indicator.targetSeries[2], upperCollection.length));\n          lowerCollection.push(this.getDataPoint(validData[i].x, indicator.overSold, validData[i], indicator.targetSeries[3], lowerCollection.length));\n        }\n      }\n\n      source = this.calculatePeriod(indicator.period, indicator.kPeriod, validData, indicator.targetSeries[1]);\n      periodCollection = this.smaCalculation(indicator.period, indicator.kPeriod, source, indicator.targetSeries[1]);\n      signalCollection = this.smaCalculation(indicator.period + indicator.kPeriod - 1, indicator.dPeriod, source, indicator.targetSeries[0]);\n    }\n\n    this.setSeriesRange(signalCollection, indicator, indicator.targetSeries[0]);\n    this.setSeriesRange(periodCollection, indicator, indicator.targetSeries[1]);\n\n    if (indicator.showZones) {\n      this.setSeriesRange(upperCollection, indicator, indicator.targetSeries[2]);\n      this.setSeriesRange(lowerCollection, indicator, indicator.targetSeries[3]);\n    }\n  };\n  /**\n   * Calculates the SMA Values\n   * @private\n   */\n\n\n  StochasticIndicator.prototype.smaCalculation = function (period, kPeriod, data, sourceSeries) {\n    var pointCollection = [];\n\n    if (data.length >= period + kPeriod) {\n      var count = period + (kPeriod - 1);\n      var temp = [];\n      var values = [];\n\n      for (var i = 0; i < data.length; i++) {\n        var value = Number(data[i].y);\n        temp.push(value);\n      }\n\n      var length_1 = temp.length;\n\n      while (length_1 >= count) {\n        var sum = 0;\n\n        for (var i = period - 1; i < period + kPeriod - 1; i++) {\n          sum = sum + temp[i];\n        }\n\n        sum = sum / kPeriod;\n        values.push(sum.toFixed(2));\n        temp.splice(0, 1);\n        length_1 = temp.length;\n      }\n\n      var len = count - 1;\n\n      for (var i = 0; i < data.length; i++) {\n        if (!(i < len)) {\n          pointCollection.push(this.getDataPoint(data[i].x, Number(values[i - len]), data[i], sourceSeries, pointCollection.length));\n          data[i].y = Number(values[i - len]);\n        }\n      }\n    }\n\n    return pointCollection;\n  };\n  /**\n   * Calculates the period line values.\n   * @private\n   */\n\n\n  StochasticIndicator.prototype.calculatePeriod = function (period, kPeriod, data, series) {\n    var lowValues = [];\n    var highValues = [];\n    var closeValues = [];\n    var modifiedSource = [];\n\n    for (var j = 0; j < data.length; j++) {\n      lowValues[j] = data[j].low;\n      highValues[j] = data[j].high;\n      closeValues[j] = data[j].close;\n    }\n\n    if (data.length > period) {\n      var totalPeriod = period + kPeriod;\n      var mins = [];\n      var maxs = [];\n\n      for (var i = 0; i < period - 1; ++i) {\n        maxs.push(0);\n        mins.push(0);\n        modifiedSource.push(this.getDataPoint(data[i].x, data[i].close, data[i], series, modifiedSource.length));\n      }\n\n      for (var i = period - 1; i < data.length; ++i) {\n        var min = Number.MAX_VALUE;\n        var max = Number.MIN_VALUE;\n\n        for (var j = 0; j < period; ++j) {\n          min = Math.min(min, lowValues[i - j]);\n          max = Math.max(max, highValues[i - j]);\n        }\n\n        maxs.push(max);\n        mins.push(min);\n      }\n\n      for (var i = period - 1; i < data.length; ++i) {\n        var top_1 = 0;\n        var bottom = 0;\n        top_1 += closeValues[i] - mins[i];\n        bottom += maxs[i] - mins[i];\n        modifiedSource.push(this.getDataPoint(data[i].x, top_1 / bottom * 100, data[i], series, modifiedSource.length));\n      }\n    }\n\n    return modifiedSource;\n  };\n  /**\n   * To destroy the Stocastic Indicator.\n   * @return {void}\n   * @private\n   */\n\n\n  StochasticIndicator.prototype.destroy = function (chart) {\n    /**\n     * Destroys the stochastic indicator\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  StochasticIndicator.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the indicator.\n     */\n    return 'StochasticIndicator';\n  };\n\n  return StochasticIndicator;\n}(TechnicalAnalysis);\n\nexport { StochasticIndicator };","map":null,"metadata":{},"sourceType":"module"}