{"ast":null,"code":"import { drawing } from '@progress/kendo-drawing';\nimport { interpolateValue, setDefaultOptions } from '../../common';\nimport { X, Y } from '../../common/constants';\nimport { BAR_POINTER, LINEAR_SPEED, LINEAR } from '../constants';\n\nvar BarLinearPointerAnimation = function (superclass) {\n  function BarLinearPointerAnimation() {\n    superclass.apply(this, arguments);\n  }\n\n  if (superclass) BarLinearPointerAnimation.__proto__ = superclass;\n  BarLinearPointerAnimation.prototype = Object.create(superclass && superclass.prototype);\n  BarLinearPointerAnimation.prototype.constructor = BarLinearPointerAnimation;\n\n  BarLinearPointerAnimation.prototype.setup = function setup() {\n    var options = this.options;\n    var axis = this.axis = options.vertical ? Y : X;\n    var to = this.to = options.newPoints[0][axis];\n    var from = this.from = options.oldPoints[0][axis];\n\n    if (options.duration !== 0) {\n      options.duration = Math.max(Math.abs(to - from) / options.speed * 1000, 1);\n    }\n\n    this._set(from);\n  };\n\n  BarLinearPointerAnimation.prototype.step = function step(pos) {\n    var value = interpolateValue(this.from, this.to, pos);\n\n    this._set(value);\n  };\n\n  BarLinearPointerAnimation.prototype._set = function _set(value) {\n    var setter = \"set\" + this.axis.toUpperCase();\n    var points = this.options.newPoints;\n    points[0][setter](value);\n    points[1][setter](value);\n  };\n\n  return BarLinearPointerAnimation;\n}(drawing.Animation);\n\nsetDefaultOptions(BarLinearPointerAnimation, {\n  easing: LINEAR,\n  speed: LINEAR_SPEED\n});\ndrawing.AnimationFactory.current.register(BAR_POINTER, BarLinearPointerAnimation);\nexport default BarLinearPointerAnimation;","map":null,"metadata":{},"sourceType":"module"}