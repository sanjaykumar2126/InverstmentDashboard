{"ast":null,"code":"import acceptKey from './accept-key';\nimport toChartAxisRanges from './to-chart-axis-ranges';\nimport { X, Y } from '../../common/constants';\nimport { Class, deepExtend, elementStyles, elementOffset, defined } from '../../common';\n\nvar ZoomSelection = function (Class) {\n  function ZoomSelection(chart, options) {\n    Class.call(this);\n    this.chart = chart;\n    this.options = deepExtend({}, this.options, options);\n    this.createElement();\n  }\n\n  if (Class) ZoomSelection.__proto__ = Class;\n  ZoomSelection.prototype = Object.create(Class && Class.prototype);\n  ZoomSelection.prototype.constructor = ZoomSelection;\n\n  ZoomSelection.prototype.createElement = function createElement() {\n    var marquee = this._marquee = document.createElement(\"div\");\n    marquee.className = \"k-marquee\";\n    var marqueeColor = document.createElement(\"div\");\n    marqueeColor.className = \"k-marquee-color\";\n    marquee.appendChild(marqueeColor);\n  };\n\n  ZoomSelection.prototype.removeElement = function removeElement() {\n    if (this._marquee.parentNode) {\n      this._marquee.parentNode.removeChild(this._marquee);\n    }\n  };\n\n  ZoomSelection.prototype.setStyles = function setStyles(styles) {\n    elementStyles(this._marquee, styles);\n  };\n\n  ZoomSelection.prototype.start = function start(e) {\n    if (acceptKey(e, this.options.key)) {\n      var chart = this.chart;\n\n      var point = chart._eventCoordinates(e);\n\n      var zoomPane = this._zoomPane = chart._plotArea.paneByPoint(point);\n\n      var clipBox = zoomPane ? zoomPane.chartsBox().clone() : null;\n\n      if (zoomPane && clipBox) {\n        var offset = this._elementOffset();\n\n        clipBox.translate(offset.left, offset.top);\n        this._zoomPaneClipBox = clipBox;\n        document.body.appendChild(this._marquee);\n        this.setStyles({\n          left: e.pageX + 1,\n          top: e.pageY + 1,\n          width: 0,\n          height: 0\n        });\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  ZoomSelection.prototype._elementOffset = function _elementOffset() {\n    var chartElement = this.chart.element;\n    var ref = elementStyles(chartElement, [\"paddingLeft\", \"paddingTop\"]);\n    var paddingLeft = ref.paddingLeft;\n    var paddingTop = ref.paddingTop;\n    var offset = elementOffset(chartElement);\n    return {\n      left: paddingLeft + offset.left,\n      top: paddingTop + offset.top\n    };\n  };\n\n  ZoomSelection.prototype.move = function move(e) {\n    var zoomPane = this._zoomPane;\n\n    if (zoomPane) {\n      this.setStyles(this._selectionPosition(e));\n    }\n  };\n\n  ZoomSelection.prototype.end = function end(e) {\n    var zoomPane = this._zoomPane;\n\n    if (zoomPane) {\n      var elementOffset = this._elementOffset();\n\n      var selectionPosition = this._selectionPosition(e);\n\n      selectionPosition.left -= elementOffset.left;\n      selectionPosition.top -= elementOffset.top;\n      var start = {\n        x: selectionPosition.left,\n        y: selectionPosition.top\n      };\n      var end = {\n        x: selectionPosition.left + selectionPosition.width,\n        y: selectionPosition.top + selectionPosition.height\n      };\n\n      this._updateAxisRanges(start, end);\n\n      this.removeElement();\n      delete this._zoomPane;\n      return toChartAxisRanges(this.axisRanges);\n    }\n  };\n\n  ZoomSelection.prototype.zoom = function zoom() {\n    var axisRanges = this.axisRanges;\n\n    if (axisRanges && axisRanges.length) {\n      var plotArea = this.chart._plotArea;\n\n      for (var idx = 0; idx < axisRanges.length; idx++) {\n        var axisRange = axisRanges[idx];\n        plotArea.updateAxisOptions(axisRange.axis, axisRange.range);\n      }\n\n      plotArea.redraw(plotArea.panes);\n    }\n  };\n\n  ZoomSelection.prototype.destroy = function destroy() {\n    this.removeElement();\n    delete this._marquee;\n    delete this.chart;\n  };\n\n  ZoomSelection.prototype._updateAxisRanges = function _updateAxisRanges(start, end) {\n    var lock = (this.options.lock || \"\").toLowerCase();\n    var axisRanges = [];\n    var axes = this._zoomPane.axes;\n\n    for (var idx = 0; idx < axes.length; idx++) {\n      var axis = axes[idx];\n      var vertical = axis.options.vertical;\n\n      if (!(lock === X && !vertical) && !(lock === Y && vertical) && defined(axis.axisIndex)) {\n        var range = axis.pointsRange(start, end);\n\n        if (range) {\n          axisRanges.push({\n            axis: axis,\n            range: range\n          });\n        }\n      }\n    }\n\n    this.axisRanges = axisRanges;\n  };\n\n  ZoomSelection.prototype._selectionPosition = function _selectionPosition(e) {\n    var clipBox = this._zoomPaneClipBox;\n    var startLocation = {\n      x: e.x.startLocation,\n      y: e.y.startLocation\n    };\n    var pageX = e.x.location;\n    var pageY = e.y.location;\n    var lock = (this.options.lock || \"\").toLowerCase();\n    var left = Math.min(startLocation.x, pageX);\n    var top = Math.min(startLocation.y, pageY);\n    var width = Math.abs(startLocation.x - pageX);\n    var height = Math.abs(startLocation.y - pageY);\n\n    if (lock === X) {\n      left = clipBox.x1;\n      width = clipBox.width();\n    }\n\n    if (lock === Y) {\n      top = clipBox.y1;\n      height = clipBox.height();\n    }\n\n    if (pageX > clipBox.x2) {\n      width = clipBox.x2 - startLocation.x;\n    }\n\n    if (pageX < clipBox.x1) {\n      width = startLocation.x - clipBox.x1;\n    }\n\n    if (pageY > clipBox.y2) {\n      height = clipBox.y2 - startLocation.y;\n    }\n\n    if (pageY < clipBox.y1) {\n      height = startLocation.y - clipBox.y1;\n    }\n\n    return {\n      left: Math.max(left, clipBox.x1),\n      top: Math.max(top, clipBox.y1),\n      width: width,\n      height: height\n    };\n  };\n\n  return ZoomSelection;\n}(Class);\n\nZoomSelection.prototype.options = {\n  key: \"shift\",\n  lock: \"none\"\n};\nexport default ZoomSelection;","map":null,"metadata":{},"sourceType":"module"}